// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TweetStatusP.proto

#include "../../header/proto/TweetStatusP.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashtagEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapFieldEntry_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchingRulesEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MediaEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MediaSizesEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PollEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SizeEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SymbolEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TweetStatusP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_UserP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_URLEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserMentionEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantEntityP_TweetStatusP_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoEntityP_TweetStatusP_2eproto;
namespace proto {
class TweetStatusP_UserPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_UserP> _instance;
} _TweetStatusP_UserP_default_instance_;
class TweetStatusP_CoordinatesPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_CoordinatesP> _instance;
} _TweetStatusP_CoordinatesP_default_instance_;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP> _instance;
} _TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP> _instance;
} _TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_;
class TweetStatusP_PlaceP_BoundingBoxCoordinatePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_PlaceP_BoundingBoxCoordinateP> _instance;
} _TweetStatusP_PlaceP_BoundingBoxCoordinateP_default_instance_;
class TweetStatusP_PlacePDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_PlaceP> _instance;
} _TweetStatusP_PlaceP_default_instance_;
class TweetStatusP_EntitiesPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_EntitiesP> _instance;
} _TweetStatusP_EntitiesP_default_instance_;
class TweetStatusP_ExtendedEntitiesPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP_ExtendedEntitiesP> _instance;
} _TweetStatusP_ExtendedEntitiesP_default_instance_;
class TweetStatusPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TweetStatusP> _instance;
} _TweetStatusP_default_instance_;
class URLEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<URLEntityP> _instance;
} _URLEntityP_default_instance_;
class HashtagEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashtagEntityP> _instance;
} _HashtagEntityP_default_instance_;
class MediaEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaEntityP> _instance;
} _MediaEntityP_default_instance_;
class UserMentionEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserMentionEntityP> _instance;
} _UserMentionEntityP_default_instance_;
class SymbolEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SymbolEntityP> _instance;
} _SymbolEntityP_default_instance_;
class PollEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PollEntityP> _instance;
} _PollEntityP_default_instance_;
class MediaSizesEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaSizesEntityP> _instance;
} _MediaSizesEntityP_default_instance_;
class SizeEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SizeEntityP> _instance;
} _SizeEntityP_default_instance_;
class VariantEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariantEntityP> _instance;
} _VariantEntityP_default_instance_;
class VideoEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoEntityP> _instance;
} _VideoEntityP_default_instance_;
class AdditionalMediaInfoEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalMediaInfoEntityP> _instance;
} _AdditionalMediaInfoEntityP_default_instance_;
class OptionEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionEntityP> _instance;
} _OptionEntityP_default_instance_;
class MatchingRulesEntityPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchingRulesEntityP> _instance;
} _MatchingRulesEntityP_default_instance_;
class MapFieldEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapFieldEntry> _instance;
} _MapFieldEntry_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AdditionalMediaInfoEntityP_default_instance_;
    new (ptr) ::proto::AdditionalMediaInfoEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AdditionalMediaInfoEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_HashtagEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_HashtagEntityP_default_instance_;
    new (ptr) ::proto::HashtagEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::HashtagEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashtagEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashtagEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_MapFieldEntry_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MapFieldEntry_default_instance_;
    new (ptr) ::proto::MapFieldEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MapFieldEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapFieldEntry_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapFieldEntry_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_MatchingRulesEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MatchingRulesEntityP_default_instance_;
    new (ptr) ::proto::MatchingRulesEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MatchingRulesEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchingRulesEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchingRulesEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_MediaEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MediaEntityP_default_instance_;
    new (ptr) ::proto::MediaEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MediaEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MediaEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MediaEntityP_TweetStatusP_2eproto}, {
      &scc_info_MediaSizesEntityP_TweetStatusP_2eproto.base,
      &scc_info_VideoEntityP_TweetStatusP_2eproto.base,
      &scc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_MediaSizesEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MediaSizesEntityP_default_instance_;
    new (ptr) ::proto::MediaSizesEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MediaSizesEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MediaSizesEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MediaSizesEntityP_TweetStatusP_2eproto}, {
      &scc_info_SizeEntityP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_OptionEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_OptionEntityP_default_instance_;
    new (ptr) ::proto::OptionEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::OptionEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_PollEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_PollEntityP_default_instance_;
    new (ptr) ::proto::PollEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::PollEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PollEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PollEntityP_TweetStatusP_2eproto}, {
      &scc_info_OptionEntityP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_SizeEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SizeEntityP_default_instance_;
    new (ptr) ::proto::SizeEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SizeEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SizeEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SizeEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_SymbolEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_SymbolEntityP_default_instance_;
    new (ptr) ::proto::SymbolEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::SymbolEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SymbolEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SymbolEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_TweetStatusP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_default_instance_;
    new (ptr) ::proto::TweetStatusP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TweetStatusP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_TweetStatusP_TweetStatusP_2eproto}, {
      &scc_info_TweetStatusP_UserP_TweetStatusP_2eproto.base,
      &scc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto.base,
      &scc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto.base,
      &scc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto.base,
      &scc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto.base,
      &scc_info_MatchingRulesEntityP_TweetStatusP_2eproto.base,
      &scc_info_MapFieldEntry_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_CoordinatesP_default_instance_;
    new (ptr) ::proto::TweetStatusP_CoordinatesP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_CoordinatesP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_EntitiesP_default_instance_;
    new (ptr) ::proto::TweetStatusP_EntitiesP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_EntitiesP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto}, {
      &scc_info_HashtagEntityP_TweetStatusP_2eproto.base,
      &scc_info_MediaEntityP_TweetStatusP_2eproto.base,
      &scc_info_URLEntityP_TweetStatusP_2eproto.base,
      &scc_info_UserMentionEntityP_TweetStatusP_2eproto.base,
      &scc_info_SymbolEntityP_TweetStatusP_2eproto.base,
      &scc_info_PollEntityP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_ExtendedEntitiesP_default_instance_;
    new (ptr) ::proto::TweetStatusP_ExtendedEntitiesP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_ExtendedEntitiesP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto}, {
      &scc_info_MediaEntityP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_PlaceP_default_instance_;
    new (ptr) ::proto::TweetStatusP_PlaceP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_PlaceP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto}, {
      &scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_default_instance_;
    new (ptr) ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto}, {
      &scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_;
    new (ptr) ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto}, {
      &scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_;
    new (ptr) ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_TweetStatusP_UserP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_TweetStatusP_UserP_default_instance_;
    new (ptr) ::proto::TweetStatusP_UserP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::TweetStatusP_UserP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TweetStatusP_UserP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TweetStatusP_UserP_TweetStatusP_2eproto}, {
      &scc_info_URLEntityP_TweetStatusP_2eproto.base,}};

static void InitDefaultsscc_info_URLEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_URLEntityP_default_instance_;
    new (ptr) ::proto::URLEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::URLEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_URLEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_URLEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_UserMentionEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_UserMentionEntityP_default_instance_;
    new (ptr) ::proto::UserMentionEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::UserMentionEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserMentionEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserMentionEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_VariantEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_VariantEntityP_default_instance_;
    new (ptr) ::proto::VariantEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::VariantEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VariantEntityP_TweetStatusP_2eproto}, {}};

static void InitDefaultsscc_info_VideoEntityP_TweetStatusP_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_VideoEntityP_default_instance_;
    new (ptr) ::proto::VideoEntityP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::VideoEntityP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoEntityP_TweetStatusP_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoEntityP_TweetStatusP_2eproto}, {
      &scc_info_VariantEntityP_TweetStatusP_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TweetStatusP_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TweetStatusP_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TweetStatusP_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TweetStatusP_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, id_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, name_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, screenname_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, location_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, url_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, description_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, isprotected_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, isverified_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, followerscount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, friendscount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, listedcount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, favouritescount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, statusescount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, createdat_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilebannerimageurl_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profileimageurlhttps_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, isdefaultprofile_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, withheldincountries_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, withheldscope_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, descriptionurlentities_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, isgeoenabled_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, lang_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, iscontributorsenabled_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilebackgroundcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilebackgroundimageurl_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilebackgroundimageurlhttps_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilebackgroundtiled_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profileimageurl_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilelinkcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilesidebarbordercolor_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profilesidebarfillcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profiletextcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, profileusebackgroundimage_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, isdefaultprofileimage_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, utcoffset_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, timezone_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, translator_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, isfollowrequestsent_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_UserP, showallinlinemedia_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_CoordinatesP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_CoordinatesP, type_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_CoordinatesP, coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP, coordinate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP, rowstwop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP, type_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP, threedimarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, name_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, countrycode_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, id_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, country_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, placetype_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, url_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, fullname_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_PlaceP, boundingboxcoordinatep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, hashtagentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, mediaentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, urlentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, usermentionentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, symbolentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_EntitiesP, pollentityp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_ExtendedEntitiesP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP_ExtendedEntitiesP, media_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, createdat_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, id_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, text_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, source_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, istruncated_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, inreplytostatusid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, inreplytouserid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, inreplytoscreenname_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, userp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, coordinates_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, place_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, quotedstatusid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, isquotestatus_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, quotedstatus_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, retweetedstatus_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, quotecount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, replycount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, retweetcount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, favoritecount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, entitiesp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, extendedentities_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, isfavorited_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, isretweeted_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, ispossiblysensitive_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, filterlevel_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, lang_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, matchingrules_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, currentuserretweetedid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, scopes_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, withheldcopyright_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, withheldincountries_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, withheldscope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, indices_),
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, displayurl_),
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, expandedurl_),
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::HashtagEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::HashtagEntityP, indices_),
  PROTOBUF_FIELD_OFFSET(::proto::HashtagEntityP, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, displayurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, expandedurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, id_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, indices_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, mediaurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, mediaurlhttps_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, sizes_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, type_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, sourcestatusid_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, sourcestatusidstr_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, url_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, videoinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, additionalmediainfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, id_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, idstr_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, indices_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, name_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, screenname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SymbolEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SymbolEntityP, indices_),
  PROTOBUF_FIELD_OFFSET(::proto::SymbolEntityP, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, options_),
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, enddatetime_),
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, durationminutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, thumb_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, large_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, medium_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, small_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, width_),
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, height_),
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, resize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, bitrate_),
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, contenttype_),
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, aspectratio_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, durationmillis_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, variants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, title_),
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, description_),
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, embeddable_),
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, monetizable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::OptionEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::OptionEntityP, position_),
  PROTOBUF_FIELD_OFFSET(::proto::OptionEntityP, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, id_),
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, idstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MapFieldEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::MapFieldEntry, key_),
  PROTOBUF_FIELD_OFFSET(::proto::MapFieldEntry, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::TweetStatusP_UserP)},
  { 44, -1, sizeof(::proto::TweetStatusP_CoordinatesP)},
  { 51, -1, sizeof(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP)},
  { 57, -1, sizeof(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP)},
  { 63, -1, sizeof(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP)},
  { 70, -1, sizeof(::proto::TweetStatusP_PlaceP)},
  { 83, -1, sizeof(::proto::TweetStatusP_EntitiesP)},
  { 94, -1, sizeof(::proto::TweetStatusP_ExtendedEntitiesP)},
  { 100, -1, sizeof(::proto::TweetStatusP)},
  { 137, -1, sizeof(::proto::URLEntityP)},
  { 146, -1, sizeof(::proto::HashtagEntityP)},
  { 153, -1, sizeof(::proto::MediaEntityP)},
  { 171, -1, sizeof(::proto::UserMentionEntityP)},
  { 181, -1, sizeof(::proto::SymbolEntityP)},
  { 188, -1, sizeof(::proto::PollEntityP)},
  { 196, -1, sizeof(::proto::MediaSizesEntityP)},
  { 205, -1, sizeof(::proto::SizeEntityP)},
  { 213, -1, sizeof(::proto::VariantEntityP)},
  { 221, -1, sizeof(::proto::VideoEntityP)},
  { 229, -1, sizeof(::proto::AdditionalMediaInfoEntityP)},
  { 238, -1, sizeof(::proto::OptionEntityP)},
  { 245, -1, sizeof(::proto::MatchingRulesEntityP)},
  { 253, -1, sizeof(::proto::MapFieldEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_UserP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_CoordinatesP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_PlaceP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_EntitiesP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_ExtendedEntitiesP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TweetStatusP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_URLEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_HashtagEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MediaEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_UserMentionEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SymbolEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_PollEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MediaSizesEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SizeEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_VariantEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_VideoEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AdditionalMediaInfoEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_OptionEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MatchingRulesEntityP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MapFieldEntry_default_instance_),
};

const char descriptor_table_protodef_TweetStatusP_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TweetStatusP.proto\022\005proto\"\204\026\n\014TweetSta"
  "tusP\022\021\n\tcreatedAt\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\014\n\004t"
  "ext\030\003 \001(\t\022\016\n\006source\030\004 \001(\t\022\023\n\013isTruncated"
  "\030\005 \001(\010\022\031\n\021inReplyToStatusId\030\006 \001(\003\022\027\n\017inR"
  "eplyToUserId\030\007 \001(\003\022\033\n\023inReplyToScreenNam"
  "e\030\010 \001(\t\022(\n\005userP\030\033 \001(\0132\031.proto.TweetStat"
  "usP.UserP\0225\n\013coordinates\030\034 \001(\0132 .proto.T"
  "weetStatusP.CoordinatesP\022)\n\005place\030\035 \001(\0132"
  "\032.proto.TweetStatusP.PlaceP\022\026\n\016quotedSta"
  "tusId\030\036 \001(\003\022\025\n\risQuoteStatus\030\037 \001(\010\022)\n\014qu"
  "otedStatus\030  \001(\0132\023.proto.TweetStatusP\022,\n"
  "\017retweetedStatus\030! \001(\0132\023.proto.TweetStat"
  "usP\022\022\n\nquoteCount\030\" \001(\005\022\022\n\nreplyCount\030# "
  "\001(\005\022\024\n\014retweetCount\030$ \001(\005\022\025\n\rfavoriteCou"
  "nt\030% \001(\005\0220\n\tentitiesP\030& \001(\0132\035.proto.Twee"
  "tStatusP.EntitiesP\022\?\n\020extendedEntities\030\'"
  " \001(\0132%.proto.TweetStatusP.ExtendedEntiti"
  "esP\022\023\n\013isFavorited\030( \001(\010\022\023\n\013isRetweeted\030"
  ") \001(\010\022\033\n\023isPossiblySensitive\030* \001(\010\022\023\n\013fi"
  "lterLevel\030+ \001(\t\022\014\n\004lang\030, \001(\t\0222\n\rmatchin"
  "gRules\030- \003(\0132\033.proto.MatchingRulesEntity"
  "P\022\036\n\026currentUserRetweetedId\030. \001(\003\022$\n\006sco"
  "pes\030/ \003(\0132\024.proto.MapFieldEntry\022\031\n\021withh"
  "eldCopyright\0300 \001(\010\022\033\n\023withheldInCountrie"
  "s\0301 \003(\t\022\025\n\rwithheldScope\0302 \001(\t\032\351\007\n\005UserP"
  "\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\022\n\nscreenName"
  "\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\023\n"
  "\013description\030\006 \001(\t\022\023\n\013isProtected\030\007 \001(\010\022"
  "\022\n\nisVerified\030\010 \001(\010\022\026\n\016followersCount\030\t "
  "\001(\005\022\024\n\014friendsCount\030\n \001(\005\022\023\n\013listedCount"
  "\030\013 \001(\005\022\027\n\017favouritesCount\030\014 \001(\005\022\025\n\rstatu"
  "sesCount\030\r \001(\005\022\021\n\tcreatedAt\030\016 \001(\t\022\035\n\025pro"
  "fileBannerImageUrl\030\017 \001(\t\022\034\n\024profileImage"
  "UrlHttps\030\020 \001(\t\022\030\n\020isDefaultProfile\030\021 \001(\010"
  "\022\033\n\023withheldInCountries\030\022 \003(\t\022\025\n\rwithhel"
  "dScope\030\023 \001(\t\0221\n\026descriptionURLEntities\030\024"
  " \001(\0132\021.proto.URLEntityP\022\024\n\014isGeoEnabled\030"
  "\025 \001(\010\022\014\n\004lang\030\026 \001(\t\022\035\n\025isContributorsEna"
  "bled\030\027 \001(\010\022\036\n\026profileBackgroundColor\030\030 \001"
  "(\t\022!\n\031profileBackgroundImageUrl\030\031 \001(\t\022&\n"
  "\036profileBackgroundImageUrlHttps\030\032 \001(\t\022\036\n"
  "\026profileBackgroundTiled\030\033 \001(\010\022\027\n\017profile"
  "ImageUrl\030\034 \001(\t\022\030\n\020profileLinkColor\030\035 \001(\t"
  "\022!\n\031profileSidebarBorderColor\030\036 \001(\t\022\037\n\027p"
  "rofileSidebarFillColor\030\037 \001(\t\022\030\n\020profileT"
  "extColor\030  \001(\t\022!\n\031profileUseBackgroundIm"
  "age\030! \001(\010\022\035\n\025isDefaultProfileImage\030\" \001(\010"
  "\022\021\n\tutcOffset\030# \001(\005\022\020\n\010timeZone\030$ \001(\t\022\022\n"
  "\ntranslator\030% \001(\010\022\033\n\023isFollowRequestSent"
  "\030& \001(\010\022\032\n\022showAllInlineMedia\030\' \001(\010\0321\n\014Co"
  "ordinatesP\022\014\n\004type\030\001 \001(\t\022\023\n\013coordinates\030"
  "\002 \003(\001\032\315\003\n\006PlaceP\022\014\n\004name\030\001 \001(\t\022\023\n\013countr"
  "yCode\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\022\017\n\007country\030\004 \001(\t"
  "\022\021\n\tplaceType\030\005 \001(\t\022\013\n\003url\030\006 \001(\t\022\020\n\010full"
  "Name\030\007 \001(\t\022Q\n\026boundingBoxCoordinateP\030\010 \001"
  "(\01321.proto.TweetStatusP.PlaceP.BoundingB"
  "oxCoordinateP\032\375\001\n\026BoundingBoxCoordinateP"
  "\022\014\n\004type\030\001 \001(\t\022Q\n\rthreeDimArray\030\002 \003(\0132:."
  "proto.TweetStatusP.PlaceP.BoundingBoxCoo"
  "rdinateP.RowsOneP\032\201\001\n\010RowsOneP\022U\n\010rowsTw"
  "oP\030\001 \003(\0132C.proto.TweetStatusP.PlaceP.Bou"
  "ndingBoxCoordinateP.RowsOneP.RowsTwoP\032\036\n"
  "\010RowsTwoP\022\022\n\ncoordinate\030\001 \003(\001\032\231\002\n\tEntiti"
  "esP\022-\n\016hashtagEntityP\030\001 \003(\0132\025.proto.Hash"
  "tagEntityP\022)\n\014mediaEntityP\030\002 \003(\0132\023.proto"
  ".MediaEntityP\022%\n\nurlEntityP\030\003 \003(\0132\021.prot"
  "o.URLEntityP\0225\n\022userMentionEntityP\030\004 \003(\013"
  "2\031.proto.UserMentionEntityP\022+\n\rsymbolEnt"
  "ityP\030\005 \003(\0132\024.proto.SymbolEntityP\022\'\n\013poll"
  "EntityP\030\006 \003(\0132\022.proto.PollEntityP\0327\n\021Ext"
  "endedEntitiesP\022\"\n\005media\030\001 \003(\0132\023.proto.Me"
  "diaEntityP\"S\n\nURLEntityP\022\017\n\007indices\030\001 \003("
  "\005\022\022\n\ndisplayURL\030\002 \001(\t\022\023\n\013expandedURL\030\003 \001"
  "(\t\022\013\n\003url\030\004 \001(\t\"/\n\016HashtagEntityP\022\017\n\007ind"
  "ices\030\001 \003(\005\022\014\n\004text\030\002 \001(\t\"\334\002\n\014MediaEntity"
  "P\022\022\n\ndisplayURL\030\001 \001(\t\022\023\n\013expandedURL\030\002 \001"
  "(\t\022\n\n\002id\030\003 \001(\003\022\017\n\007indices\030\004 \003(\005\022\020\n\010media"
  "URL\030\005 \001(\t\022\025\n\rmediaURLHttps\030\006 \001(\t\022\'\n\005size"
  "s\030\007 \001(\0132\030.proto.MediaSizesEntityP\022\014\n\004typ"
  "e\030\010 \001(\t\022\026\n\016sourceStatusId\030\t \001(\003\022\031\n\021sourc"
  "eStatusIdStr\030\n \001(\t\022\013\n\003url\030\013 \001(\t\022&\n\tvideo"
  "Info\030\014 \001(\0132\023.proto.VideoEntityP\022>\n\023addit"
  "ionalMediaInfo\030\r \001(\0132!.proto.AdditionalM"
  "ediaInfoEntityP\"b\n\022UserMentionEntityP\022\n\n"
  "\002id\030\001 \001(\003\022\r\n\005idStr\030\002 \001(\t\022\017\n\007indices\030\003 \003("
  "\005\022\014\n\004name\030\004 \001(\t\022\022\n\nscreenName\030\005 \001(\t\".\n\rS"
  "ymbolEntityP\022\017\n\007indices\030\001 \003(\005\022\014\n\004text\030\002 "
  "\001(\t\"b\n\013PollEntityP\022%\n\007options\030\001 \003(\0132\024.pr"
  "oto.OptionEntityP\022\023\n\013endDatetime\030\002 \001(\t\022\027"
  "\n\017durationMinutes\030\003 \001(\t\"\240\001\n\021MediaSizesEn"
  "tityP\022!\n\005thumb\030\001 \001(\0132\022.proto.SizeEntityP"
  "\022!\n\005large\030\002 \001(\0132\022.proto.SizeEntityP\022\"\n\006m"
  "edium\030\003 \001(\0132\022.proto.SizeEntityP\022!\n\005small"
  "\030\004 \001(\0132\022.proto.SizeEntityP\"<\n\013SizeEntity"
  "P\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\016\n\006resi"
  "ze\030\003 \001(\t\"C\n\016VariantEntityP\022\017\n\007bitrate\030\001 "
  "\001(\003\022\023\n\013contentType\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\"d\n"
  "\014VideoEntityP\022\023\n\013aspectRatio\030\001 \003(\005\022\026\n\016du"
  "rationMillis\030\002 \001(\005\022\'\n\010variants\030\003 \003(\0132\025.p"
  "roto.VariantEntityP\"i\n\032AdditionalMediaIn"
  "foEntityP\022\r\n\005title\030\001 \001(\t\022\023\n\013description\030"
  "\002 \001(\t\022\022\n\nembeddable\030\003 \001(\010\022\023\n\013monetizable"
  "\030\004 \001(\010\"/\n\rOptionEntityP\022\020\n\010position\030\001 \001("
  "\005\022\014\n\004text\030\002 \001(\t\">\n\024MatchingRulesEntityP\022"
  "\013\n\003tag\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\r\n\005idStr\030\003 \001(\t\""
  "+\n\rMapFieldEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TweetStatusP_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TweetStatusP_2eproto_sccs[23] = {
  &scc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto.base,
  &scc_info_HashtagEntityP_TweetStatusP_2eproto.base,
  &scc_info_MapFieldEntry_TweetStatusP_2eproto.base,
  &scc_info_MatchingRulesEntityP_TweetStatusP_2eproto.base,
  &scc_info_MediaEntityP_TweetStatusP_2eproto.base,
  &scc_info_MediaSizesEntityP_TweetStatusP_2eproto.base,
  &scc_info_OptionEntityP_TweetStatusP_2eproto.base,
  &scc_info_PollEntityP_TweetStatusP_2eproto.base,
  &scc_info_SizeEntityP_TweetStatusP_2eproto.base,
  &scc_info_SymbolEntityP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto.base,
  &scc_info_TweetStatusP_UserP_TweetStatusP_2eproto.base,
  &scc_info_URLEntityP_TweetStatusP_2eproto.base,
  &scc_info_UserMentionEntityP_TweetStatusP_2eproto.base,
  &scc_info_VariantEntityP_TweetStatusP_2eproto.base,
  &scc_info_VideoEntityP_TweetStatusP_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TweetStatusP_2eproto_once;
static bool descriptor_table_TweetStatusP_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TweetStatusP_2eproto = {
  &descriptor_table_TweetStatusP_2eproto_initialized, descriptor_table_protodef_TweetStatusP_2eproto, "TweetStatusP.proto", 4252,
  &descriptor_table_TweetStatusP_2eproto_once, descriptor_table_TweetStatusP_2eproto_sccs, descriptor_table_TweetStatusP_2eproto_deps, 23, 0,
  schemas, file_default_instances, TableStruct_TweetStatusP_2eproto::offsets,
  file_level_metadata_TweetStatusP_2eproto, 23, file_level_enum_descriptors_TweetStatusP_2eproto, file_level_service_descriptors_TweetStatusP_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TweetStatusP_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TweetStatusP_2eproto), true);
namespace proto {

// ===================================================================

void TweetStatusP_UserP::InitAsDefaultInstance() {
  ::proto::_TweetStatusP_UserP_default_instance_._instance.get_mutable()->descriptionurlentities_ = const_cast< ::proto::URLEntityP*>(
      ::proto::URLEntityP::internal_default_instance());
}
class TweetStatusP_UserP::_Internal {
 public:
  static const ::proto::URLEntityP& descriptionurlentities(const TweetStatusP_UserP* msg);
};

const ::proto::URLEntityP&
TweetStatusP_UserP::_Internal::descriptionurlentities(const TweetStatusP_UserP* msg) {
  return *msg->descriptionurlentities_;
}
TweetStatusP_UserP::TweetStatusP_UserP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.UserP)
}
TweetStatusP_UserP::TweetStatusP_UserP(const TweetStatusP_UserP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      withheldincountries_(from.withheldincountries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_screenname().empty()) {
    screenname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.screenname_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_location().empty()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  profilebannerimageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilebannerimageurl().empty()) {
    profilebannerimageurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebannerimageurl_);
  }
  profileimageurlhttps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profileimageurlhttps().empty()) {
    profileimageurlhttps_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profileimageurlhttps_);
  }
  withheldscope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_withheldscope().empty()) {
    withheldscope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.withheldscope_);
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  profilebackgroundcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilebackgroundcolor().empty()) {
    profilebackgroundcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebackgroundcolor_);
  }
  profilebackgroundimageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilebackgroundimageurl().empty()) {
    profilebackgroundimageurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebackgroundimageurl_);
  }
  profilebackgroundimageurlhttps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilebackgroundimageurlhttps().empty()) {
    profilebackgroundimageurlhttps_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebackgroundimageurlhttps_);
  }
  profileimageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profileimageurl().empty()) {
    profileimageurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profileimageurl_);
  }
  profilelinkcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilelinkcolor().empty()) {
    profilelinkcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilelinkcolor_);
  }
  profilesidebarbordercolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilesidebarbordercolor().empty()) {
    profilesidebarbordercolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilesidebarbordercolor_);
  }
  profilesidebarfillcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profilesidebarfillcolor().empty()) {
    profilesidebarfillcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilesidebarfillcolor_);
  }
  profiletextcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profiletextcolor().empty()) {
    profiletextcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profiletextcolor_);
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timezone().empty()) {
    timezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from._internal_has_descriptionurlentities()) {
    descriptionurlentities_ = new ::proto::URLEntityP(*from.descriptionurlentities_);
  } else {
    descriptionurlentities_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&showallinlinemedia_) -
    reinterpret_cast<char*>(&id_)) + sizeof(showallinlinemedia_));
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.UserP)
}

void TweetStatusP_UserP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_UserP_TweetStatusP_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebannerimageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profileimageurlhttps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  withheldscope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundimageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundimageurlhttps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profileimageurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilelinkcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilesidebarbordercolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilesidebarfillcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profiletextcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&descriptionurlentities_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showallinlinemedia_) -
      reinterpret_cast<char*>(&descriptionurlentities_)) + sizeof(showallinlinemedia_));
}

TweetStatusP_UserP::~TweetStatusP_UserP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.UserP)
  SharedDtor();
}

void TweetStatusP_UserP::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebannerimageurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profileimageurlhttps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  withheldscope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundimageurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundimageurlhttps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profileimageurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilelinkcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilesidebarbordercolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilesidebarfillcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profiletextcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete descriptionurlentities_;
}

void TweetStatusP_UserP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_UserP& TweetStatusP_UserP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_UserP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_UserP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.UserP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  withheldincountries_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebannerimageurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profileimageurlhttps_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  withheldscope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundimageurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilebackgroundimageurlhttps_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profileimageurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilelinkcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilesidebarbordercolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profilesidebarfillcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profiletextcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && descriptionurlentities_ != nullptr) {
    delete descriptionurlentities_;
  }
  descriptionurlentities_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showallinlinemedia_) -
      reinterpret_cast<char*>(&id_)) + sizeof(showallinlinemedia_));
  _internal_metadata_.Clear();
}

const char* TweetStatusP_UserP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string screenName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_screenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.screenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isProtected = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isprotected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isVerified = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isverified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 followersCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          followerscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 friendsCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          friendscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 listedCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          listedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 favouritesCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          favouritescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 statusesCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          statusescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createdAt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileBannerImageUrl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_profilebannerimageurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileBannerImageUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileImageUrlHttps = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_profileimageurlhttps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileImageUrlHttps"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isDefaultProfile = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          isdefaultprofile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string withheldInCountries = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_withheldincountries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.withheldInCountries"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // string withheldScope = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_withheldscope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.withheldScope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.URLEntityP descriptionURLEntities = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_descriptionurlentities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isGeoEnabled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          isgeoenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isContributorsEnabled = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          iscontributorsenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileBackgroundColor = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_profilebackgroundcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileBackgroundColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileBackgroundImageUrl = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_profilebackgroundimageurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileBackgroundImageUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileBackgroundImageUrlHttps = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_profilebackgroundimageurlhttps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool profileBackgroundTiled = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          profilebackgroundtiled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileImageUrl = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_profileimageurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileImageUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileLinkColor = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_profilelinkcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileLinkColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileSidebarBorderColor = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_profilesidebarbordercolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileSidebarBorderColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileSidebarFillColor = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_profilesidebarfillcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileSidebarFillColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profileTextColor = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_profiletextcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.profileTextColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool profileUseBackgroundImage = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          profileusebackgroundimage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isDefaultProfileImage = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isdefaultprofileimage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 utcOffset = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utcoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timeZone = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.UserP.timeZone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool translator = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          translator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFollowRequestSent = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isfollowrequestsent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool showAllInlineMedia = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          showallinlinemedia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_UserP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.UserP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string screenName = 3;
  if (this->screenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_screenname().data(), static_cast<int>(this->_internal_screenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.screenName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_screenname(), target);
  }

  // string location = 4;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.location");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location(), target);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // bool isProtected = 7;
  if (this->isprotected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isprotected(), target);
  }

  // bool isVerified = 8;
  if (this->isverified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_isverified(), target);
  }

  // int32 followersCount = 9;
  if (this->followerscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_followerscount(), target);
  }

  // int32 friendsCount = 10;
  if (this->friendscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_friendscount(), target);
  }

  // int32 listedCount = 11;
  if (this->listedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_listedcount(), target);
  }

  // int32 favouritesCount = 12;
  if (this->favouritescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_favouritescount(), target);
  }

  // int32 statusesCount = 13;
  if (this->statusescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_statusescount(), target);
  }

  // string createdAt = 14;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.createdAt");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_createdat(), target);
  }

  // string profileBannerImageUrl = 15;
  if (this->profilebannerimageurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebannerimageurl().data(), static_cast<int>(this->_internal_profilebannerimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileBannerImageUrl");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_profilebannerimageurl(), target);
  }

  // string profileImageUrlHttps = 16;
  if (this->profileimageurlhttps().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profileimageurlhttps().data(), static_cast<int>(this->_internal_profileimageurlhttps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileImageUrlHttps");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_profileimageurlhttps(), target);
  }

  // bool isDefaultProfile = 17;
  if (this->isdefaultprofile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_isdefaultprofile(), target);
  }

  // repeated string withheldInCountries = 18;
  for (int i = 0, n = this->_internal_withheldincountries_size(); i < n; i++) {
    const auto& s = this->_internal_withheldincountries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.withheldInCountries");
    target = stream->WriteString(18, s, target);
  }

  // string withheldScope = 19;
  if (this->withheldscope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_withheldscope().data(), static_cast<int>(this->_internal_withheldscope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.withheldScope");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_withheldscope(), target);
  }

  // .proto.URLEntityP descriptionURLEntities = 20;
  if (this->has_descriptionurlentities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::descriptionurlentities(this), target, stream);
  }

  // bool isGeoEnabled = 21;
  if (this->isgeoenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_isgeoenabled(), target);
  }

  // string lang = 22;
  if (this->lang().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.lang");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_lang(), target);
  }

  // bool isContributorsEnabled = 23;
  if (this->iscontributorsenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_iscontributorsenabled(), target);
  }

  // string profileBackgroundColor = 24;
  if (this->profilebackgroundcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebackgroundcolor().data(), static_cast<int>(this->_internal_profilebackgroundcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileBackgroundColor");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_profilebackgroundcolor(), target);
  }

  // string profileBackgroundImageUrl = 25;
  if (this->profilebackgroundimageurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebackgroundimageurl().data(), static_cast<int>(this->_internal_profilebackgroundimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileBackgroundImageUrl");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_profilebackgroundimageurl(), target);
  }

  // string profileBackgroundImageUrlHttps = 26;
  if (this->profilebackgroundimageurlhttps().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebackgroundimageurlhttps().data(), static_cast<int>(this->_internal_profilebackgroundimageurlhttps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_profilebackgroundimageurlhttps(), target);
  }

  // bool profileBackgroundTiled = 27;
  if (this->profilebackgroundtiled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_profilebackgroundtiled(), target);
  }

  // string profileImageUrl = 28;
  if (this->profileimageurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profileimageurl().data(), static_cast<int>(this->_internal_profileimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileImageUrl");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_profileimageurl(), target);
  }

  // string profileLinkColor = 29;
  if (this->profilelinkcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilelinkcolor().data(), static_cast<int>(this->_internal_profilelinkcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileLinkColor");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_profilelinkcolor(), target);
  }

  // string profileSidebarBorderColor = 30;
  if (this->profilesidebarbordercolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilesidebarbordercolor().data(), static_cast<int>(this->_internal_profilesidebarbordercolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileSidebarBorderColor");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_profilesidebarbordercolor(), target);
  }

  // string profileSidebarFillColor = 31;
  if (this->profilesidebarfillcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilesidebarfillcolor().data(), static_cast<int>(this->_internal_profilesidebarfillcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileSidebarFillColor");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_profilesidebarfillcolor(), target);
  }

  // string profileTextColor = 32;
  if (this->profiletextcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profiletextcolor().data(), static_cast<int>(this->_internal_profiletextcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.profileTextColor");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_profiletextcolor(), target);
  }

  // bool profileUseBackgroundImage = 33;
  if (this->profileusebackgroundimage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_profileusebackgroundimage(), target);
  }

  // bool isDefaultProfileImage = 34;
  if (this->isdefaultprofileimage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_isdefaultprofileimage(), target);
  }

  // int32 utcOffset = 35;
  if (this->utcoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_utcoffset(), target);
  }

  // string timeZone = 36;
  if (this->timezone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.UserP.timeZone");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_timezone(), target);
  }

  // bool translator = 37;
  if (this->translator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_translator(), target);
  }

  // bool isFollowRequestSent = 38;
  if (this->isfollowrequestsent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_isfollowrequestsent(), target);
  }

  // bool showAllInlineMedia = 39;
  if (this->showallinlinemedia() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_showallinlinemedia(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.UserP)
  return target;
}

size_t TweetStatusP_UserP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.UserP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string withheldInCountries = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(withheldincountries_.size());
  for (int i = 0, n = withheldincountries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      withheldincountries_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string screenName = 3;
  if (this->screenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_screenname());
  }

  // string location = 4;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string url = 5;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string createdAt = 14;
  if (this->createdat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string profileBannerImageUrl = 15;
  if (this->profilebannerimageurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebannerimageurl());
  }

  // string profileImageUrlHttps = 16;
  if (this->profileimageurlhttps().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profileimageurlhttps());
  }

  // string withheldScope = 19;
  if (this->withheldscope().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_withheldscope());
  }

  // string lang = 22;
  if (this->lang().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string profileBackgroundColor = 24;
  if (this->profilebackgroundcolor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebackgroundcolor());
  }

  // string profileBackgroundImageUrl = 25;
  if (this->profilebackgroundimageurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebackgroundimageurl());
  }

  // string profileBackgroundImageUrlHttps = 26;
  if (this->profilebackgroundimageurlhttps().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebackgroundimageurlhttps());
  }

  // string profileImageUrl = 28;
  if (this->profileimageurl().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profileimageurl());
  }

  // string profileLinkColor = 29;
  if (this->profilelinkcolor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilelinkcolor());
  }

  // string profileSidebarBorderColor = 30;
  if (this->profilesidebarbordercolor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilesidebarbordercolor());
  }

  // string profileSidebarFillColor = 31;
  if (this->profilesidebarfillcolor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilesidebarfillcolor());
  }

  // string profileTextColor = 32;
  if (this->profiletextcolor().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profiletextcolor());
  }

  // string timeZone = 36;
  if (this->timezone().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // .proto.URLEntityP descriptionURLEntities = 20;
  if (this->has_descriptionurlentities()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *descriptionurlentities_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 followersCount = 9;
  if (this->followerscount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followerscount());
  }

  // int32 friendsCount = 10;
  if (this->friendscount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friendscount());
  }

  // int32 listedCount = 11;
  if (this->listedcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_listedcount());
  }

  // int32 favouritesCount = 12;
  if (this->favouritescount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_favouritescount());
  }

  // int32 statusesCount = 13;
  if (this->statusescount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statusescount());
  }

  // bool isProtected = 7;
  if (this->isprotected() != 0) {
    total_size += 1 + 1;
  }

  // bool isVerified = 8;
  if (this->isverified() != 0) {
    total_size += 1 + 1;
  }

  // bool isDefaultProfile = 17;
  if (this->isdefaultprofile() != 0) {
    total_size += 2 + 1;
  }

  // bool isGeoEnabled = 21;
  if (this->isgeoenabled() != 0) {
    total_size += 2 + 1;
  }

  // bool isContributorsEnabled = 23;
  if (this->iscontributorsenabled() != 0) {
    total_size += 2 + 1;
  }

  // bool profileBackgroundTiled = 27;
  if (this->profilebackgroundtiled() != 0) {
    total_size += 2 + 1;
  }

  // bool profileUseBackgroundImage = 33;
  if (this->profileusebackgroundimage() != 0) {
    total_size += 2 + 1;
  }

  // bool isDefaultProfileImage = 34;
  if (this->isdefaultprofileimage() != 0) {
    total_size += 2 + 1;
  }

  // int32 utcOffset = 35;
  if (this->utcoffset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_utcoffset());
  }

  // bool translator = 37;
  if (this->translator() != 0) {
    total_size += 2 + 1;
  }

  // bool isFollowRequestSent = 38;
  if (this->isfollowrequestsent() != 0) {
    total_size += 2 + 1;
  }

  // bool showAllInlineMedia = 39;
  if (this->showallinlinemedia() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_UserP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.UserP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_UserP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_UserP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.UserP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.UserP)
    MergeFrom(*source);
  }
}

void TweetStatusP_UserP::MergeFrom(const TweetStatusP_UserP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.UserP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  withheldincountries_.MergeFrom(from.withheldincountries_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.screenname().size() > 0) {

    screenname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.screenname_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.profilebannerimageurl().size() > 0) {

    profilebannerimageurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebannerimageurl_);
  }
  if (from.profileimageurlhttps().size() > 0) {

    profileimageurlhttps_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profileimageurlhttps_);
  }
  if (from.withheldscope().size() > 0) {

    withheldscope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.withheldscope_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.profilebackgroundcolor().size() > 0) {

    profilebackgroundcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebackgroundcolor_);
  }
  if (from.profilebackgroundimageurl().size() > 0) {

    profilebackgroundimageurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebackgroundimageurl_);
  }
  if (from.profilebackgroundimageurlhttps().size() > 0) {

    profilebackgroundimageurlhttps_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilebackgroundimageurlhttps_);
  }
  if (from.profileimageurl().size() > 0) {

    profileimageurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profileimageurl_);
  }
  if (from.profilelinkcolor().size() > 0) {

    profilelinkcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilelinkcolor_);
  }
  if (from.profilesidebarbordercolor().size() > 0) {

    profilesidebarbordercolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilesidebarbordercolor_);
  }
  if (from.profilesidebarfillcolor().size() > 0) {

    profilesidebarfillcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profilesidebarfillcolor_);
  }
  if (from.profiletextcolor().size() > 0) {

    profiletextcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.profiletextcolor_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.has_descriptionurlentities()) {
    _internal_mutable_descriptionurlentities()->::proto::URLEntityP::MergeFrom(from._internal_descriptionurlentities());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.followerscount() != 0) {
    _internal_set_followerscount(from._internal_followerscount());
  }
  if (from.friendscount() != 0) {
    _internal_set_friendscount(from._internal_friendscount());
  }
  if (from.listedcount() != 0) {
    _internal_set_listedcount(from._internal_listedcount());
  }
  if (from.favouritescount() != 0) {
    _internal_set_favouritescount(from._internal_favouritescount());
  }
  if (from.statusescount() != 0) {
    _internal_set_statusescount(from._internal_statusescount());
  }
  if (from.isprotected() != 0) {
    _internal_set_isprotected(from._internal_isprotected());
  }
  if (from.isverified() != 0) {
    _internal_set_isverified(from._internal_isverified());
  }
  if (from.isdefaultprofile() != 0) {
    _internal_set_isdefaultprofile(from._internal_isdefaultprofile());
  }
  if (from.isgeoenabled() != 0) {
    _internal_set_isgeoenabled(from._internal_isgeoenabled());
  }
  if (from.iscontributorsenabled() != 0) {
    _internal_set_iscontributorsenabled(from._internal_iscontributorsenabled());
  }
  if (from.profilebackgroundtiled() != 0) {
    _internal_set_profilebackgroundtiled(from._internal_profilebackgroundtiled());
  }
  if (from.profileusebackgroundimage() != 0) {
    _internal_set_profileusebackgroundimage(from._internal_profileusebackgroundimage());
  }
  if (from.isdefaultprofileimage() != 0) {
    _internal_set_isdefaultprofileimage(from._internal_isdefaultprofileimage());
  }
  if (from.utcoffset() != 0) {
    _internal_set_utcoffset(from._internal_utcoffset());
  }
  if (from.translator() != 0) {
    _internal_set_translator(from._internal_translator());
  }
  if (from.isfollowrequestsent() != 0) {
    _internal_set_isfollowrequestsent(from._internal_isfollowrequestsent());
  }
  if (from.showallinlinemedia() != 0) {
    _internal_set_showallinlinemedia(from._internal_showallinlinemedia());
  }
}

void TweetStatusP_UserP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.UserP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_UserP::CopyFrom(const TweetStatusP_UserP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.UserP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_UserP::IsInitialized() const {
  return true;
}

void TweetStatusP_UserP::InternalSwap(TweetStatusP_UserP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  withheldincountries_.InternalSwap(&other->withheldincountries_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  screenname_.Swap(&other->screenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilebannerimageurl_.Swap(&other->profilebannerimageurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profileimageurlhttps_.Swap(&other->profileimageurlhttps_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  withheldscope_.Swap(&other->withheldscope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilebackgroundcolor_.Swap(&other->profilebackgroundcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilebackgroundimageurl_.Swap(&other->profilebackgroundimageurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilebackgroundimageurlhttps_.Swap(&other->profilebackgroundimageurlhttps_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profileimageurl_.Swap(&other->profileimageurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilelinkcolor_.Swap(&other->profilelinkcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilesidebarbordercolor_.Swap(&other->profilesidebarbordercolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profilesidebarfillcolor_.Swap(&other->profilesidebarfillcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profiletextcolor_.Swap(&other->profiletextcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(descriptionurlentities_, other->descriptionurlentities_);
  swap(id_, other->id_);
  swap(followerscount_, other->followerscount_);
  swap(friendscount_, other->friendscount_);
  swap(listedcount_, other->listedcount_);
  swap(favouritescount_, other->favouritescount_);
  swap(statusescount_, other->statusescount_);
  swap(isprotected_, other->isprotected_);
  swap(isverified_, other->isverified_);
  swap(isdefaultprofile_, other->isdefaultprofile_);
  swap(isgeoenabled_, other->isgeoenabled_);
  swap(iscontributorsenabled_, other->iscontributorsenabled_);
  swap(profilebackgroundtiled_, other->profilebackgroundtiled_);
  swap(profileusebackgroundimage_, other->profileusebackgroundimage_);
  swap(isdefaultprofileimage_, other->isdefaultprofileimage_);
  swap(utcoffset_, other->utcoffset_);
  swap(translator_, other->translator_);
  swap(isfollowrequestsent_, other->isfollowrequestsent_);
  swap(showallinlinemedia_, other->showallinlinemedia_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_UserP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_CoordinatesP::InitAsDefaultInstance() {
}
class TweetStatusP_CoordinatesP::_Internal {
 public:
};

TweetStatusP_CoordinatesP::TweetStatusP_CoordinatesP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.CoordinatesP)
}
TweetStatusP_CoordinatesP::TweetStatusP_CoordinatesP(const TweetStatusP_CoordinatesP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coordinates_(from.coordinates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.CoordinatesP)
}

void TweetStatusP_CoordinatesP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TweetStatusP_CoordinatesP::~TweetStatusP_CoordinatesP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.CoordinatesP)
  SharedDtor();
}

void TweetStatusP_CoordinatesP::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TweetStatusP_CoordinatesP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_CoordinatesP& TweetStatusP_CoordinatesP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_CoordinatesP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_CoordinatesP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.CoordinatesP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TweetStatusP_CoordinatesP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.CoordinatesP.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_coordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_CoordinatesP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.CoordinatesP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.CoordinatesP.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated double coordinates = 2;
  if (this->_internal_coordinates_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_coordinates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.CoordinatesP)
  return target;
}

size_t TweetStatusP_CoordinatesP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.CoordinatesP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coordinates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinates_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coordinates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_CoordinatesP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.CoordinatesP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_CoordinatesP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_CoordinatesP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.CoordinatesP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.CoordinatesP)
    MergeFrom(*source);
  }
}

void TweetStatusP_CoordinatesP::MergeFrom(const TweetStatusP_CoordinatesP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.CoordinatesP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void TweetStatusP_CoordinatesP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.CoordinatesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_CoordinatesP::CopyFrom(const TweetStatusP_CoordinatesP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.CoordinatesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_CoordinatesP::IsInitialized() const {
  return true;
}

void TweetStatusP_CoordinatesP::InternalSwap(TweetStatusP_CoordinatesP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coordinates_.InternalSwap(&other->coordinates_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_CoordinatesP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::InitAsDefaultInstance() {
}
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_Internal {
 public:
};

TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
}
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coordinate_(from.coordinate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::SharedCtor() {
}

TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::~TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  SharedDtor();
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::SharedDtor() {
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinate_.Clear();
  _internal_metadata_.Clear();
}

const char* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coordinate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_coordinate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double coordinate = 1;
  if (this->_internal_coordinate_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_coordinate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  return target;
}

size_t TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coordinate = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinate_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coordinate_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
    MergeFrom(*source);
  }
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::MergeFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinate_.MergeFrom(from.coordinate_);
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::CopyFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::IsInitialized() const {
  return true;
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::InternalSwap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coordinate_.InternalSwap(&other->coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::InitAsDefaultInstance() {
}
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::_Internal {
 public:
};

TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
}
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rowstwop_(from.rowstwop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto.base);
}

TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::~TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  SharedDtor();
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::SharedDtor() {
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rowstwop_.Clear();
  _internal_metadata_.Clear();
}

const char* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rowstwop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rowstwop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rowstwop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  return target;
}

size_t TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
  total_size += 1UL * this->_internal_rowstwop_size();
  for (const auto& msg : this->rowstwop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
    MergeFrom(*source);
  }
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::MergeFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rowstwop_.MergeFrom(from.rowstwop_);
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::CopyFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::IsInitialized() const {
  return true;
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::InternalSwap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rowstwop_.InternalSwap(&other->rowstwop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::InitAsDefaultInstance() {
}
class TweetStatusP_PlaceP_BoundingBoxCoordinateP::_Internal {
 public:
};

TweetStatusP_PlaceP_BoundingBoxCoordinateP::TweetStatusP_PlaceP_BoundingBoxCoordinateP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
}
TweetStatusP_PlaceP_BoundingBoxCoordinateP::TweetStatusP_PlaceP_BoundingBoxCoordinateP(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      threedimarray_(from.threedimarray_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TweetStatusP_PlaceP_BoundingBoxCoordinateP::~TweetStatusP_PlaceP_BoundingBoxCoordinateP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  SharedDtor();
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_PlaceP_BoundingBoxCoordinateP& TweetStatusP_PlaceP_BoundingBoxCoordinateP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_PlaceP_BoundingBoxCoordinateP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_PlaceP_BoundingBoxCoordinateP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threedimarray_.Clear();
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TweetStatusP_PlaceP_BoundingBoxCoordinateP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threedimarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_PlaceP_BoundingBoxCoordinateP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threedimarray_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_threedimarray(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  return target;
}

size_t TweetStatusP_PlaceP_BoundingBoxCoordinateP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
  total_size += 1UL * this->_internal_threedimarray_size();
  for (const auto& msg : this->threedimarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_PlaceP_BoundingBoxCoordinateP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_PlaceP_BoundingBoxCoordinateP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
    MergeFrom(*source);
  }
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::MergeFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threedimarray_.MergeFrom(from.threedimarray_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::CopyFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_PlaceP_BoundingBoxCoordinateP::IsInitialized() const {
  return true;
}

void TweetStatusP_PlaceP_BoundingBoxCoordinateP::InternalSwap(TweetStatusP_PlaceP_BoundingBoxCoordinateP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  threedimarray_.InternalSwap(&other->threedimarray_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_PlaceP_BoundingBoxCoordinateP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_PlaceP::InitAsDefaultInstance() {
  ::proto::_TweetStatusP_PlaceP_default_instance_._instance.get_mutable()->boundingboxcoordinatep_ = const_cast< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP*>(
      ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP::internal_default_instance());
}
class TweetStatusP_PlaceP::_Internal {
 public:
  static const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP& boundingboxcoordinatep(const TweetStatusP_PlaceP* msg);
};

const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP&
TweetStatusP_PlaceP::_Internal::boundingboxcoordinatep(const TweetStatusP_PlaceP* msg) {
  return *msg->boundingboxcoordinatep_;
}
TweetStatusP_PlaceP::TweetStatusP_PlaceP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.PlaceP)
}
TweetStatusP_PlaceP::TweetStatusP_PlaceP(const TweetStatusP_PlaceP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countrycode().empty()) {
    countrycode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  placetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placetype().empty()) {
    placetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placetype_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from._internal_has_boundingboxcoordinatep()) {
    boundingboxcoordinatep_ = new ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP(*from.boundingboxcoordinatep_);
  } else {
    boundingboxcoordinatep_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.PlaceP)
}

void TweetStatusP_PlaceP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boundingboxcoordinatep_ = nullptr;
}

TweetStatusP_PlaceP::~TweetStatusP_PlaceP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.PlaceP)
  SharedDtor();
}

void TweetStatusP_PlaceP::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete boundingboxcoordinatep_;
}

void TweetStatusP_PlaceP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_PlaceP& TweetStatusP_PlaceP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_PlaceP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_PlaceP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.PlaceP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && boundingboxcoordinatep_ != nullptr) {
    delete boundingboxcoordinatep_;
  }
  boundingboxcoordinatep_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TweetStatusP_PlaceP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string countryCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.countryCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_placetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.placeType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.PlaceP.fullName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingboxcoordinatep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_PlaceP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.PlaceP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrycode().data(), static_cast<int>(this->_internal_countrycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.countryCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_countrycode(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string country = 4;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  // string placeType = 5;
  if (this->placetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placetype().data(), static_cast<int>(this->_internal_placetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.placeType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placetype(), target);
  }

  // string url = 6;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_url(), target);
  }

  // string fullName = 7;
  if (this->fullname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.PlaceP.fullName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fullname(), target);
  }

  // .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
  if (this->has_boundingboxcoordinatep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::boundingboxcoordinatep(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.PlaceP)
  return target;
}

size_t TweetStatusP_PlaceP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.PlaceP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string countryCode = 2;
  if (this->countrycode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrycode());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string country = 4;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string placeType = 5;
  if (this->placetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placetype());
  }

  // string url = 6;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string fullName = 7;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
  if (this->has_boundingboxcoordinatep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingboxcoordinatep_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_PlaceP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.PlaceP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_PlaceP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_PlaceP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.PlaceP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.PlaceP)
    MergeFrom(*source);
  }
}

void TweetStatusP_PlaceP::MergeFrom(const TweetStatusP_PlaceP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.PlaceP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.countrycode().size() > 0) {

    countrycode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.placetype().size() > 0) {

    placetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.placetype_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.has_boundingboxcoordinatep()) {
    _internal_mutable_boundingboxcoordinatep()->::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP::MergeFrom(from._internal_boundingboxcoordinatep());
  }
}

void TweetStatusP_PlaceP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.PlaceP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_PlaceP::CopyFrom(const TweetStatusP_PlaceP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.PlaceP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_PlaceP::IsInitialized() const {
  return true;
}

void TweetStatusP_PlaceP::InternalSwap(TweetStatusP_PlaceP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  countrycode_.Swap(&other->countrycode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  placetype_.Swap(&other->placetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(boundingboxcoordinatep_, other->boundingboxcoordinatep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_PlaceP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_EntitiesP::InitAsDefaultInstance() {
}
class TweetStatusP_EntitiesP::_Internal {
 public:
};

TweetStatusP_EntitiesP::TweetStatusP_EntitiesP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.EntitiesP)
}
TweetStatusP_EntitiesP::TweetStatusP_EntitiesP(const TweetStatusP_EntitiesP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hashtagentityp_(from.hashtagentityp_),
      mediaentityp_(from.mediaentityp_),
      urlentityp_(from.urlentityp_),
      usermentionentityp_(from.usermentionentityp_),
      symbolentityp_(from.symbolentityp_),
      pollentityp_(from.pollentityp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.EntitiesP)
}

void TweetStatusP_EntitiesP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto.base);
}

TweetStatusP_EntitiesP::~TweetStatusP_EntitiesP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.EntitiesP)
  SharedDtor();
}

void TweetStatusP_EntitiesP::SharedDtor() {
}

void TweetStatusP_EntitiesP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_EntitiesP& TweetStatusP_EntitiesP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_EntitiesP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_EntitiesP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.EntitiesP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashtagentityp_.Clear();
  mediaentityp_.Clear();
  urlentityp_.Clear();
  usermentionentityp_.Clear();
  symbolentityp_.Clear();
  pollentityp_.Clear();
  _internal_metadata_.Clear();
}

const char* TweetStatusP_EntitiesP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.HashtagEntityP hashtagEntityP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashtagentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.MediaEntityP mediaEntityP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mediaentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.URLEntityP urlEntityP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_urlentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usermentionentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.SymbolEntityP symbolEntityP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_symbolentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.PollEntityP pollEntityP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pollentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_EntitiesP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.EntitiesP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.HashtagEntityP hashtagEntityP = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashtagentityp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hashtagentityp(i), target, stream);
  }

  // repeated .proto.MediaEntityP mediaEntityP = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mediaentityp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mediaentityp(i), target, stream);
  }

  // repeated .proto.URLEntityP urlEntityP = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_urlentityp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_urlentityp(i), target, stream);
  }

  // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usermentionentityp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_usermentionentityp(i), target, stream);
  }

  // repeated .proto.SymbolEntityP symbolEntityP = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_symbolentityp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_symbolentityp(i), target, stream);
  }

  // repeated .proto.PollEntityP pollEntityP = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pollentityp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pollentityp(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.EntitiesP)
  return target;
}

size_t TweetStatusP_EntitiesP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.EntitiesP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.HashtagEntityP hashtagEntityP = 1;
  total_size += 1UL * this->_internal_hashtagentityp_size();
  for (const auto& msg : this->hashtagentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.MediaEntityP mediaEntityP = 2;
  total_size += 1UL * this->_internal_mediaentityp_size();
  for (const auto& msg : this->mediaentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.URLEntityP urlEntityP = 3;
  total_size += 1UL * this->_internal_urlentityp_size();
  for (const auto& msg : this->urlentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
  total_size += 1UL * this->_internal_usermentionentityp_size();
  for (const auto& msg : this->usermentionentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.SymbolEntityP symbolEntityP = 5;
  total_size += 1UL * this->_internal_symbolentityp_size();
  for (const auto& msg : this->symbolentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PollEntityP pollEntityP = 6;
  total_size += 1UL * this->_internal_pollentityp_size();
  for (const auto& msg : this->pollentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_EntitiesP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.EntitiesP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_EntitiesP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_EntitiesP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.EntitiesP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.EntitiesP)
    MergeFrom(*source);
  }
}

void TweetStatusP_EntitiesP::MergeFrom(const TweetStatusP_EntitiesP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.EntitiesP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashtagentityp_.MergeFrom(from.hashtagentityp_);
  mediaentityp_.MergeFrom(from.mediaentityp_);
  urlentityp_.MergeFrom(from.urlentityp_);
  usermentionentityp_.MergeFrom(from.usermentionentityp_);
  symbolentityp_.MergeFrom(from.symbolentityp_);
  pollentityp_.MergeFrom(from.pollentityp_);
}

void TweetStatusP_EntitiesP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.EntitiesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_EntitiesP::CopyFrom(const TweetStatusP_EntitiesP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.EntitiesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_EntitiesP::IsInitialized() const {
  return true;
}

void TweetStatusP_EntitiesP::InternalSwap(TweetStatusP_EntitiesP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hashtagentityp_.InternalSwap(&other->hashtagentityp_);
  mediaentityp_.InternalSwap(&other->mediaentityp_);
  urlentityp_.InternalSwap(&other->urlentityp_);
  usermentionentityp_.InternalSwap(&other->usermentionentityp_);
  symbolentityp_.InternalSwap(&other->symbolentityp_);
  pollentityp_.InternalSwap(&other->pollentityp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_EntitiesP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP_ExtendedEntitiesP::InitAsDefaultInstance() {
}
class TweetStatusP_ExtendedEntitiesP::_Internal {
 public:
};

TweetStatusP_ExtendedEntitiesP::TweetStatusP_ExtendedEntitiesP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP.ExtendedEntitiesP)
}
TweetStatusP_ExtendedEntitiesP::TweetStatusP_ExtendedEntitiesP(const TweetStatusP_ExtendedEntitiesP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      media_(from.media_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP.ExtendedEntitiesP)
}

void TweetStatusP_ExtendedEntitiesP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto.base);
}

TweetStatusP_ExtendedEntitiesP::~TweetStatusP_ExtendedEntitiesP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP.ExtendedEntitiesP)
  SharedDtor();
}

void TweetStatusP_ExtendedEntitiesP::SharedDtor() {
}

void TweetStatusP_ExtendedEntitiesP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP_ExtendedEntitiesP& TweetStatusP_ExtendedEntitiesP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_ExtendedEntitiesP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP_ExtendedEntitiesP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP.ExtendedEntitiesP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_.Clear();
  _internal_metadata_.Clear();
}

const char* TweetStatusP_ExtendedEntitiesP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.MediaEntityP media = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP_ExtendedEntitiesP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP.ExtendedEntitiesP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.MediaEntityP media = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_media_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_media(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP.ExtendedEntitiesP)
  return target;
}

size_t TweetStatusP_ExtendedEntitiesP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP.ExtendedEntitiesP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MediaEntityP media = 1;
  total_size += 1UL * this->_internal_media_size();
  for (const auto& msg : this->media_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP_ExtendedEntitiesP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP.ExtendedEntitiesP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP_ExtendedEntitiesP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP_ExtendedEntitiesP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP.ExtendedEntitiesP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP.ExtendedEntitiesP)
    MergeFrom(*source);
  }
}

void TweetStatusP_ExtendedEntitiesP::MergeFrom(const TweetStatusP_ExtendedEntitiesP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP.ExtendedEntitiesP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  media_.MergeFrom(from.media_);
}

void TweetStatusP_ExtendedEntitiesP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP.ExtendedEntitiesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP_ExtendedEntitiesP::CopyFrom(const TweetStatusP_ExtendedEntitiesP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP.ExtendedEntitiesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP_ExtendedEntitiesP::IsInitialized() const {
  return true;
}

void TweetStatusP_ExtendedEntitiesP::InternalSwap(TweetStatusP_ExtendedEntitiesP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_.InternalSwap(&other->media_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP_ExtendedEntitiesP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TweetStatusP::InitAsDefaultInstance() {
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->userp_ = const_cast< ::proto::TweetStatusP_UserP*>(
      ::proto::TweetStatusP_UserP::internal_default_instance());
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->coordinates_ = const_cast< ::proto::TweetStatusP_CoordinatesP*>(
      ::proto::TweetStatusP_CoordinatesP::internal_default_instance());
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->place_ = const_cast< ::proto::TweetStatusP_PlaceP*>(
      ::proto::TweetStatusP_PlaceP::internal_default_instance());
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->quotedstatus_ = const_cast< ::proto::TweetStatusP*>(
      ::proto::TweetStatusP::internal_default_instance());
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->retweetedstatus_ = const_cast< ::proto::TweetStatusP*>(
      ::proto::TweetStatusP::internal_default_instance());
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->entitiesp_ = const_cast< ::proto::TweetStatusP_EntitiesP*>(
      ::proto::TweetStatusP_EntitiesP::internal_default_instance());
  ::proto::_TweetStatusP_default_instance_._instance.get_mutable()->extendedentities_ = const_cast< ::proto::TweetStatusP_ExtendedEntitiesP*>(
      ::proto::TweetStatusP_ExtendedEntitiesP::internal_default_instance());
}
class TweetStatusP::_Internal {
 public:
  static const ::proto::TweetStatusP_UserP& userp(const TweetStatusP* msg);
  static const ::proto::TweetStatusP_CoordinatesP& coordinates(const TweetStatusP* msg);
  static const ::proto::TweetStatusP_PlaceP& place(const TweetStatusP* msg);
  static const ::proto::TweetStatusP& quotedstatus(const TweetStatusP* msg);
  static const ::proto::TweetStatusP& retweetedstatus(const TweetStatusP* msg);
  static const ::proto::TweetStatusP_EntitiesP& entitiesp(const TweetStatusP* msg);
  static const ::proto::TweetStatusP_ExtendedEntitiesP& extendedentities(const TweetStatusP* msg);
};

const ::proto::TweetStatusP_UserP&
TweetStatusP::_Internal::userp(const TweetStatusP* msg) {
  return *msg->userp_;
}
const ::proto::TweetStatusP_CoordinatesP&
TweetStatusP::_Internal::coordinates(const TweetStatusP* msg) {
  return *msg->coordinates_;
}
const ::proto::TweetStatusP_PlaceP&
TweetStatusP::_Internal::place(const TweetStatusP* msg) {
  return *msg->place_;
}
const ::proto::TweetStatusP&
TweetStatusP::_Internal::quotedstatus(const TweetStatusP* msg) {
  return *msg->quotedstatus_;
}
const ::proto::TweetStatusP&
TweetStatusP::_Internal::retweetedstatus(const TweetStatusP* msg) {
  return *msg->retweetedstatus_;
}
const ::proto::TweetStatusP_EntitiesP&
TweetStatusP::_Internal::entitiesp(const TweetStatusP* msg) {
  return *msg->entitiesp_;
}
const ::proto::TweetStatusP_ExtendedEntitiesP&
TweetStatusP::_Internal::extendedentities(const TweetStatusP* msg) {
  return *msg->extendedentities_;
}
TweetStatusP::TweetStatusP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TweetStatusP)
}
TweetStatusP::TweetStatusP(const TweetStatusP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matchingrules_(from.matchingrules_),
      scopes_(from.scopes_),
      withheldincountries_(from.withheldincountries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createdat().empty()) {
    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  inreplytoscreenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inreplytoscreenname().empty()) {
    inreplytoscreenname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inreplytoscreenname_);
  }
  filterlevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filterlevel().empty()) {
    filterlevel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filterlevel_);
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  withheldscope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_withheldscope().empty()) {
    withheldscope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.withheldscope_);
  }
  if (from._internal_has_userp()) {
    userp_ = new ::proto::TweetStatusP_UserP(*from.userp_);
  } else {
    userp_ = nullptr;
  }
  if (from._internal_has_coordinates()) {
    coordinates_ = new ::proto::TweetStatusP_CoordinatesP(*from.coordinates_);
  } else {
    coordinates_ = nullptr;
  }
  if (from._internal_has_place()) {
    place_ = new ::proto::TweetStatusP_PlaceP(*from.place_);
  } else {
    place_ = nullptr;
  }
  if (from._internal_has_quotedstatus()) {
    quotedstatus_ = new ::proto::TweetStatusP(*from.quotedstatus_);
  } else {
    quotedstatus_ = nullptr;
  }
  if (from._internal_has_retweetedstatus()) {
    retweetedstatus_ = new ::proto::TweetStatusP(*from.retweetedstatus_);
  } else {
    retweetedstatus_ = nullptr;
  }
  if (from._internal_has_entitiesp()) {
    entitiesp_ = new ::proto::TweetStatusP_EntitiesP(*from.entitiesp_);
  } else {
    entitiesp_ = nullptr;
  }
  if (from._internal_has_extendedentities()) {
    extendedentities_ = new ::proto::TweetStatusP_ExtendedEntitiesP(*from.extendedentities_);
  } else {
    extendedentities_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentuserretweetedid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(currentuserretweetedid_));
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP)
}

void TweetStatusP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TweetStatusP_TweetStatusP_2eproto.base);
  createdat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inreplytoscreenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filterlevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  withheldscope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentuserretweetedid_) -
      reinterpret_cast<char*>(&userp_)) + sizeof(currentuserretweetedid_));
}

TweetStatusP::~TweetStatusP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP)
  SharedDtor();
}

void TweetStatusP::SharedDtor() {
  createdat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inreplytoscreenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filterlevel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  withheldscope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete userp_;
  if (this != internal_default_instance()) delete coordinates_;
  if (this != internal_default_instance()) delete place_;
  if (this != internal_default_instance()) delete quotedstatus_;
  if (this != internal_default_instance()) delete retweetedstatus_;
  if (this != internal_default_instance()) delete entitiesp_;
  if (this != internal_default_instance()) delete extendedentities_;
}

void TweetStatusP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TweetStatusP& TweetStatusP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TweetStatusP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void TweetStatusP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchingrules_.Clear();
  scopes_.Clear();
  withheldincountries_.Clear();
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inreplytoscreenname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filterlevel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  withheldscope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && userp_ != nullptr) {
    delete userp_;
  }
  userp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && place_ != nullptr) {
    delete place_;
  }
  place_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quotedstatus_ != nullptr) {
    delete quotedstatus_;
  }
  quotedstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && retweetedstatus_ != nullptr) {
    delete retweetedstatus_;
  }
  retweetedstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && entitiesp_ != nullptr) {
    delete entitiesp_;
  }
  entitiesp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extendedentities_ != nullptr) {
    delete extendedentities_;
  }
  extendedentities_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentuserretweetedid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(currentuserretweetedid_));
  _internal_metadata_.Clear();
}

const char* TweetStatusP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string createdAt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_createdat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.createdAt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isTruncated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          istruncated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inReplyToStatusId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          inreplytostatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inReplyToUserId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          inreplytouserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inReplyToScreenName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_inreplytoscreenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.inReplyToScreenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP.UserP userP = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_userp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP.CoordinatesP coordinates = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP.PlaceP place = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_place(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 quotedStatusId = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          quotedstatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isQuoteStatus = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          isquotestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP quotedStatus = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP retweetedStatus = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_retweetedstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quoteCount = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quotecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 replyCount = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          replycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retweetCount = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retweetcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 favoriteCount = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          favoritecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP.EntitiesP entitiesP = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_entitiesp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TweetStatusP.ExtendedEntitiesP extendedEntities = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedentities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFavorited = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isfavorited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isRetweeted = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isretweeted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isPossiblySensitive = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ispossiblysensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filterLevel = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_filterlevel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.filterLevel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.MatchingRulesEntityP matchingRules = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_matchingrules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 currentUserRetweetedId = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          currentuserretweetedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.MapFieldEntry scopes = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_scopes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else goto handle_unusual;
        continue;
      // bool withheldCopyright = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          withheldcopyright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string withheldInCountries = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_withheldincountries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.withheldInCountries"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // string withheldScope = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_withheldscope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.TweetStatusP.withheldScope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TweetStatusP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string createdAt = 1;
  if (this->createdat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.createdAt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_createdat(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // string source = 4;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.source");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source(), target);
  }

  // bool isTruncated = 5;
  if (this->istruncated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_istruncated(), target);
  }

  // int64 inReplyToStatusId = 6;
  if (this->inreplytostatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_inreplytostatusid(), target);
  }

  // int64 inReplyToUserId = 7;
  if (this->inreplytouserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_inreplytouserid(), target);
  }

  // string inReplyToScreenName = 8;
  if (this->inreplytoscreenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inreplytoscreenname().data(), static_cast<int>(this->_internal_inreplytoscreenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.inReplyToScreenName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_inreplytoscreenname(), target);
  }

  // .proto.TweetStatusP.UserP userP = 27;
  if (this->has_userp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::userp(this), target, stream);
  }

  // .proto.TweetStatusP.CoordinatesP coordinates = 28;
  if (this->has_coordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::coordinates(this), target, stream);
  }

  // .proto.TweetStatusP.PlaceP place = 29;
  if (this->has_place()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::place(this), target, stream);
  }

  // int64 quotedStatusId = 30;
  if (this->quotedstatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->_internal_quotedstatusid(), target);
  }

  // bool isQuoteStatus = 31;
  if (this->isquotestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_isquotestatus(), target);
  }

  // .proto.TweetStatusP quotedStatus = 32;
  if (this->has_quotedstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::quotedstatus(this), target, stream);
  }

  // .proto.TweetStatusP retweetedStatus = 33;
  if (this->has_retweetedstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::retweetedstatus(this), target, stream);
  }

  // int32 quoteCount = 34;
  if (this->quotecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_quotecount(), target);
  }

  // int32 replyCount = 35;
  if (this->replycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_replycount(), target);
  }

  // int32 retweetCount = 36;
  if (this->retweetcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_retweetcount(), target);
  }

  // int32 favoriteCount = 37;
  if (this->favoritecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_favoritecount(), target);
  }

  // .proto.TweetStatusP.EntitiesP entitiesP = 38;
  if (this->has_entitiesp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::entitiesp(this), target, stream);
  }

  // .proto.TweetStatusP.ExtendedEntitiesP extendedEntities = 39;
  if (this->has_extendedentities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::extendedentities(this), target, stream);
  }

  // bool isFavorited = 40;
  if (this->isfavorited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_isfavorited(), target);
  }

  // bool isRetweeted = 41;
  if (this->isretweeted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_isretweeted(), target);
  }

  // bool isPossiblySensitive = 42;
  if (this->ispossiblysensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_ispossiblysensitive(), target);
  }

  // string filterLevel = 43;
  if (this->filterlevel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filterlevel().data(), static_cast<int>(this->_internal_filterlevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.filterLevel");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_filterlevel(), target);
  }

  // string lang = 44;
  if (this->lang().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.lang");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_lang(), target);
  }

  // repeated .proto.MatchingRulesEntityP matchingRules = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matchingrules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, this->_internal_matchingrules(i), target, stream);
  }

  // int64 currentUserRetweetedId = 46;
  if (this->currentuserretweetedid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(46, this->_internal_currentuserretweetedid(), target);
  }

  // repeated .proto.MapFieldEntry scopes = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scopes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, this->_internal_scopes(i), target, stream);
  }

  // bool withheldCopyright = 48;
  if (this->withheldcopyright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_withheldcopyright(), target);
  }

  // repeated string withheldInCountries = 49;
  for (int i = 0, n = this->_internal_withheldincountries_size(); i < n; i++) {
    const auto& s = this->_internal_withheldincountries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.withheldInCountries");
    target = stream->WriteString(49, s, target);
  }

  // string withheldScope = 50;
  if (this->withheldscope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_withheldscope().data(), static_cast<int>(this->_internal_withheldscope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.withheldScope");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_withheldscope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP)
  return target;
}

size_t TweetStatusP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MatchingRulesEntityP matchingRules = 45;
  total_size += 2UL * this->_internal_matchingrules_size();
  for (const auto& msg : this->matchingrules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.MapFieldEntry scopes = 47;
  total_size += 2UL * this->_internal_scopes_size();
  for (const auto& msg : this->scopes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string withheldInCountries = 49;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(withheldincountries_.size());
  for (int i = 0, n = withheldincountries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      withheldincountries_.Get(i));
  }

  // string createdAt = 1;
  if (this->createdat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string source = 4;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string inReplyToScreenName = 8;
  if (this->inreplytoscreenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inreplytoscreenname());
  }

  // string filterLevel = 43;
  if (this->filterlevel().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filterlevel());
  }

  // string lang = 44;
  if (this->lang().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string withheldScope = 50;
  if (this->withheldscope().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_withheldscope());
  }

  // .proto.TweetStatusP.UserP userP = 27;
  if (this->has_userp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *userp_);
  }

  // .proto.TweetStatusP.CoordinatesP coordinates = 28;
  if (this->has_coordinates()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinates_);
  }

  // .proto.TweetStatusP.PlaceP place = 29;
  if (this->has_place()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *place_);
  }

  // .proto.TweetStatusP quotedStatus = 32;
  if (this->has_quotedstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quotedstatus_);
  }

  // .proto.TweetStatusP retweetedStatus = 33;
  if (this->has_retweetedstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *retweetedstatus_);
  }

  // .proto.TweetStatusP.EntitiesP entitiesP = 38;
  if (this->has_entitiesp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entitiesp_);
  }

  // .proto.TweetStatusP.ExtendedEntitiesP extendedEntities = 39;
  if (this->has_extendedentities()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extendedentities_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 inReplyToStatusId = 6;
  if (this->inreplytostatusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inreplytostatusid());
  }

  // int64 inReplyToUserId = 7;
  if (this->inreplytouserid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inreplytouserid());
  }

  // int64 quotedStatusId = 30;
  if (this->quotedstatusid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_quotedstatusid());
  }

  // bool isTruncated = 5;
  if (this->istruncated() != 0) {
    total_size += 1 + 1;
  }

  // bool isQuoteStatus = 31;
  if (this->isquotestatus() != 0) {
    total_size += 2 + 1;
  }

  // bool isFavorited = 40;
  if (this->isfavorited() != 0) {
    total_size += 2 + 1;
  }

  // bool isRetweeted = 41;
  if (this->isretweeted() != 0) {
    total_size += 2 + 1;
  }

  // int32 quoteCount = 34;
  if (this->quotecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quotecount());
  }

  // int32 replyCount = 35;
  if (this->replycount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_replycount());
  }

  // int32 retweetCount = 36;
  if (this->retweetcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retweetcount());
  }

  // int32 favoriteCount = 37;
  if (this->favoritecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_favoritecount());
  }

  // bool isPossiblySensitive = 42;
  if (this->ispossiblysensitive() != 0) {
    total_size += 2 + 1;
  }

  // bool withheldCopyright = 48;
  if (this->withheldcopyright() != 0) {
    total_size += 2 + 1;
  }

  // int64 currentUserRetweetedId = 46;
  if (this->currentuserretweetedid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_currentuserretweetedid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TweetStatusP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TweetStatusP)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetStatusP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TweetStatusP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TweetStatusP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TweetStatusP)
    MergeFrom(*source);
  }
}

void TweetStatusP::MergeFrom(const TweetStatusP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchingrules_.MergeFrom(from.matchingrules_);
  scopes_.MergeFrom(from.scopes_);
  withheldincountries_.MergeFrom(from.withheldincountries_);
  if (from.createdat().size() > 0) {

    createdat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createdat_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.inreplytoscreenname().size() > 0) {

    inreplytoscreenname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inreplytoscreenname_);
  }
  if (from.filterlevel().size() > 0) {

    filterlevel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filterlevel_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.withheldscope().size() > 0) {

    withheldscope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.withheldscope_);
  }
  if (from.has_userp()) {
    _internal_mutable_userp()->::proto::TweetStatusP_UserP::MergeFrom(from._internal_userp());
  }
  if (from.has_coordinates()) {
    _internal_mutable_coordinates()->::proto::TweetStatusP_CoordinatesP::MergeFrom(from._internal_coordinates());
  }
  if (from.has_place()) {
    _internal_mutable_place()->::proto::TweetStatusP_PlaceP::MergeFrom(from._internal_place());
  }
  if (from.has_quotedstatus()) {
    _internal_mutable_quotedstatus()->::proto::TweetStatusP::MergeFrom(from._internal_quotedstatus());
  }
  if (from.has_retweetedstatus()) {
    _internal_mutable_retweetedstatus()->::proto::TweetStatusP::MergeFrom(from._internal_retweetedstatus());
  }
  if (from.has_entitiesp()) {
    _internal_mutable_entitiesp()->::proto::TweetStatusP_EntitiesP::MergeFrom(from._internal_entitiesp());
  }
  if (from.has_extendedentities()) {
    _internal_mutable_extendedentities()->::proto::TweetStatusP_ExtendedEntitiesP::MergeFrom(from._internal_extendedentities());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.inreplytostatusid() != 0) {
    _internal_set_inreplytostatusid(from._internal_inreplytostatusid());
  }
  if (from.inreplytouserid() != 0) {
    _internal_set_inreplytouserid(from._internal_inreplytouserid());
  }
  if (from.quotedstatusid() != 0) {
    _internal_set_quotedstatusid(from._internal_quotedstatusid());
  }
  if (from.istruncated() != 0) {
    _internal_set_istruncated(from._internal_istruncated());
  }
  if (from.isquotestatus() != 0) {
    _internal_set_isquotestatus(from._internal_isquotestatus());
  }
  if (from.isfavorited() != 0) {
    _internal_set_isfavorited(from._internal_isfavorited());
  }
  if (from.isretweeted() != 0) {
    _internal_set_isretweeted(from._internal_isretweeted());
  }
  if (from.quotecount() != 0) {
    _internal_set_quotecount(from._internal_quotecount());
  }
  if (from.replycount() != 0) {
    _internal_set_replycount(from._internal_replycount());
  }
  if (from.retweetcount() != 0) {
    _internal_set_retweetcount(from._internal_retweetcount());
  }
  if (from.favoritecount() != 0) {
    _internal_set_favoritecount(from._internal_favoritecount());
  }
  if (from.ispossiblysensitive() != 0) {
    _internal_set_ispossiblysensitive(from._internal_ispossiblysensitive());
  }
  if (from.withheldcopyright() != 0) {
    _internal_set_withheldcopyright(from._internal_withheldcopyright());
  }
  if (from.currentuserretweetedid() != 0) {
    _internal_set_currentuserretweetedid(from._internal_currentuserretweetedid());
  }
}

void TweetStatusP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TweetStatusP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetStatusP::CopyFrom(const TweetStatusP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP::IsInitialized() const {
  return true;
}

void TweetStatusP::InternalSwap(TweetStatusP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  matchingrules_.InternalSwap(&other->matchingrules_);
  scopes_.InternalSwap(&other->scopes_);
  withheldincountries_.InternalSwap(&other->withheldincountries_);
  createdat_.Swap(&other->createdat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inreplytoscreenname_.Swap(&other->inreplytoscreenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filterlevel_.Swap(&other->filterlevel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  withheldscope_.Swap(&other->withheldscope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userp_, other->userp_);
  swap(coordinates_, other->coordinates_);
  swap(place_, other->place_);
  swap(quotedstatus_, other->quotedstatus_);
  swap(retweetedstatus_, other->retweetedstatus_);
  swap(entitiesp_, other->entitiesp_);
  swap(extendedentities_, other->extendedentities_);
  swap(id_, other->id_);
  swap(inreplytostatusid_, other->inreplytostatusid_);
  swap(inreplytouserid_, other->inreplytouserid_);
  swap(quotedstatusid_, other->quotedstatusid_);
  swap(istruncated_, other->istruncated_);
  swap(isquotestatus_, other->isquotestatus_);
  swap(isfavorited_, other->isfavorited_);
  swap(isretweeted_, other->isretweeted_);
  swap(quotecount_, other->quotecount_);
  swap(replycount_, other->replycount_);
  swap(retweetcount_, other->retweetcount_);
  swap(favoritecount_, other->favoritecount_);
  swap(ispossiblysensitive_, other->ispossiblysensitive_);
  swap(withheldcopyright_, other->withheldcopyright_);
  swap(currentuserretweetedid_, other->currentuserretweetedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void URLEntityP::InitAsDefaultInstance() {
}
class URLEntityP::_Internal {
 public:
};

URLEntityP::URLEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.URLEntityP)
}
URLEntityP::URLEntityP(const URLEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  displayurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayurl().empty()) {
    displayurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displayurl_);
  }
  expandedurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expandedurl().empty()) {
    expandedurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expandedurl_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.URLEntityP)
}

void URLEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_URLEntityP_TweetStatusP_2eproto.base);
  displayurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expandedurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

URLEntityP::~URLEntityP() {
  // @@protoc_insertion_point(destructor:proto.URLEntityP)
  SharedDtor();
}

void URLEntityP::SharedDtor() {
  displayurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expandedurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void URLEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const URLEntityP& URLEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_URLEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void URLEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.URLEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  displayurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expandedurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* URLEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string displayURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_displayurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.URLEntityP.displayURL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expandedURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_expandedurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.URLEntityP.expandedURL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.URLEntityP.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* URLEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.URLEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  // string displayURL = 2;
  if (this->displayurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayurl().data(), static_cast<int>(this->_internal_displayurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.URLEntityP.displayURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayurl(), target);
  }

  // string expandedURL = 3;
  if (this->expandedurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expandedurl().data(), static_cast<int>(this->_internal_expandedurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.URLEntityP.expandedURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_expandedurl(), target);
  }

  // string url = 4;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.URLEntityP.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.URLEntityP)
  return target;
}

size_t URLEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.URLEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string displayURL = 2;
  if (this->displayurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayurl());
  }

  // string expandedURL = 3;
  if (this->expandedurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expandedurl());
  }

  // string url = 4;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void URLEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.URLEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const URLEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<URLEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.URLEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.URLEntityP)
    MergeFrom(*source);
  }
}

void URLEntityP::MergeFrom(const URLEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.URLEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.displayurl().size() > 0) {

    displayurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displayurl_);
  }
  if (from.expandedurl().size() > 0) {

    expandedurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expandedurl_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void URLEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.URLEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URLEntityP::CopyFrom(const URLEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.URLEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLEntityP::IsInitialized() const {
  return true;
}

void URLEntityP::InternalSwap(URLEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  displayurl_.Swap(&other->displayurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expandedurl_.Swap(&other->expandedurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata URLEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashtagEntityP::InitAsDefaultInstance() {
}
class HashtagEntityP::_Internal {
 public:
};

HashtagEntityP::HashtagEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HashtagEntityP)
}
HashtagEntityP::HashtagEntityP(const HashtagEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.HashtagEntityP)
}

void HashtagEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashtagEntityP_TweetStatusP_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HashtagEntityP::~HashtagEntityP() {
  // @@protoc_insertion_point(destructor:proto.HashtagEntityP)
  SharedDtor();
}

void HashtagEntityP::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HashtagEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashtagEntityP& HashtagEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashtagEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void HashtagEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HashtagEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* HashtagEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.HashtagEntityP.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashtagEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HashtagEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.HashtagEntityP.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HashtagEntityP)
  return target;
}

size_t HashtagEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HashtagEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashtagEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HashtagEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const HashtagEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashtagEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HashtagEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HashtagEntityP)
    MergeFrom(*source);
  }
}

void HashtagEntityP::MergeFrom(const HashtagEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HashtagEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void HashtagEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HashtagEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashtagEntityP::CopyFrom(const HashtagEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HashtagEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashtagEntityP::IsInitialized() const {
  return true;
}

void HashtagEntityP::InternalSwap(HashtagEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HashtagEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaEntityP::InitAsDefaultInstance() {
  ::proto::_MediaEntityP_default_instance_._instance.get_mutable()->sizes_ = const_cast< ::proto::MediaSizesEntityP*>(
      ::proto::MediaSizesEntityP::internal_default_instance());
  ::proto::_MediaEntityP_default_instance_._instance.get_mutable()->videoinfo_ = const_cast< ::proto::VideoEntityP*>(
      ::proto::VideoEntityP::internal_default_instance());
  ::proto::_MediaEntityP_default_instance_._instance.get_mutable()->additionalmediainfo_ = const_cast< ::proto::AdditionalMediaInfoEntityP*>(
      ::proto::AdditionalMediaInfoEntityP::internal_default_instance());
}
class MediaEntityP::_Internal {
 public:
  static const ::proto::MediaSizesEntityP& sizes(const MediaEntityP* msg);
  static const ::proto::VideoEntityP& videoinfo(const MediaEntityP* msg);
  static const ::proto::AdditionalMediaInfoEntityP& additionalmediainfo(const MediaEntityP* msg);
};

const ::proto::MediaSizesEntityP&
MediaEntityP::_Internal::sizes(const MediaEntityP* msg) {
  return *msg->sizes_;
}
const ::proto::VideoEntityP&
MediaEntityP::_Internal::videoinfo(const MediaEntityP* msg) {
  return *msg->videoinfo_;
}
const ::proto::AdditionalMediaInfoEntityP&
MediaEntityP::_Internal::additionalmediainfo(const MediaEntityP* msg) {
  return *msg->additionalmediainfo_;
}
MediaEntityP::MediaEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MediaEntityP)
}
MediaEntityP::MediaEntityP(const MediaEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  displayurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayurl().empty()) {
    displayurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displayurl_);
  }
  expandedurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expandedurl().empty()) {
    expandedurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expandedurl_);
  }
  mediaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mediaurl().empty()) {
    mediaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mediaurl_);
  }
  mediaurlhttps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mediaurlhttps().empty()) {
    mediaurlhttps_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mediaurlhttps_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  sourcestatusidstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourcestatusidstr().empty()) {
    sourcestatusidstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcestatusidstr_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from._internal_has_sizes()) {
    sizes_ = new ::proto::MediaSizesEntityP(*from.sizes_);
  } else {
    sizes_ = nullptr;
  }
  if (from._internal_has_videoinfo()) {
    videoinfo_ = new ::proto::VideoEntityP(*from.videoinfo_);
  } else {
    videoinfo_ = nullptr;
  }
  if (from._internal_has_additionalmediainfo()) {
    additionalmediainfo_ = new ::proto::AdditionalMediaInfoEntityP(*from.additionalmediainfo_);
  } else {
    additionalmediainfo_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourcestatusid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sourcestatusid_));
  // @@protoc_insertion_point(copy_constructor:proto.MediaEntityP)
}

void MediaEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaEntityP_TweetStatusP_2eproto.base);
  displayurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expandedurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mediaurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mediaurlhttps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcestatusidstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sizes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourcestatusid_) -
      reinterpret_cast<char*>(&sizes_)) + sizeof(sourcestatusid_));
}

MediaEntityP::~MediaEntityP() {
  // @@protoc_insertion_point(destructor:proto.MediaEntityP)
  SharedDtor();
}

void MediaEntityP::SharedDtor() {
  displayurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expandedurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mediaurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mediaurlhttps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcestatusidstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sizes_;
  if (this != internal_default_instance()) delete videoinfo_;
  if (this != internal_default_instance()) delete additionalmediainfo_;
}

void MediaEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaEntityP& MediaEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void MediaEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MediaEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  displayurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expandedurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mediaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mediaurlhttps_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcestatusidstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sizes_ != nullptr) {
    delete sizes_;
  }
  sizes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && videoinfo_ != nullptr) {
    delete videoinfo_;
  }
  videoinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && additionalmediainfo_ != nullptr) {
    delete additionalmediainfo_;
  }
  additionalmediainfo_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourcestatusid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sourcestatusid_));
  _internal_metadata_.Clear();
}

const char* MediaEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string displayURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_displayurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.displayURL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expandedURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_expandedurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.expandedURL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mediaURL = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mediaurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.mediaURL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mediaURLHttps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mediaurlhttps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.mediaURLHttps"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.MediaSizesEntityP sizes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sizes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sourceStatusId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sourcestatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sourceStatusIdStr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sourcestatusidstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.sourceStatusIdStr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MediaEntityP.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.VideoEntityP videoInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_videoinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_additionalmediainfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MediaEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string displayURL = 1;
  if (this->displayurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayurl().data(), static_cast<int>(this->_internal_displayurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.displayURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayurl(), target);
  }

  // string expandedURL = 2;
  if (this->expandedurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expandedurl().data(), static_cast<int>(this->_internal_expandedurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.expandedURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expandedurl(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // repeated int32 indices = 4;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_indices(), byte_size, target);
    }
  }

  // string mediaURL = 5;
  if (this->mediaurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mediaurl().data(), static_cast<int>(this->_internal_mediaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.mediaURL");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mediaurl(), target);
  }

  // string mediaURLHttps = 6;
  if (this->mediaurlhttps().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mediaurlhttps().data(), static_cast<int>(this->_internal_mediaurlhttps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.mediaURLHttps");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mediaurlhttps(), target);
  }

  // .proto.MediaSizesEntityP sizes = 7;
  if (this->has_sizes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sizes(this), target, stream);
  }

  // string type = 8;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_type(), target);
  }

  // int64 sourceStatusId = 9;
  if (this->sourcestatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_sourcestatusid(), target);
  }

  // string sourceStatusIdStr = 10;
  if (this->sourcestatusidstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcestatusidstr().data(), static_cast<int>(this->_internal_sourcestatusidstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.sourceStatusIdStr");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sourcestatusidstr(), target);
  }

  // string url = 11;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_url(), target);
  }

  // .proto.VideoEntityP videoInfo = 12;
  if (this->has_videoinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::videoinfo(this), target, stream);
  }

  // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 13;
  if (this->has_additionalmediainfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::additionalmediainfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MediaEntityP)
  return target;
}

size_t MediaEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MediaEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string displayURL = 1;
  if (this->displayurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayurl());
  }

  // string expandedURL = 2;
  if (this->expandedurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expandedurl());
  }

  // string mediaURL = 5;
  if (this->mediaurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mediaurl());
  }

  // string mediaURLHttps = 6;
  if (this->mediaurlhttps().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mediaurlhttps());
  }

  // string type = 8;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string sourceStatusIdStr = 10;
  if (this->sourcestatusidstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcestatusidstr());
  }

  // string url = 11;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .proto.MediaSizesEntityP sizes = 7;
  if (this->has_sizes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sizes_);
  }

  // .proto.VideoEntityP videoInfo = 12;
  if (this->has_videoinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *videoinfo_);
  }

  // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 13;
  if (this->has_additionalmediainfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additionalmediainfo_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 sourceStatusId = 9;
  if (this->sourcestatusid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sourcestatusid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MediaEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MediaEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MediaEntityP)
    MergeFrom(*source);
  }
}

void MediaEntityP::MergeFrom(const MediaEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MediaEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.displayurl().size() > 0) {

    displayurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displayurl_);
  }
  if (from.expandedurl().size() > 0) {

    expandedurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expandedurl_);
  }
  if (from.mediaurl().size() > 0) {

    mediaurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mediaurl_);
  }
  if (from.mediaurlhttps().size() > 0) {

    mediaurlhttps_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mediaurlhttps_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.sourcestatusidstr().size() > 0) {

    sourcestatusidstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcestatusidstr_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_sizes()) {
    _internal_mutable_sizes()->::proto::MediaSizesEntityP::MergeFrom(from._internal_sizes());
  }
  if (from.has_videoinfo()) {
    _internal_mutable_videoinfo()->::proto::VideoEntityP::MergeFrom(from._internal_videoinfo());
  }
  if (from.has_additionalmediainfo()) {
    _internal_mutable_additionalmediainfo()->::proto::AdditionalMediaInfoEntityP::MergeFrom(from._internal_additionalmediainfo());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sourcestatusid() != 0) {
    _internal_set_sourcestatusid(from._internal_sourcestatusid());
  }
}

void MediaEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MediaEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaEntityP::CopyFrom(const MediaEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MediaEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaEntityP::IsInitialized() const {
  return true;
}

void MediaEntityP::InternalSwap(MediaEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  displayurl_.Swap(&other->displayurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expandedurl_.Swap(&other->expandedurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mediaurl_.Swap(&other->mediaurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mediaurlhttps_.Swap(&other->mediaurlhttps_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourcestatusidstr_.Swap(&other->sourcestatusidstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sizes_, other->sizes_);
  swap(videoinfo_, other->videoinfo_);
  swap(additionalmediainfo_, other->additionalmediainfo_);
  swap(id_, other->id_);
  swap(sourcestatusid_, other->sourcestatusid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserMentionEntityP::InitAsDefaultInstance() {
}
class UserMentionEntityP::_Internal {
 public:
};

UserMentionEntityP::UserMentionEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserMentionEntityP)
}
UserMentionEntityP::UserMentionEntityP(const UserMentionEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idstr().empty()) {
    idstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idstr_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_screenname().empty()) {
    screenname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.screenname_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.UserMentionEntityP)
}

void UserMentionEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserMentionEntityP_TweetStatusP_2eproto.base);
  idstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

UserMentionEntityP::~UserMentionEntityP() {
  // @@protoc_insertion_point(destructor:proto.UserMentionEntityP)
  SharedDtor();
}

void UserMentionEntityP::SharedDtor() {
  idstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserMentionEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserMentionEntityP& UserMentionEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserMentionEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void UserMentionEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserMentionEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  idstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UserMentionEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_idstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.UserMentionEntityP.idStr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.UserMentionEntityP.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string screenName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_screenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.UserMentionEntityP.screenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserMentionEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserMentionEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string idStr = 2;
  if (this->idstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserMentionEntityP.idStr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_idstr(), target);
  }

  // repeated int32 indices = 3;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_indices(), byte_size, target);
    }
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserMentionEntityP.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string screenName = 5;
  if (this->screenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_screenname().data(), static_cast<int>(this->_internal_screenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserMentionEntityP.screenName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_screenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UserMentionEntityP)
  return target;
}

size_t UserMentionEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserMentionEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string idStr = 2;
  if (this->idstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string screenName = 5;
  if (this->screenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_screenname());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMentionEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UserMentionEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMentionEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserMentionEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UserMentionEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UserMentionEntityP)
    MergeFrom(*source);
  }
}

void UserMentionEntityP::MergeFrom(const UserMentionEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserMentionEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.idstr().size() > 0) {

    idstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idstr_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.screenname().size() > 0) {

    screenname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.screenname_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UserMentionEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UserMentionEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMentionEntityP::CopyFrom(const UserMentionEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserMentionEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMentionEntityP::IsInitialized() const {
  return true;
}

void UserMentionEntityP::InternalSwap(UserMentionEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  idstr_.Swap(&other->idstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  screenname_.Swap(&other->screenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserMentionEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SymbolEntityP::InitAsDefaultInstance() {
}
class SymbolEntityP::_Internal {
 public:
};

SymbolEntityP::SymbolEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SymbolEntityP)
}
SymbolEntityP::SymbolEntityP(const SymbolEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SymbolEntityP)
}

void SymbolEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SymbolEntityP_TweetStatusP_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SymbolEntityP::~SymbolEntityP() {
  // @@protoc_insertion_point(destructor:proto.SymbolEntityP)
  SharedDtor();
}

void SymbolEntityP::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SymbolEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SymbolEntityP& SymbolEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SymbolEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void SymbolEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SymbolEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SymbolEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.SymbolEntityP.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SymbolEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SymbolEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SymbolEntityP.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SymbolEntityP)
  return target;
}

size_t SymbolEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SymbolEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SymbolEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SymbolEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SymbolEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SymbolEntityP)
    MergeFrom(*source);
  }
}

void SymbolEntityP::MergeFrom(const SymbolEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SymbolEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void SymbolEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SymbolEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolEntityP::CopyFrom(const SymbolEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SymbolEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolEntityP::IsInitialized() const {
  return true;
}

void SymbolEntityP::InternalSwap(SymbolEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PollEntityP::InitAsDefaultInstance() {
}
class PollEntityP::_Internal {
 public:
};

PollEntityP::PollEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PollEntityP)
}
PollEntityP::PollEntityP(const PollEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      options_(from.options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_enddatetime().empty()) {
    enddatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enddatetime_);
  }
  durationminutes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_durationminutes().empty()) {
    durationminutes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.durationminutes_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.PollEntityP)
}

void PollEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PollEntityP_TweetStatusP_2eproto.base);
  enddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  durationminutes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PollEntityP::~PollEntityP() {
  // @@protoc_insertion_point(destructor:proto.PollEntityP)
  SharedDtor();
}

void PollEntityP::SharedDtor() {
  enddatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  durationminutes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PollEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PollEntityP& PollEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PollEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void PollEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PollEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  enddatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  durationminutes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PollEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.OptionEntityP options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string endDatetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_enddatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PollEntityP.endDatetime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string durationMinutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_durationminutes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PollEntityP.durationMinutes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PollEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PollEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.OptionEntityP options = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_options(i), target, stream);
  }

  // string endDatetime = 2;
  if (this->enddatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enddatetime().data(), static_cast<int>(this->_internal_enddatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PollEntityP.endDatetime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enddatetime(), target);
  }

  // string durationMinutes = 3;
  if (this->durationminutes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_durationminutes().data(), static_cast<int>(this->_internal_durationminutes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PollEntityP.durationMinutes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_durationminutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PollEntityP)
  return target;
}

size_t PollEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PollEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.OptionEntityP options = 1;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string endDatetime = 2;
  if (this->enddatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enddatetime());
  }

  // string durationMinutes = 3;
  if (this->durationminutes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_durationminutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PollEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PollEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const PollEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PollEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PollEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PollEntityP)
    MergeFrom(*source);
  }
}

void PollEntityP::MergeFrom(const PollEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PollEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.enddatetime().size() > 0) {

    enddatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enddatetime_);
  }
  if (from.durationminutes().size() > 0) {

    durationminutes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.durationminutes_);
  }
}

void PollEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PollEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollEntityP::CopyFrom(const PollEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PollEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollEntityP::IsInitialized() const {
  return true;
}

void PollEntityP::InternalSwap(PollEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  enddatetime_.Swap(&other->enddatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  durationminutes_.Swap(&other->durationminutes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PollEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaSizesEntityP::InitAsDefaultInstance() {
  ::proto::_MediaSizesEntityP_default_instance_._instance.get_mutable()->thumb_ = const_cast< ::proto::SizeEntityP*>(
      ::proto::SizeEntityP::internal_default_instance());
  ::proto::_MediaSizesEntityP_default_instance_._instance.get_mutable()->large_ = const_cast< ::proto::SizeEntityP*>(
      ::proto::SizeEntityP::internal_default_instance());
  ::proto::_MediaSizesEntityP_default_instance_._instance.get_mutable()->medium_ = const_cast< ::proto::SizeEntityP*>(
      ::proto::SizeEntityP::internal_default_instance());
  ::proto::_MediaSizesEntityP_default_instance_._instance.get_mutable()->small_ = const_cast< ::proto::SizeEntityP*>(
      ::proto::SizeEntityP::internal_default_instance());
}
class MediaSizesEntityP::_Internal {
 public:
  static const ::proto::SizeEntityP& thumb(const MediaSizesEntityP* msg);
  static const ::proto::SizeEntityP& large(const MediaSizesEntityP* msg);
  static const ::proto::SizeEntityP& medium(const MediaSizesEntityP* msg);
  static const ::proto::SizeEntityP& small(const MediaSizesEntityP* msg);
};

const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::thumb(const MediaSizesEntityP* msg) {
  return *msg->thumb_;
}
const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::large(const MediaSizesEntityP* msg) {
  return *msg->large_;
}
const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::medium(const MediaSizesEntityP* msg) {
  return *msg->medium_;
}
const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::small(const MediaSizesEntityP* msg) {
  return *msg->small_;
}
MediaSizesEntityP::MediaSizesEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MediaSizesEntityP)
}
MediaSizesEntityP::MediaSizesEntityP(const MediaSizesEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_thumb()) {
    thumb_ = new ::proto::SizeEntityP(*from.thumb_);
  } else {
    thumb_ = nullptr;
  }
  if (from._internal_has_large()) {
    large_ = new ::proto::SizeEntityP(*from.large_);
  } else {
    large_ = nullptr;
  }
  if (from._internal_has_medium()) {
    medium_ = new ::proto::SizeEntityP(*from.medium_);
  } else {
    medium_ = nullptr;
  }
  if (from._internal_has_small()) {
    small_ = new ::proto::SizeEntityP(*from.small_);
  } else {
    small_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.MediaSizesEntityP)
}

void MediaSizesEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaSizesEntityP_TweetStatusP_2eproto.base);
  ::memset(&thumb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&small_) -
      reinterpret_cast<char*>(&thumb_)) + sizeof(small_));
}

MediaSizesEntityP::~MediaSizesEntityP() {
  // @@protoc_insertion_point(destructor:proto.MediaSizesEntityP)
  SharedDtor();
}

void MediaSizesEntityP::SharedDtor() {
  if (this != internal_default_instance()) delete thumb_;
  if (this != internal_default_instance()) delete large_;
  if (this != internal_default_instance()) delete medium_;
  if (this != internal_default_instance()) delete small_;
}

void MediaSizesEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaSizesEntityP& MediaSizesEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaSizesEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void MediaSizesEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MediaSizesEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && thumb_ != nullptr) {
    delete thumb_;
  }
  thumb_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && large_ != nullptr) {
    delete large_;
  }
  large_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && medium_ != nullptr) {
    delete medium_;
  }
  medium_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && small_ != nullptr) {
    delete small_;
  }
  small_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MediaSizesEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.SizeEntityP thumb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.SizeEntityP large = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_large(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.SizeEntityP medium = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_medium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.SizeEntityP small = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_small(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaSizesEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MediaSizesEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SizeEntityP thumb = 1;
  if (this->has_thumb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::thumb(this), target, stream);
  }

  // .proto.SizeEntityP large = 2;
  if (this->has_large()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::large(this), target, stream);
  }

  // .proto.SizeEntityP medium = 3;
  if (this->has_medium()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::medium(this), target, stream);
  }

  // .proto.SizeEntityP small = 4;
  if (this->has_small()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::small(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MediaSizesEntityP)
  return target;
}

size_t MediaSizesEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MediaSizesEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.SizeEntityP thumb = 1;
  if (this->has_thumb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thumb_);
  }

  // .proto.SizeEntityP large = 2;
  if (this->has_large()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_);
  }

  // .proto.SizeEntityP medium = 3;
  if (this->has_medium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *medium_);
  }

  // .proto.SizeEntityP small = 4;
  if (this->has_small()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *small_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaSizesEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MediaSizesEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaSizesEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaSizesEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MediaSizesEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MediaSizesEntityP)
    MergeFrom(*source);
  }
}

void MediaSizesEntityP::MergeFrom(const MediaSizesEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MediaSizesEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_thumb()) {
    _internal_mutable_thumb()->::proto::SizeEntityP::MergeFrom(from._internal_thumb());
  }
  if (from.has_large()) {
    _internal_mutable_large()->::proto::SizeEntityP::MergeFrom(from._internal_large());
  }
  if (from.has_medium()) {
    _internal_mutable_medium()->::proto::SizeEntityP::MergeFrom(from._internal_medium());
  }
  if (from.has_small()) {
    _internal_mutable_small()->::proto::SizeEntityP::MergeFrom(from._internal_small());
  }
}

void MediaSizesEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MediaSizesEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaSizesEntityP::CopyFrom(const MediaSizesEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MediaSizesEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSizesEntityP::IsInitialized() const {
  return true;
}

void MediaSizesEntityP::InternalSwap(MediaSizesEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(thumb_, other->thumb_);
  swap(large_, other->large_);
  swap(medium_, other->medium_);
  swap(small_, other->small_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaSizesEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SizeEntityP::InitAsDefaultInstance() {
}
class SizeEntityP::_Internal {
 public:
};

SizeEntityP::SizeEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SizeEntityP)
}
SizeEntityP::SizeEntityP(const SizeEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resize().empty()) {
    resize_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resize_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.SizeEntityP)
}

void SizeEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SizeEntityP_TweetStatusP_2eproto.base);
  resize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

SizeEntityP::~SizeEntityP() {
  // @@protoc_insertion_point(destructor:proto.SizeEntityP)
  SharedDtor();
}

void SizeEntityP::SharedDtor() {
  resize_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SizeEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SizeEntityP& SizeEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SizeEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void SizeEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SizeEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resize_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* SizeEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resize();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.SizeEntityP.resize"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SizeEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SizeEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string resize = 3;
  if (this->resize().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resize().data(), static_cast<int>(this->_internal_resize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SizeEntityP.resize");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SizeEntityP)
  return target;
}

size_t SizeEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SizeEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resize = 3;
  if (this->resize().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resize());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SizeEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SizeEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const SizeEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SizeEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SizeEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SizeEntityP)
    MergeFrom(*source);
  }
}

void SizeEntityP::MergeFrom(const SizeEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SizeEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resize().size() > 0) {

    resize_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resize_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void SizeEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SizeEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeEntityP::CopyFrom(const SizeEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SizeEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeEntityP::IsInitialized() const {
  return true;
}

void SizeEntityP::InternalSwap(SizeEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resize_.Swap(&other->resize_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SizeEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VariantEntityP::InitAsDefaultInstance() {
}
class VariantEntityP::_Internal {
 public:
};

VariantEntityP::VariantEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VariantEntityP)
}
VariantEntityP::VariantEntityP(const VariantEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contenttype().empty()) {
    contenttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contenttype_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  bitrate_ = from.bitrate_;
  // @@protoc_insertion_point(copy_constructor:proto.VariantEntityP)
}

void VariantEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariantEntityP_TweetStatusP_2eproto.base);
  contenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_ = PROTOBUF_LONGLONG(0);
}

VariantEntityP::~VariantEntityP() {
  // @@protoc_insertion_point(destructor:proto.VariantEntityP)
  SharedDtor();
}

void VariantEntityP::SharedDtor() {
  contenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariantEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariantEntityP& VariantEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariantEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void VariantEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VariantEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contenttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bitrate_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* VariantEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 bitrate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.VariantEntityP.contentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.VariantEntityP.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VariantEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bitrate = 1;
  if (this->bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bitrate(), target);
  }

  // string contentType = 2;
  if (this->contenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contenttype().data(), static_cast<int>(this->_internal_contenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.VariantEntityP.contentType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contenttype(), target);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.VariantEntityP.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VariantEntityP)
  return target;
}

size_t VariantEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VariantEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contentType = 2;
  if (this->contenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contenttype());
  }

  // string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int64 bitrate = 1;
  if (this->bitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bitrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VariantEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VariantEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VariantEntityP)
    MergeFrom(*source);
  }
}

void VariantEntityP::MergeFrom(const VariantEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VariantEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contenttype().size() > 0) {

    contenttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contenttype_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
}

void VariantEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VariantEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantEntityP::CopyFrom(const VariantEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VariantEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantEntityP::IsInitialized() const {
  return true;
}

void VariantEntityP::InternalSwap(VariantEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  contenttype_.Swap(&other->contenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bitrate_, other->bitrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoEntityP::InitAsDefaultInstance() {
}
class VideoEntityP::_Internal {
 public:
};

VideoEntityP::VideoEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoEntityP)
}
VideoEntityP::VideoEntityP(const VideoEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aspectratio_(from.aspectratio_),
      variants_(from.variants_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  durationmillis_ = from.durationmillis_;
  // @@protoc_insertion_point(copy_constructor:proto.VideoEntityP)
}

void VideoEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoEntityP_TweetStatusP_2eproto.base);
  durationmillis_ = 0;
}

VideoEntityP::~VideoEntityP() {
  // @@protoc_insertion_point(destructor:proto.VideoEntityP)
  SharedDtor();
}

void VideoEntityP::SharedDtor() {
}

void VideoEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoEntityP& VideoEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void VideoEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspectratio_.Clear();
  variants_.Clear();
  durationmillis_ = 0;
  _internal_metadata_.Clear();
}

const char* VideoEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 aspectRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_aspectratio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_aspectratio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 durationMillis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          durationmillis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.VariantEntityP variants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VideoEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 aspectRatio = 1;
  {
    int byte_size = _aspectratio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_aspectratio(), byte_size, target);
    }
  }

  // int32 durationMillis = 2;
  if (this->durationmillis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_durationmillis(), target);
  }

  // repeated .proto.VariantEntityP variants = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_variants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VideoEntityP)
  return target;
}

size_t VideoEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 aspectRatio = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->aspectratio_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _aspectratio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto.VariantEntityP variants = 3;
  total_size += 1UL * this->_internal_variants_size();
  for (const auto& msg : this->variants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 durationMillis = 2;
  if (this->durationmillis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_durationmillis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VideoEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VideoEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VideoEntityP)
    MergeFrom(*source);
  }
}

void VideoEntityP::MergeFrom(const VideoEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aspectratio_.MergeFrom(from.aspectratio_);
  variants_.MergeFrom(from.variants_);
  if (from.durationmillis() != 0) {
    _internal_set_durationmillis(from._internal_durationmillis());
  }
}

void VideoEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VideoEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoEntityP::CopyFrom(const VideoEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoEntityP::IsInitialized() const {
  return true;
}

void VideoEntityP::InternalSwap(VideoEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aspectratio_.InternalSwap(&other->aspectratio_);
  variants_.InternalSwap(&other->variants_);
  swap(durationmillis_, other->durationmillis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdditionalMediaInfoEntityP::InitAsDefaultInstance() {
}
class AdditionalMediaInfoEntityP::_Internal {
 public:
};

AdditionalMediaInfoEntityP::AdditionalMediaInfoEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AdditionalMediaInfoEntityP)
}
AdditionalMediaInfoEntityP::AdditionalMediaInfoEntityP(const AdditionalMediaInfoEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&embeddable_, &from.embeddable_,
    static_cast<size_t>(reinterpret_cast<char*>(&monetizable_) -
    reinterpret_cast<char*>(&embeddable_)) + sizeof(monetizable_));
  // @@protoc_insertion_point(copy_constructor:proto.AdditionalMediaInfoEntityP)
}

void AdditionalMediaInfoEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&embeddable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monetizable_) -
      reinterpret_cast<char*>(&embeddable_)) + sizeof(monetizable_));
}

AdditionalMediaInfoEntityP::~AdditionalMediaInfoEntityP() {
  // @@protoc_insertion_point(destructor:proto.AdditionalMediaInfoEntityP)
  SharedDtor();
}

void AdditionalMediaInfoEntityP::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdditionalMediaInfoEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalMediaInfoEntityP& AdditionalMediaInfoEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalMediaInfoEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void AdditionalMediaInfoEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AdditionalMediaInfoEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&embeddable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monetizable_) -
      reinterpret_cast<char*>(&embeddable_)) + sizeof(monetizable_));
  _internal_metadata_.Clear();
}

const char* AdditionalMediaInfoEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.AdditionalMediaInfoEntityP.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.AdditionalMediaInfoEntityP.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool embeddable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          embeddable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool monetizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          monetizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalMediaInfoEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AdditionalMediaInfoEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AdditionalMediaInfoEntityP.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AdditionalMediaInfoEntityP.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool embeddable = 3;
  if (this->embeddable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_embeddable(), target);
  }

  // bool monetizable = 4;
  if (this->monetizable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_monetizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AdditionalMediaInfoEntityP)
  return target;
}

size_t AdditionalMediaInfoEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AdditionalMediaInfoEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool embeddable = 3;
  if (this->embeddable() != 0) {
    total_size += 1 + 1;
  }

  // bool monetizable = 4;
  if (this->monetizable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalMediaInfoEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AdditionalMediaInfoEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalMediaInfoEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalMediaInfoEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AdditionalMediaInfoEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AdditionalMediaInfoEntityP)
    MergeFrom(*source);
  }
}

void AdditionalMediaInfoEntityP::MergeFrom(const AdditionalMediaInfoEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AdditionalMediaInfoEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.embeddable() != 0) {
    _internal_set_embeddable(from._internal_embeddable());
  }
  if (from.monetizable() != 0) {
    _internal_set_monetizable(from._internal_monetizable());
  }
}

void AdditionalMediaInfoEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AdditionalMediaInfoEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalMediaInfoEntityP::CopyFrom(const AdditionalMediaInfoEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AdditionalMediaInfoEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalMediaInfoEntityP::IsInitialized() const {
  return true;
}

void AdditionalMediaInfoEntityP::InternalSwap(AdditionalMediaInfoEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(embeddable_, other->embeddable_);
  swap(monetizable_, other->monetizable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalMediaInfoEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionEntityP::InitAsDefaultInstance() {
}
class OptionEntityP::_Internal {
 public:
};

OptionEntityP::OptionEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.OptionEntityP)
}
OptionEntityP::OptionEntityP(const OptionEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:proto.OptionEntityP)
}

void OptionEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptionEntityP_TweetStatusP_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_ = 0;
}

OptionEntityP::~OptionEntityP() {
  // @@protoc_insertion_point(destructor:proto.OptionEntityP)
  SharedDtor();
}

void OptionEntityP::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OptionEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionEntityP& OptionEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void OptionEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.OptionEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_ = 0;
  _internal_metadata_.Clear();
}

const char* OptionEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.OptionEntityP.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.OptionEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position = 1;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_position(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.OptionEntityP.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OptionEntityP)
  return target;
}

size_t OptionEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.OptionEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.OptionEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.OptionEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.OptionEntityP)
    MergeFrom(*source);
  }
}

void OptionEntityP::MergeFrom(const OptionEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.OptionEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void OptionEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.OptionEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionEntityP::CopyFrom(const OptionEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.OptionEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionEntityP::IsInitialized() const {
  return true;
}

void OptionEntityP::InternalSwap(OptionEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchingRulesEntityP::InitAsDefaultInstance() {
}
class MatchingRulesEntityP::_Internal {
 public:
};

MatchingRulesEntityP::MatchingRulesEntityP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MatchingRulesEntityP)
}
MatchingRulesEntityP::MatchingRulesEntityP(const MatchingRulesEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  idstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idstr().empty()) {
    idstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idstr_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.MatchingRulesEntityP)
}

void MatchingRulesEntityP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchingRulesEntityP_TweetStatusP_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

MatchingRulesEntityP::~MatchingRulesEntityP() {
  // @@protoc_insertion_point(destructor:proto.MatchingRulesEntityP)
  SharedDtor();
}

void MatchingRulesEntityP::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchingRulesEntityP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchingRulesEntityP& MatchingRulesEntityP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchingRulesEntityP_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void MatchingRulesEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MatchingRulesEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MatchingRulesEntityP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MatchingRulesEntityP.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idStr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_idstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MatchingRulesEntityP.idStr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchingRulesEntityP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MatchingRulesEntityP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MatchingRulesEntityP.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string idStr = 3;
  if (this->idstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MatchingRulesEntityP.idStr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_idstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MatchingRulesEntityP)
  return target;
}

size_t MatchingRulesEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MatchingRulesEntityP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string idStr = 3;
  if (this->idstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchingRulesEntityP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MatchingRulesEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchingRulesEntityP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchingRulesEntityP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MatchingRulesEntityP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MatchingRulesEntityP)
    MergeFrom(*source);
  }
}

void MatchingRulesEntityP::MergeFrom(const MatchingRulesEntityP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MatchingRulesEntityP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.idstr().size() > 0) {

    idstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idstr_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MatchingRulesEntityP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MatchingRulesEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingRulesEntityP::CopyFrom(const MatchingRulesEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MatchingRulesEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingRulesEntityP::IsInitialized() const {
  return true;
}

void MatchingRulesEntityP::InternalSwap(MatchingRulesEntityP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  idstr_.Swap(&other->idstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchingRulesEntityP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapFieldEntry::InitAsDefaultInstance() {
}
class MapFieldEntry::_Internal {
 public:
};

MapFieldEntry::MapFieldEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MapFieldEntry)
}
MapFieldEntry::MapFieldEntry(const MapFieldEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:proto.MapFieldEntry)
}

void MapFieldEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapFieldEntry_TweetStatusP_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = false;
}

MapFieldEntry::~MapFieldEntry() {
  // @@protoc_insertion_point(destructor:proto.MapFieldEntry)
  SharedDtor();
}

void MapFieldEntry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapFieldEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapFieldEntry& MapFieldEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapFieldEntry_TweetStatusP_2eproto.base);
  return *internal_default_instance();
}


void MapFieldEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapFieldEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = false;
  _internal_metadata_.Clear();
}

const char* MapFieldEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MapFieldEntry.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapFieldEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapFieldEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MapFieldEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapFieldEntry)
  return target;
}

size_t MapFieldEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapFieldEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool value = 2;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapFieldEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MapFieldEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MapFieldEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapFieldEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MapFieldEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MapFieldEntry)
    MergeFrom(*source);
  }
}

void MapFieldEntry::MergeFrom(const MapFieldEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MapFieldEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void MapFieldEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MapFieldEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapFieldEntry::CopyFrom(const MapFieldEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapFieldEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFieldEntry::IsInitialized() const {
  return true;
}

void MapFieldEntry::InternalSwap(MapFieldEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapFieldEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_UserP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_UserP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_UserP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_CoordinatesP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_CoordinatesP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_CoordinatesP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_PlaceP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_PlaceP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_PlaceP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_EntitiesP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_EntitiesP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_EntitiesP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP_ExtendedEntitiesP* Arena::CreateMaybeMessage< ::proto::TweetStatusP_ExtendedEntitiesP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP_ExtendedEntitiesP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP* Arena::CreateMaybeMessage< ::proto::TweetStatusP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::TweetStatusP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::URLEntityP* Arena::CreateMaybeMessage< ::proto::URLEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::URLEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HashtagEntityP* Arena::CreateMaybeMessage< ::proto::HashtagEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::HashtagEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MediaEntityP* Arena::CreateMaybeMessage< ::proto::MediaEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MediaEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::UserMentionEntityP* Arena::CreateMaybeMessage< ::proto::UserMentionEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::UserMentionEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SymbolEntityP* Arena::CreateMaybeMessage< ::proto::SymbolEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::SymbolEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PollEntityP* Arena::CreateMaybeMessage< ::proto::PollEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::PollEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MediaSizesEntityP* Arena::CreateMaybeMessage< ::proto::MediaSizesEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MediaSizesEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SizeEntityP* Arena::CreateMaybeMessage< ::proto::SizeEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::SizeEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VariantEntityP* Arena::CreateMaybeMessage< ::proto::VariantEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::VariantEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VideoEntityP* Arena::CreateMaybeMessage< ::proto::VideoEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::VideoEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AdditionalMediaInfoEntityP* Arena::CreateMaybeMessage< ::proto::AdditionalMediaInfoEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AdditionalMediaInfoEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::OptionEntityP* Arena::CreateMaybeMessage< ::proto::OptionEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::OptionEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MatchingRulesEntityP* Arena::CreateMaybeMessage< ::proto::MatchingRulesEntityP >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MatchingRulesEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MapFieldEntry* Arena::CreateMaybeMessage< ::proto::MapFieldEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MapFieldEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
