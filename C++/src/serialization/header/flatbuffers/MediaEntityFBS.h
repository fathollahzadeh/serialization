// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEDIAENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_MEDIAENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "AdditionalMediaInfoEntityFBS.h"
#include "MediaSizesEntityFBS.h"
#include "SizeEntityFBS.h"
#include "VariantEntityFBS.h"
#include "VideoEntityFBS.h"

namespace tweetstatusflatbuffers {

struct MediaEntityFBS;
struct MediaEntityFBSBuilder;
struct MediaEntityFBST;

struct MediaEntityFBST : public flatbuffers::NativeTable {
  typedef MediaEntityFBS TableType;
  std::string display_url;
  std::string expanded_url;
  int64_t id;
  std::vector<int32_t> indices;
  std::string media_url;
  std::string media_url_https;
  std::unique_ptr<tweetstatusflatbuffers::MediaSizesEntityFBST> sizes;
  std::string type;
  int64_t source_status_id;
  std::string source_status_id_str;
  std::string url;
  std::unique_ptr<tweetstatusflatbuffers::VideoEntityFBST> video_info;
  std::unique_ptr<tweetstatusflatbuffers::AdditionalMediaInfoEntityFBST> additional_media_info;
  MediaEntityFBST()
      : id(0),
        source_status_id(0) {
  }
};

struct MediaEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MediaEntityFBST NativeTableType;
  typedef MediaEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DISPLAY_URL = 4,
    VT_EXPANDED_URL = 6,
    VT_ID = 8,
    VT_INDICES = 10,
    VT_MEDIA_URL = 12,
    VT_MEDIA_URL_HTTPS = 14,
    VT_SIZES = 16,
    VT_TYPE = 18,
    VT_SOURCE_STATUS_ID = 20,
    VT_SOURCE_STATUS_ID_STR = 22,
    VT_URL = 24,
    VT_VIDEO_INFO = 26,
    VT_ADDITIONAL_MEDIA_INFO = 28
  };
  const flatbuffers::String *display_url() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAY_URL);
  }
  flatbuffers::String *mutable_display_url() {
    return GetPointer<flatbuffers::String *>(VT_DISPLAY_URL);
  }
  const flatbuffers::String *expanded_url() const {
    return GetPointer<const flatbuffers::String *>(VT_EXPANDED_URL);
  }
  flatbuffers::String *mutable_expanded_url() {
    return GetPointer<flatbuffers::String *>(VT_EXPANDED_URL);
  }
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  bool mutate_id(int64_t _id) {
    return SetField<int64_t>(VT_ID, _id, 0);
  }
  const flatbuffers::Vector<int32_t> *indices() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  flatbuffers::Vector<int32_t> *mutable_indices() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  const flatbuffers::String *media_url() const {
    return GetPointer<const flatbuffers::String *>(VT_MEDIA_URL);
  }
  flatbuffers::String *mutable_media_url() {
    return GetPointer<flatbuffers::String *>(VT_MEDIA_URL);
  }
  const flatbuffers::String *media_url_https() const {
    return GetPointer<const flatbuffers::String *>(VT_MEDIA_URL_HTTPS);
  }
  flatbuffers::String *mutable_media_url_https() {
    return GetPointer<flatbuffers::String *>(VT_MEDIA_URL_HTTPS);
  }
  const tweetstatusflatbuffers::MediaSizesEntityFBS *sizes() const {
    return GetPointer<const tweetstatusflatbuffers::MediaSizesEntityFBS *>(VT_SIZES);
  }
  tweetstatusflatbuffers::MediaSizesEntityFBS *mutable_sizes() {
    return GetPointer<tweetstatusflatbuffers::MediaSizesEntityFBS *>(VT_SIZES);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  flatbuffers::String *mutable_type() {
    return GetPointer<flatbuffers::String *>(VT_TYPE);
  }
  int64_t source_status_id() const {
    return GetField<int64_t>(VT_SOURCE_STATUS_ID, 0);
  }
  bool mutate_source_status_id(int64_t _source_status_id) {
    return SetField<int64_t>(VT_SOURCE_STATUS_ID, _source_status_id, 0);
  }
  const flatbuffers::String *source_status_id_str() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE_STATUS_ID_STR);
  }
  flatbuffers::String *mutable_source_status_id_str() {
    return GetPointer<flatbuffers::String *>(VT_SOURCE_STATUS_ID_STR);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  const tweetstatusflatbuffers::VideoEntityFBS *video_info() const {
    return GetPointer<const tweetstatusflatbuffers::VideoEntityFBS *>(VT_VIDEO_INFO);
  }
  tweetstatusflatbuffers::VideoEntityFBS *mutable_video_info() {
    return GetPointer<tweetstatusflatbuffers::VideoEntityFBS *>(VT_VIDEO_INFO);
  }
  const tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS *additional_media_info() const {
    return GetPointer<const tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS *>(VT_ADDITIONAL_MEDIA_INFO);
  }
  tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS *mutable_additional_media_info() {
    return GetPointer<tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS *>(VT_ADDITIONAL_MEDIA_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DISPLAY_URL) &&
           verifier.VerifyString(display_url()) &&
           VerifyOffset(verifier, VT_EXPANDED_URL) &&
           verifier.VerifyString(expanded_url()) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyOffset(verifier, VT_MEDIA_URL) &&
           verifier.VerifyString(media_url()) &&
           VerifyOffset(verifier, VT_MEDIA_URL_HTTPS) &&
           verifier.VerifyString(media_url_https()) &&
           VerifyOffset(verifier, VT_SIZES) &&
           verifier.VerifyTable(sizes()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int64_t>(verifier, VT_SOURCE_STATUS_ID) &&
           VerifyOffset(verifier, VT_SOURCE_STATUS_ID_STR) &&
           verifier.VerifyString(source_status_id_str()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_VIDEO_INFO) &&
           verifier.VerifyTable(video_info()) &&
           VerifyOffset(verifier, VT_ADDITIONAL_MEDIA_INFO) &&
           verifier.VerifyTable(additional_media_info()) &&
           verifier.EndTable();
  }
  MediaEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MediaEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MediaEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MediaEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MediaEntityFBSBuilder {
  typedef MediaEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_display_url(flatbuffers::Offset<flatbuffers::String> display_url) {
    fbb_.AddOffset(MediaEntityFBS::VT_DISPLAY_URL, display_url);
  }
  void add_expanded_url(flatbuffers::Offset<flatbuffers::String> expanded_url) {
    fbb_.AddOffset(MediaEntityFBS::VT_EXPANDED_URL, expanded_url);
  }
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(MediaEntityFBS::VT_ID, id, 0);
  }
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<int32_t>> indices) {
    fbb_.AddOffset(MediaEntityFBS::VT_INDICES, indices);
  }
  void add_media_url(flatbuffers::Offset<flatbuffers::String> media_url) {
    fbb_.AddOffset(MediaEntityFBS::VT_MEDIA_URL, media_url);
  }
  void add_media_url_https(flatbuffers::Offset<flatbuffers::String> media_url_https) {
    fbb_.AddOffset(MediaEntityFBS::VT_MEDIA_URL_HTTPS, media_url_https);
  }
  void add_sizes(flatbuffers::Offset<tweetstatusflatbuffers::MediaSizesEntityFBS> sizes) {
    fbb_.AddOffset(MediaEntityFBS::VT_SIZES, sizes);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(MediaEntityFBS::VT_TYPE, type);
  }
  void add_source_status_id(int64_t source_status_id) {
    fbb_.AddElement<int64_t>(MediaEntityFBS::VT_SOURCE_STATUS_ID, source_status_id, 0);
  }
  void add_source_status_id_str(flatbuffers::Offset<flatbuffers::String> source_status_id_str) {
    fbb_.AddOffset(MediaEntityFBS::VT_SOURCE_STATUS_ID_STR, source_status_id_str);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(MediaEntityFBS::VT_URL, url);
  }
  void add_video_info(flatbuffers::Offset<tweetstatusflatbuffers::VideoEntityFBS> video_info) {
    fbb_.AddOffset(MediaEntityFBS::VT_VIDEO_INFO, video_info);
  }
  void add_additional_media_info(flatbuffers::Offset<tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS> additional_media_info) {
    fbb_.AddOffset(MediaEntityFBS::VT_ADDITIONAL_MEDIA_INFO, additional_media_info);
  }
  explicit MediaEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MediaEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MediaEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<MediaEntityFBS> CreateMediaEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> display_url = 0,
    flatbuffers::Offset<flatbuffers::String> expanded_url = 0,
    int64_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> indices = 0,
    flatbuffers::Offset<flatbuffers::String> media_url = 0,
    flatbuffers::Offset<flatbuffers::String> media_url_https = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::MediaSizesEntityFBS> sizes = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    int64_t source_status_id = 0,
    flatbuffers::Offset<flatbuffers::String> source_status_id_str = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::VideoEntityFBS> video_info = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS> additional_media_info = 0) {
  MediaEntityFBSBuilder builder_(_fbb);
  builder_.add_source_status_id(source_status_id);
  builder_.add_id(id);
  builder_.add_additional_media_info(additional_media_info);
  builder_.add_video_info(video_info);
  builder_.add_url(url);
  builder_.add_source_status_id_str(source_status_id_str);
  builder_.add_type(type);
  builder_.add_sizes(sizes);
  builder_.add_media_url_https(media_url_https);
  builder_.add_media_url(media_url);
  builder_.add_indices(indices);
  builder_.add_expanded_url(expanded_url);
  builder_.add_display_url(display_url);
  return builder_.Finish();
}

inline flatbuffers::Offset<MediaEntityFBS> CreateMediaEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *display_url = nullptr,
    const char *expanded_url = nullptr,
    int64_t id = 0,
    const std::vector<int32_t> *indices = nullptr,
    const char *media_url = nullptr,
    const char *media_url_https = nullptr,
    flatbuffers::Offset<tweetstatusflatbuffers::MediaSizesEntityFBS> sizes = 0,
    const char *type = nullptr,
    int64_t source_status_id = 0,
    const char *source_status_id_str = nullptr,
    const char *url = nullptr,
    flatbuffers::Offset<tweetstatusflatbuffers::VideoEntityFBS> video_info = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::AdditionalMediaInfoEntityFBS> additional_media_info = 0) {
  auto display_url__ = display_url ? _fbb.CreateString(display_url) : 0;
  auto expanded_url__ = expanded_url ? _fbb.CreateString(expanded_url) : 0;
  auto indices__ = indices ? _fbb.CreateVector<int32_t>(*indices) : 0;
  auto media_url__ = media_url ? _fbb.CreateString(media_url) : 0;
  auto media_url_https__ = media_url_https ? _fbb.CreateString(media_url_https) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto source_status_id_str__ = source_status_id_str ? _fbb.CreateString(source_status_id_str) : 0;
  auto url__ = url ? _fbb.CreateString(url) : 0;
  return tweetstatusflatbuffers::CreateMediaEntityFBS(
      _fbb,
      display_url__,
      expanded_url__,
      id,
      indices__,
      media_url__,
      media_url_https__,
      sizes,
      type__,
      source_status_id,
      source_status_id_str__,
      url__,
      video_info,
      additional_media_info);
}

flatbuffers::Offset<MediaEntityFBS> CreateMediaEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const MediaEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MediaEntityFBST *MediaEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST> _o = std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>(new MediaEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MediaEntityFBS::UnPackTo(MediaEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = display_url(); if (_e) _o->display_url = _e->str(); }
  { auto _e = expanded_url(); if (_e) _o->expanded_url = _e->str(); }
  { auto _e = id(); _o->id = _e; }
  { auto _e = indices(); if (_e) { _o->indices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->indices[_i] = _e->Get(_i); } } }
  { auto _e = media_url(); if (_e) _o->media_url = _e->str(); }
  { auto _e = media_url_https(); if (_e) _o->media_url_https = _e->str(); }
  { auto _e = sizes(); if (_e) _o->sizes = std::unique_ptr<tweetstatusflatbuffers::MediaSizesEntityFBST>(_e->UnPack(_resolver)); }
  { auto _e = type(); if (_e) _o->type = _e->str(); }
  { auto _e = source_status_id(); _o->source_status_id = _e; }
  { auto _e = source_status_id_str(); if (_e) _o->source_status_id_str = _e->str(); }
  { auto _e = url(); if (_e) _o->url = _e->str(); }
  { auto _e = video_info(); if (_e) _o->video_info = std::unique_ptr<tweetstatusflatbuffers::VideoEntityFBST>(_e->UnPack(_resolver)); }
  { auto _e = additional_media_info(); if (_e) _o->additional_media_info = std::unique_ptr<tweetstatusflatbuffers::AdditionalMediaInfoEntityFBST>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<MediaEntityFBS> MediaEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MediaEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMediaEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MediaEntityFBS> CreateMediaEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const MediaEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MediaEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _display_url = _o->display_url.empty() ? 0 : _fbb.CreateString(_o->display_url);
  auto _expanded_url = _o->expanded_url.empty() ? 0 : _fbb.CreateString(_o->expanded_url);
  auto _id = _o->id;
  auto _indices = _o->indices.size() ? _fbb.CreateVector(_o->indices) : 0;
  auto _media_url = _o->media_url.empty() ? 0 : _fbb.CreateString(_o->media_url);
  auto _media_url_https = _o->media_url_https.empty() ? 0 : _fbb.CreateString(_o->media_url_https);
  auto _sizes = _o->sizes ? CreateMediaSizesEntityFBS(_fbb, _o->sizes.get(), _rehasher) : 0;
  auto _type = _o->type.empty() ? 0 : _fbb.CreateString(_o->type);
  auto _source_status_id = _o->source_status_id;
  auto _source_status_id_str = _o->source_status_id_str.empty() ? 0 : _fbb.CreateString(_o->source_status_id_str);
  auto _url = _o->url.empty() ? 0 : _fbb.CreateString(_o->url);
  auto _video_info = _o->video_info ? CreateVideoEntityFBS(_fbb, _o->video_info.get(), _rehasher) : 0;
  auto _additional_media_info = _o->additional_media_info ? CreateAdditionalMediaInfoEntityFBS(_fbb, _o->additional_media_info.get(), _rehasher) : 0;
  return tweetstatusflatbuffers::CreateMediaEntityFBS(
      _fbb,
      _display_url,
      _expanded_url,
      _id,
      _indices,
      _media_url,
      _media_url_https,
      _sizes,
      _type,
      _source_status_id,
      _source_status_id_str,
      _url,
      _video_info,
      _additional_media_info);
}

inline const tweetstatusflatbuffers::MediaEntityFBS *GetMediaEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::MediaEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::MediaEntityFBS *GetSizePrefixedMediaEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::MediaEntityFBS>(buf);
}

inline MediaEntityFBS *GetMutableMediaEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<MediaEntityFBS>(buf);
}

inline bool VerifyMediaEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::MediaEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedMediaEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::MediaEntityFBS>(nullptr);
}

inline void FinishMediaEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMediaEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST> UnPackMediaEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>(GetMediaEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST> UnPackSizePrefixedMediaEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>(GetSizePrefixedMediaEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_MEDIAENTITY_TWEETSTATUSFLATBUFFERS_H_
