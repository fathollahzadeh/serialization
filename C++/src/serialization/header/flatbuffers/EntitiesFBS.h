// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITIES_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_ENTITIES_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "AdditionalMediaInfoEntityFBS.h"
#include "HashtagEntityFBS.h"
#include "MediaEntityFBS.h"
#include "MediaSizesEntityFBS.h"
#include "OptionEntityFBS.h"
#include "PollEntityFBS.h"
#include "SizeEntityFBS.h"
#include "SymbolEntityFBS.h"
#include "URLEntityFBS.h"
#include "UserMentionEntityFBS.h"
#include "VariantEntityFBS.h"
#include "VideoEntityFBS.h"

namespace tweetstatusflatbuffers {

struct EntitiesFBS;
struct EntitiesFBSBuilder;
struct EntitiesFBST;

struct EntitiesFBST : public flatbuffers::NativeTable {
  typedef EntitiesFBS TableType;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST>> hashtags;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>> media;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST>> urls;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::UserMentionEntityFBST>> user_mentions;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::SymbolEntityFBST>> symbols;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::PollEntityFBST>> polls;
  EntitiesFBST() {
  }
};

struct EntitiesFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntitiesFBST NativeTableType;
  typedef EntitiesFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HASHTAGS = 4,
    VT_MEDIA = 6,
    VT_URLS = 8,
    VT_USER_MENTIONS = 10,
    VT_SYMBOLS = 12,
    VT_POLLS = 14
  };
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>> *hashtags() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>> *>(VT_HASHTAGS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>> *mutable_hashtags() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>> *>(VT_HASHTAGS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *media() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *>(VT_MEDIA);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *mutable_media() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *>(VT_MEDIA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *urls() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *>(VT_URLS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *mutable_urls() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *>(VT_URLS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>> *user_mentions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>> *>(VT_USER_MENTIONS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>> *mutable_user_mentions() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>> *>(VT_USER_MENTIONS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>> *symbols() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>> *>(VT_SYMBOLS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>> *mutable_symbols() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>> *>(VT_SYMBOLS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>> *polls() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>> *>(VT_POLLS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>> *mutable_polls() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>> *>(VT_POLLS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HASHTAGS) &&
           verifier.VerifyVector(hashtags()) &&
           verifier.VerifyVectorOfTables(hashtags()) &&
           VerifyOffset(verifier, VT_MEDIA) &&
           verifier.VerifyVector(media()) &&
           verifier.VerifyVectorOfTables(media()) &&
           VerifyOffset(verifier, VT_URLS) &&
           verifier.VerifyVector(urls()) &&
           verifier.VerifyVectorOfTables(urls()) &&
           VerifyOffset(verifier, VT_USER_MENTIONS) &&
           verifier.VerifyVector(user_mentions()) &&
           verifier.VerifyVectorOfTables(user_mentions()) &&
           VerifyOffset(verifier, VT_SYMBOLS) &&
           verifier.VerifyVector(symbols()) &&
           verifier.VerifyVectorOfTables(symbols()) &&
           VerifyOffset(verifier, VT_POLLS) &&
           verifier.VerifyVector(polls()) &&
           verifier.VerifyVectorOfTables(polls()) &&
           verifier.EndTable();
  }
  EntitiesFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(EntitiesFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<EntitiesFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const EntitiesFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct EntitiesFBSBuilder {
  typedef EntitiesFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hashtags(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>>> hashtags) {
    fbb_.AddOffset(EntitiesFBS::VT_HASHTAGS, hashtags);
  }
  void add_media(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>>> media) {
    fbb_.AddOffset(EntitiesFBS::VT_MEDIA, media);
  }
  void add_urls(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>>> urls) {
    fbb_.AddOffset(EntitiesFBS::VT_URLS, urls);
  }
  void add_user_mentions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>>> user_mentions) {
    fbb_.AddOffset(EntitiesFBS::VT_USER_MENTIONS, user_mentions);
  }
  void add_symbols(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>>> symbols) {
    fbb_.AddOffset(EntitiesFBS::VT_SYMBOLS, symbols);
  }
  void add_polls(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>>> polls) {
    fbb_.AddOffset(EntitiesFBS::VT_POLLS, polls);
  }
  explicit EntitiesFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EntitiesFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntitiesFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntitiesFBS> CreateEntitiesFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>>> hashtags = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>>> media = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>>> urls = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>>> user_mentions = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>>> symbols = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>>> polls = 0) {
  EntitiesFBSBuilder builder_(_fbb);
  builder_.add_polls(polls);
  builder_.add_symbols(symbols);
  builder_.add_user_mentions(user_mentions);
  builder_.add_urls(urls);
  builder_.add_media(media);
  builder_.add_hashtags(hashtags);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntitiesFBS> CreateEntitiesFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>> *hashtags = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *media = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *urls = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>> *user_mentions = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>> *symbols = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>> *polls = nullptr) {
  auto hashtags__ = hashtags ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>>(*hashtags) : 0;
  auto media__ = media ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>>(*media) : 0;
  auto urls__ = urls ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>>(*urls) : 0;
  auto user_mentions__ = user_mentions ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>>(*user_mentions) : 0;
  auto symbols__ = symbols ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>>(*symbols) : 0;
  auto polls__ = polls ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>>(*polls) : 0;
  return tweetstatusflatbuffers::CreateEntitiesFBS(
      _fbb,
      hashtags__,
      media__,
      urls__,
      user_mentions__,
      symbols__,
      polls__);
}

flatbuffers::Offset<EntitiesFBS> CreateEntitiesFBS(flatbuffers::FlatBufferBuilder &_fbb, const EntitiesFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline EntitiesFBST *EntitiesFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST> _o = std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST>(new EntitiesFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void EntitiesFBS::UnPackTo(EntitiesFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = hashtags(); if (_e) { _o->hashtags.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->hashtags[_i] = std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = media(); if (_e) { _o->media.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->media[_i] = std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = urls(); if (_e) { _o->urls.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->urls[_i] = std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = user_mentions(); if (_e) { _o->user_mentions.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->user_mentions[_i] = std::unique_ptr<tweetstatusflatbuffers::UserMentionEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = symbols(); if (_e) { _o->symbols.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->symbols[_i] = std::unique_ptr<tweetstatusflatbuffers::SymbolEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = polls(); if (_e) { _o->polls.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->polls[_i] = std::unique_ptr<tweetstatusflatbuffers::PollEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<EntitiesFBS> EntitiesFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const EntitiesFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEntitiesFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<EntitiesFBS> CreateEntitiesFBS(flatbuffers::FlatBufferBuilder &_fbb, const EntitiesFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const EntitiesFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _hashtags = _o->hashtags.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS>> (_o->hashtags.size(), [](size_t i, _VectorArgs *__va) { return CreateHashtagEntityFBS(*__va->__fbb, __va->__o->hashtags[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _media = _o->media.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> (_o->media.size(), [](size_t i, _VectorArgs *__va) { return CreateMediaEntityFBS(*__va->__fbb, __va->__o->media[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _urls = _o->urls.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> (_o->urls.size(), [](size_t i, _VectorArgs *__va) { return CreateURLEntityFBS(*__va->__fbb, __va->__o->urls[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _user_mentions = _o->user_mentions.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::UserMentionEntityFBS>> (_o->user_mentions.size(), [](size_t i, _VectorArgs *__va) { return CreateUserMentionEntityFBS(*__va->__fbb, __va->__o->user_mentions[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _symbols = _o->symbols.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::SymbolEntityFBS>> (_o->symbols.size(), [](size_t i, _VectorArgs *__va) { return CreateSymbolEntityFBS(*__va->__fbb, __va->__o->symbols[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _polls = _o->polls.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS>> (_o->polls.size(), [](size_t i, _VectorArgs *__va) { return CreatePollEntityFBS(*__va->__fbb, __va->__o->polls[i].get(), __va->__rehasher); }, &_va ) : 0;
  return tweetstatusflatbuffers::CreateEntitiesFBS(
      _fbb,
      _hashtags,
      _media,
      _urls,
      _user_mentions,
      _symbols,
      _polls);
}

inline const tweetstatusflatbuffers::EntitiesFBS *GetEntitiesFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::EntitiesFBS>(buf);
}

inline const tweetstatusflatbuffers::EntitiesFBS *GetSizePrefixedEntitiesFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::EntitiesFBS>(buf);
}

inline EntitiesFBS *GetMutableEntitiesFBS(void *buf) {
  return flatbuffers::GetMutableRoot<EntitiesFBS>(buf);
}

inline bool VerifyEntitiesFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::EntitiesFBS>(nullptr);
}

inline bool VerifySizePrefixedEntitiesFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::EntitiesFBS>(nullptr);
}

inline void FinishEntitiesFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntitiesFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST> UnPackEntitiesFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST>(GetEntitiesFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST> UnPackSizePrefixedEntitiesFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST>(GetSizePrefixedEntitiesFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_ENTITIES_TWEETSTATUSFLATBUFFERS_H_
