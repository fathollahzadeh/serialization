// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HASHTAGENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_HASHTAGENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace tweetstatusflatbuffers {

struct HashtagEntityFBS;
struct HashtagEntityFBSBuilder;
struct HashtagEntityFBST;

struct HashtagEntityFBST : public flatbuffers::NativeTable {
  typedef HashtagEntityFBS TableType;
  std::vector<int32_t> indices;
  std::string text;
  HashtagEntityFBST() {
  }
};

struct HashtagEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HashtagEntityFBST NativeTableType;
  typedef HashtagEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES = 4,
    VT_TEXT = 6
  };
  const flatbuffers::Vector<int32_t> *indices() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  flatbuffers::Vector<int32_t> *mutable_indices() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  flatbuffers::String *mutable_text() {
    return GetPointer<flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
  HashtagEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HashtagEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<HashtagEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HashtagEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HashtagEntityFBSBuilder {
  typedef HashtagEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<int32_t>> indices) {
    fbb_.AddOffset(HashtagEntityFBS::VT_INDICES, indices);
  }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(HashtagEntityFBS::VT_TEXT, text);
  }
  explicit HashtagEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HashtagEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HashtagEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<HashtagEntityFBS> CreateHashtagEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> indices = 0,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  HashtagEntityFBSBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_indices(indices);
  return builder_.Finish();
}

inline flatbuffers::Offset<HashtagEntityFBS> CreateHashtagEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *indices = nullptr,
    const char *text = nullptr) {
  auto indices__ = indices ? _fbb.CreateVector<int32_t>(*indices) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return tweetstatusflatbuffers::CreateHashtagEntityFBS(
      _fbb,
      indices__,
      text__);
}

flatbuffers::Offset<HashtagEntityFBS> CreateHashtagEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const HashtagEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HashtagEntityFBST *HashtagEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST> _o = std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST>(new HashtagEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HashtagEntityFBS::UnPackTo(HashtagEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = indices(); if (_e) { _o->indices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->indices[_i] = _e->Get(_i); } } }
  { auto _e = text(); if (_e) _o->text = _e->str(); }
}

inline flatbuffers::Offset<HashtagEntityFBS> HashtagEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HashtagEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHashtagEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<HashtagEntityFBS> CreateHashtagEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const HashtagEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HashtagEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _indices = _o->indices.size() ? _fbb.CreateVector(_o->indices) : 0;
  auto _text = _o->text.empty() ? 0 : _fbb.CreateString(_o->text);
  return tweetstatusflatbuffers::CreateHashtagEntityFBS(
      _fbb,
      _indices,
      _text);
}

inline const tweetstatusflatbuffers::HashtagEntityFBS *GetHashtagEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::HashtagEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::HashtagEntityFBS *GetSizePrefixedHashtagEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::HashtagEntityFBS>(buf);
}

inline HashtagEntityFBS *GetMutableHashtagEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<HashtagEntityFBS>(buf);
}

inline bool VerifyHashtagEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::HashtagEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedHashtagEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::HashtagEntityFBS>(nullptr);
}

inline void FinishHashtagEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHashtagEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::HashtagEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST> UnPackHashtagEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST>(GetHashtagEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST> UnPackSizePrefixedHashtagEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::HashtagEntityFBST>(GetSizePrefixedHashtagEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_HASHTAGENTITY_TWEETSTATUSFLATBUFFERS_H_
