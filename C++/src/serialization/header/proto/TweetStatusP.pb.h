// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TweetStatusP.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TweetStatusP_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TweetStatusP_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TweetStatusP_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TweetStatusP_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TweetStatusP_2eproto;
namespace proto {
class AdditionalMediaInfoEntityP;
class AdditionalMediaInfoEntityPDefaultTypeInternal;
extern AdditionalMediaInfoEntityPDefaultTypeInternal _AdditionalMediaInfoEntityP_default_instance_;
class HashtagEntityP;
class HashtagEntityPDefaultTypeInternal;
extern HashtagEntityPDefaultTypeInternal _HashtagEntityP_default_instance_;
class MapFieldEntry;
class MapFieldEntryDefaultTypeInternal;
extern MapFieldEntryDefaultTypeInternal _MapFieldEntry_default_instance_;
class MatchingRulesEntityP;
class MatchingRulesEntityPDefaultTypeInternal;
extern MatchingRulesEntityPDefaultTypeInternal _MatchingRulesEntityP_default_instance_;
class MediaEntityP;
class MediaEntityPDefaultTypeInternal;
extern MediaEntityPDefaultTypeInternal _MediaEntityP_default_instance_;
class MediaSizesEntityP;
class MediaSizesEntityPDefaultTypeInternal;
extern MediaSizesEntityPDefaultTypeInternal _MediaSizesEntityP_default_instance_;
class OptionEntityP;
class OptionEntityPDefaultTypeInternal;
extern OptionEntityPDefaultTypeInternal _OptionEntityP_default_instance_;
class PollEntityP;
class PollEntityPDefaultTypeInternal;
extern PollEntityPDefaultTypeInternal _PollEntityP_default_instance_;
class SizeEntityP;
class SizeEntityPDefaultTypeInternal;
extern SizeEntityPDefaultTypeInternal _SizeEntityP_default_instance_;
class SymbolEntityP;
class SymbolEntityPDefaultTypeInternal;
extern SymbolEntityPDefaultTypeInternal _SymbolEntityP_default_instance_;
class TweetStatusP;
class TweetStatusPDefaultTypeInternal;
extern TweetStatusPDefaultTypeInternal _TweetStatusP_default_instance_;
class TweetStatusP_CoordinatesP;
class TweetStatusP_CoordinatesPDefaultTypeInternal;
extern TweetStatusP_CoordinatesPDefaultTypeInternal _TweetStatusP_CoordinatesP_default_instance_;
class TweetStatusP_EntitiesP;
class TweetStatusP_EntitiesPDefaultTypeInternal;
extern TweetStatusP_EntitiesPDefaultTypeInternal _TweetStatusP_EntitiesP_default_instance_;
class TweetStatusP_ExtendedEntitiesP;
class TweetStatusP_ExtendedEntitiesPDefaultTypeInternal;
extern TweetStatusP_ExtendedEntitiesPDefaultTypeInternal _TweetStatusP_ExtendedEntitiesP_default_instance_;
class TweetStatusP_PlaceP;
class TweetStatusP_PlacePDefaultTypeInternal;
extern TweetStatusP_PlacePDefaultTypeInternal _TweetStatusP_PlaceP_default_instance_;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP;
class TweetStatusP_PlaceP_BoundingBoxCoordinatePDefaultTypeInternal;
extern TweetStatusP_PlaceP_BoundingBoxCoordinatePDefaultTypeInternal _TweetStatusP_PlaceP_BoundingBoxCoordinateP_default_instance_;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal;
extern TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal _TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP;
class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal;
extern TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal _TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_;
class TweetStatusP_UserP;
class TweetStatusP_UserPDefaultTypeInternal;
extern TweetStatusP_UserPDefaultTypeInternal _TweetStatusP_UserP_default_instance_;
class URLEntityP;
class URLEntityPDefaultTypeInternal;
extern URLEntityPDefaultTypeInternal _URLEntityP_default_instance_;
class UserMentionEntityP;
class UserMentionEntityPDefaultTypeInternal;
extern UserMentionEntityPDefaultTypeInternal _UserMentionEntityP_default_instance_;
class VariantEntityP;
class VariantEntityPDefaultTypeInternal;
extern VariantEntityPDefaultTypeInternal _VariantEntityP_default_instance_;
class VideoEntityP;
class VideoEntityPDefaultTypeInternal;
extern VideoEntityPDefaultTypeInternal _VideoEntityP_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AdditionalMediaInfoEntityP* Arena::CreateMaybeMessage<::proto::AdditionalMediaInfoEntityP>(Arena*);
template<> ::proto::HashtagEntityP* Arena::CreateMaybeMessage<::proto::HashtagEntityP>(Arena*);
template<> ::proto::MapFieldEntry* Arena::CreateMaybeMessage<::proto::MapFieldEntry>(Arena*);
template<> ::proto::MatchingRulesEntityP* Arena::CreateMaybeMessage<::proto::MatchingRulesEntityP>(Arena*);
template<> ::proto::MediaEntityP* Arena::CreateMaybeMessage<::proto::MediaEntityP>(Arena*);
template<> ::proto::MediaSizesEntityP* Arena::CreateMaybeMessage<::proto::MediaSizesEntityP>(Arena*);
template<> ::proto::OptionEntityP* Arena::CreateMaybeMessage<::proto::OptionEntityP>(Arena*);
template<> ::proto::PollEntityP* Arena::CreateMaybeMessage<::proto::PollEntityP>(Arena*);
template<> ::proto::SizeEntityP* Arena::CreateMaybeMessage<::proto::SizeEntityP>(Arena*);
template<> ::proto::SymbolEntityP* Arena::CreateMaybeMessage<::proto::SymbolEntityP>(Arena*);
template<> ::proto::TweetStatusP* Arena::CreateMaybeMessage<::proto::TweetStatusP>(Arena*);
template<> ::proto::TweetStatusP_CoordinatesP* Arena::CreateMaybeMessage<::proto::TweetStatusP_CoordinatesP>(Arena*);
template<> ::proto::TweetStatusP_EntitiesP* Arena::CreateMaybeMessage<::proto::TweetStatusP_EntitiesP>(Arena*);
template<> ::proto::TweetStatusP_ExtendedEntitiesP* Arena::CreateMaybeMessage<::proto::TweetStatusP_ExtendedEntitiesP>(Arena*);
template<> ::proto::TweetStatusP_PlaceP* Arena::CreateMaybeMessage<::proto::TweetStatusP_PlaceP>(Arena*);
template<> ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* Arena::CreateMaybeMessage<::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP>(Arena*);
template<> ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* Arena::CreateMaybeMessage<::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP>(Arena*);
template<> ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* Arena::CreateMaybeMessage<::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP>(Arena*);
template<> ::proto::TweetStatusP_UserP* Arena::CreateMaybeMessage<::proto::TweetStatusP_UserP>(Arena*);
template<> ::proto::URLEntityP* Arena::CreateMaybeMessage<::proto::URLEntityP>(Arena*);
template<> ::proto::UserMentionEntityP* Arena::CreateMaybeMessage<::proto::UserMentionEntityP>(Arena*);
template<> ::proto::VariantEntityP* Arena::CreateMaybeMessage<::proto::VariantEntityP>(Arena*);
template<> ::proto::VideoEntityP* Arena::CreateMaybeMessage<::proto::VideoEntityP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class TweetStatusP_UserP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.UserP) */ {
 public:
  TweetStatusP_UserP();
  virtual ~TweetStatusP_UserP();

  TweetStatusP_UserP(const TweetStatusP_UserP& from);
  TweetStatusP_UserP(TweetStatusP_UserP&& from) noexcept
    : TweetStatusP_UserP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_UserP& operator=(const TweetStatusP_UserP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_UserP& operator=(TweetStatusP_UserP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_UserP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_UserP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_UserP*>(
               &_TweetStatusP_UserP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TweetStatusP_UserP& a, TweetStatusP_UserP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_UserP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_UserP* New() const final {
    return CreateMaybeMessage<TweetStatusP_UserP>(nullptr);
  }

  TweetStatusP_UserP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_UserP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_UserP& from);
  void MergeFrom(const TweetStatusP_UserP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_UserP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.UserP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithheldInCountriesFieldNumber = 18,
    kNameFieldNumber = 2,
    kScreenNameFieldNumber = 3,
    kLocationFieldNumber = 4,
    kUrlFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kCreatedAtFieldNumber = 14,
    kProfileBannerImageUrlFieldNumber = 15,
    kProfileImageUrlHttpsFieldNumber = 16,
    kWithheldScopeFieldNumber = 19,
    kLangFieldNumber = 22,
    kProfileBackgroundColorFieldNumber = 24,
    kProfileBackgroundImageUrlFieldNumber = 25,
    kProfileBackgroundImageUrlHttpsFieldNumber = 26,
    kProfileImageUrlFieldNumber = 28,
    kProfileLinkColorFieldNumber = 29,
    kProfileSidebarBorderColorFieldNumber = 30,
    kProfileSidebarFillColorFieldNumber = 31,
    kProfileTextColorFieldNumber = 32,
    kTimeZoneFieldNumber = 36,
    kDescriptionURLEntitiesFieldNumber = 20,
    kIdFieldNumber = 1,
    kFollowersCountFieldNumber = 9,
    kFriendsCountFieldNumber = 10,
    kListedCountFieldNumber = 11,
    kFavouritesCountFieldNumber = 12,
    kStatusesCountFieldNumber = 13,
    kIsProtectedFieldNumber = 7,
    kIsVerifiedFieldNumber = 8,
    kIsDefaultProfileFieldNumber = 17,
    kIsGeoEnabledFieldNumber = 21,
    kIsContributorsEnabledFieldNumber = 23,
    kProfileBackgroundTiledFieldNumber = 27,
    kProfileUseBackgroundImageFieldNumber = 33,
    kIsDefaultProfileImageFieldNumber = 34,
    kUtcOffsetFieldNumber = 35,
    kTranslatorFieldNumber = 37,
    kIsFollowRequestSentFieldNumber = 38,
    kShowAllInlineMediaFieldNumber = 39,
  };
  // repeated string withheldInCountries = 18;
  int withheldincountries_size() const;
  private:
  int _internal_withheldincountries_size() const;
  public:
  void clear_withheldincountries();
  const std::string& withheldincountries(int index) const;
  std::string* mutable_withheldincountries(int index);
  void set_withheldincountries(int index, const std::string& value);
  void set_withheldincountries(int index, std::string&& value);
  void set_withheldincountries(int index, const char* value);
  void set_withheldincountries(int index, const char* value, size_t size);
  std::string* add_withheldincountries();
  void add_withheldincountries(const std::string& value);
  void add_withheldincountries(std::string&& value);
  void add_withheldincountries(const char* value);
  void add_withheldincountries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& withheldincountries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_withheldincountries();
  private:
  const std::string& _internal_withheldincountries(int index) const;
  std::string* _internal_add_withheldincountries();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string screenName = 3;
  void clear_screenname();
  const std::string& screenname() const;
  void set_screenname(const std::string& value);
  void set_screenname(std::string&& value);
  void set_screenname(const char* value);
  void set_screenname(const char* value, size_t size);
  std::string* mutable_screenname();
  std::string* release_screenname();
  void set_allocated_screenname(std::string* screenname);
  private:
  const std::string& _internal_screenname() const;
  void _internal_set_screenname(const std::string& value);
  std::string* _internal_mutable_screenname();
  public:

  // string location = 4;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string url = 5;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string createdAt = 14;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string profileBannerImageUrl = 15;
  void clear_profilebannerimageurl();
  const std::string& profilebannerimageurl() const;
  void set_profilebannerimageurl(const std::string& value);
  void set_profilebannerimageurl(std::string&& value);
  void set_profilebannerimageurl(const char* value);
  void set_profilebannerimageurl(const char* value, size_t size);
  std::string* mutable_profilebannerimageurl();
  std::string* release_profilebannerimageurl();
  void set_allocated_profilebannerimageurl(std::string* profilebannerimageurl);
  private:
  const std::string& _internal_profilebannerimageurl() const;
  void _internal_set_profilebannerimageurl(const std::string& value);
  std::string* _internal_mutable_profilebannerimageurl();
  public:

  // string profileImageUrlHttps = 16;
  void clear_profileimageurlhttps();
  const std::string& profileimageurlhttps() const;
  void set_profileimageurlhttps(const std::string& value);
  void set_profileimageurlhttps(std::string&& value);
  void set_profileimageurlhttps(const char* value);
  void set_profileimageurlhttps(const char* value, size_t size);
  std::string* mutable_profileimageurlhttps();
  std::string* release_profileimageurlhttps();
  void set_allocated_profileimageurlhttps(std::string* profileimageurlhttps);
  private:
  const std::string& _internal_profileimageurlhttps() const;
  void _internal_set_profileimageurlhttps(const std::string& value);
  std::string* _internal_mutable_profileimageurlhttps();
  public:

  // string withheldScope = 19;
  void clear_withheldscope();
  const std::string& withheldscope() const;
  void set_withheldscope(const std::string& value);
  void set_withheldscope(std::string&& value);
  void set_withheldscope(const char* value);
  void set_withheldscope(const char* value, size_t size);
  std::string* mutable_withheldscope();
  std::string* release_withheldscope();
  void set_allocated_withheldscope(std::string* withheldscope);
  private:
  const std::string& _internal_withheldscope() const;
  void _internal_set_withheldscope(const std::string& value);
  std::string* _internal_mutable_withheldscope();
  public:

  // string lang = 22;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string profileBackgroundColor = 24;
  void clear_profilebackgroundcolor();
  const std::string& profilebackgroundcolor() const;
  void set_profilebackgroundcolor(const std::string& value);
  void set_profilebackgroundcolor(std::string&& value);
  void set_profilebackgroundcolor(const char* value);
  void set_profilebackgroundcolor(const char* value, size_t size);
  std::string* mutable_profilebackgroundcolor();
  std::string* release_profilebackgroundcolor();
  void set_allocated_profilebackgroundcolor(std::string* profilebackgroundcolor);
  private:
  const std::string& _internal_profilebackgroundcolor() const;
  void _internal_set_profilebackgroundcolor(const std::string& value);
  std::string* _internal_mutable_profilebackgroundcolor();
  public:

  // string profileBackgroundImageUrl = 25;
  void clear_profilebackgroundimageurl();
  const std::string& profilebackgroundimageurl() const;
  void set_profilebackgroundimageurl(const std::string& value);
  void set_profilebackgroundimageurl(std::string&& value);
  void set_profilebackgroundimageurl(const char* value);
  void set_profilebackgroundimageurl(const char* value, size_t size);
  std::string* mutable_profilebackgroundimageurl();
  std::string* release_profilebackgroundimageurl();
  void set_allocated_profilebackgroundimageurl(std::string* profilebackgroundimageurl);
  private:
  const std::string& _internal_profilebackgroundimageurl() const;
  void _internal_set_profilebackgroundimageurl(const std::string& value);
  std::string* _internal_mutable_profilebackgroundimageurl();
  public:

  // string profileBackgroundImageUrlHttps = 26;
  void clear_profilebackgroundimageurlhttps();
  const std::string& profilebackgroundimageurlhttps() const;
  void set_profilebackgroundimageurlhttps(const std::string& value);
  void set_profilebackgroundimageurlhttps(std::string&& value);
  void set_profilebackgroundimageurlhttps(const char* value);
  void set_profilebackgroundimageurlhttps(const char* value, size_t size);
  std::string* mutable_profilebackgroundimageurlhttps();
  std::string* release_profilebackgroundimageurlhttps();
  void set_allocated_profilebackgroundimageurlhttps(std::string* profilebackgroundimageurlhttps);
  private:
  const std::string& _internal_profilebackgroundimageurlhttps() const;
  void _internal_set_profilebackgroundimageurlhttps(const std::string& value);
  std::string* _internal_mutable_profilebackgroundimageurlhttps();
  public:

  // string profileImageUrl = 28;
  void clear_profileimageurl();
  const std::string& profileimageurl() const;
  void set_profileimageurl(const std::string& value);
  void set_profileimageurl(std::string&& value);
  void set_profileimageurl(const char* value);
  void set_profileimageurl(const char* value, size_t size);
  std::string* mutable_profileimageurl();
  std::string* release_profileimageurl();
  void set_allocated_profileimageurl(std::string* profileimageurl);
  private:
  const std::string& _internal_profileimageurl() const;
  void _internal_set_profileimageurl(const std::string& value);
  std::string* _internal_mutable_profileimageurl();
  public:

  // string profileLinkColor = 29;
  void clear_profilelinkcolor();
  const std::string& profilelinkcolor() const;
  void set_profilelinkcolor(const std::string& value);
  void set_profilelinkcolor(std::string&& value);
  void set_profilelinkcolor(const char* value);
  void set_profilelinkcolor(const char* value, size_t size);
  std::string* mutable_profilelinkcolor();
  std::string* release_profilelinkcolor();
  void set_allocated_profilelinkcolor(std::string* profilelinkcolor);
  private:
  const std::string& _internal_profilelinkcolor() const;
  void _internal_set_profilelinkcolor(const std::string& value);
  std::string* _internal_mutable_profilelinkcolor();
  public:

  // string profileSidebarBorderColor = 30;
  void clear_profilesidebarbordercolor();
  const std::string& profilesidebarbordercolor() const;
  void set_profilesidebarbordercolor(const std::string& value);
  void set_profilesidebarbordercolor(std::string&& value);
  void set_profilesidebarbordercolor(const char* value);
  void set_profilesidebarbordercolor(const char* value, size_t size);
  std::string* mutable_profilesidebarbordercolor();
  std::string* release_profilesidebarbordercolor();
  void set_allocated_profilesidebarbordercolor(std::string* profilesidebarbordercolor);
  private:
  const std::string& _internal_profilesidebarbordercolor() const;
  void _internal_set_profilesidebarbordercolor(const std::string& value);
  std::string* _internal_mutable_profilesidebarbordercolor();
  public:

  // string profileSidebarFillColor = 31;
  void clear_profilesidebarfillcolor();
  const std::string& profilesidebarfillcolor() const;
  void set_profilesidebarfillcolor(const std::string& value);
  void set_profilesidebarfillcolor(std::string&& value);
  void set_profilesidebarfillcolor(const char* value);
  void set_profilesidebarfillcolor(const char* value, size_t size);
  std::string* mutable_profilesidebarfillcolor();
  std::string* release_profilesidebarfillcolor();
  void set_allocated_profilesidebarfillcolor(std::string* profilesidebarfillcolor);
  private:
  const std::string& _internal_profilesidebarfillcolor() const;
  void _internal_set_profilesidebarfillcolor(const std::string& value);
  std::string* _internal_mutable_profilesidebarfillcolor();
  public:

  // string profileTextColor = 32;
  void clear_profiletextcolor();
  const std::string& profiletextcolor() const;
  void set_profiletextcolor(const std::string& value);
  void set_profiletextcolor(std::string&& value);
  void set_profiletextcolor(const char* value);
  void set_profiletextcolor(const char* value, size_t size);
  std::string* mutable_profiletextcolor();
  std::string* release_profiletextcolor();
  void set_allocated_profiletextcolor(std::string* profiletextcolor);
  private:
  const std::string& _internal_profiletextcolor() const;
  void _internal_set_profiletextcolor(const std::string& value);
  std::string* _internal_mutable_profiletextcolor();
  public:

  // string timeZone = 36;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // .proto.URLEntityP descriptionURLEntities = 20;
  bool has_descriptionurlentities() const;
  private:
  bool _internal_has_descriptionurlentities() const;
  public:
  void clear_descriptionurlentities();
  const ::proto::URLEntityP& descriptionurlentities() const;
  ::proto::URLEntityP* release_descriptionurlentities();
  ::proto::URLEntityP* mutable_descriptionurlentities();
  void set_allocated_descriptionurlentities(::proto::URLEntityP* descriptionurlentities);
  private:
  const ::proto::URLEntityP& _internal_descriptionurlentities() const;
  ::proto::URLEntityP* _internal_mutable_descriptionurlentities();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 followersCount = 9;
  void clear_followerscount();
  ::PROTOBUF_NAMESPACE_ID::int32 followerscount() const;
  void set_followerscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_followerscount() const;
  void _internal_set_followerscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 friendsCount = 10;
  void clear_friendscount();
  ::PROTOBUF_NAMESPACE_ID::int32 friendscount() const;
  void set_friendscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friendscount() const;
  void _internal_set_friendscount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 listedCount = 11;
  void clear_listedcount();
  ::PROTOBUF_NAMESPACE_ID::int32 listedcount() const;
  void set_listedcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listedcount() const;
  void _internal_set_listedcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 favouritesCount = 12;
  void clear_favouritescount();
  ::PROTOBUF_NAMESPACE_ID::int32 favouritescount() const;
  void set_favouritescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_favouritescount() const;
  void _internal_set_favouritescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 statusesCount = 13;
  void clear_statusescount();
  ::PROTOBUF_NAMESPACE_ID::int32 statusescount() const;
  void set_statusescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statusescount() const;
  void _internal_set_statusescount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isProtected = 7;
  void clear_isprotected();
  bool isprotected() const;
  void set_isprotected(bool value);
  private:
  bool _internal_isprotected() const;
  void _internal_set_isprotected(bool value);
  public:

  // bool isVerified = 8;
  void clear_isverified();
  bool isverified() const;
  void set_isverified(bool value);
  private:
  bool _internal_isverified() const;
  void _internal_set_isverified(bool value);
  public:

  // bool isDefaultProfile = 17;
  void clear_isdefaultprofile();
  bool isdefaultprofile() const;
  void set_isdefaultprofile(bool value);
  private:
  bool _internal_isdefaultprofile() const;
  void _internal_set_isdefaultprofile(bool value);
  public:

  // bool isGeoEnabled = 21;
  void clear_isgeoenabled();
  bool isgeoenabled() const;
  void set_isgeoenabled(bool value);
  private:
  bool _internal_isgeoenabled() const;
  void _internal_set_isgeoenabled(bool value);
  public:

  // bool isContributorsEnabled = 23;
  void clear_iscontributorsenabled();
  bool iscontributorsenabled() const;
  void set_iscontributorsenabled(bool value);
  private:
  bool _internal_iscontributorsenabled() const;
  void _internal_set_iscontributorsenabled(bool value);
  public:

  // bool profileBackgroundTiled = 27;
  void clear_profilebackgroundtiled();
  bool profilebackgroundtiled() const;
  void set_profilebackgroundtiled(bool value);
  private:
  bool _internal_profilebackgroundtiled() const;
  void _internal_set_profilebackgroundtiled(bool value);
  public:

  // bool profileUseBackgroundImage = 33;
  void clear_profileusebackgroundimage();
  bool profileusebackgroundimage() const;
  void set_profileusebackgroundimage(bool value);
  private:
  bool _internal_profileusebackgroundimage() const;
  void _internal_set_profileusebackgroundimage(bool value);
  public:

  // bool isDefaultProfileImage = 34;
  void clear_isdefaultprofileimage();
  bool isdefaultprofileimage() const;
  void set_isdefaultprofileimage(bool value);
  private:
  bool _internal_isdefaultprofileimage() const;
  void _internal_set_isdefaultprofileimage(bool value);
  public:

  // int32 utcOffset = 35;
  void clear_utcoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 utcoffset() const;
  void set_utcoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utcoffset() const;
  void _internal_set_utcoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool translator = 37;
  void clear_translator();
  bool translator() const;
  void set_translator(bool value);
  private:
  bool _internal_translator() const;
  void _internal_set_translator(bool value);
  public:

  // bool isFollowRequestSent = 38;
  void clear_isfollowrequestsent();
  bool isfollowrequestsent() const;
  void set_isfollowrequestsent(bool value);
  private:
  bool _internal_isfollowrequestsent() const;
  void _internal_set_isfollowrequestsent(bool value);
  public:

  // bool showAllInlineMedia = 39;
  void clear_showallinlinemedia();
  bool showallinlinemedia() const;
  void set_showallinlinemedia(bool value);
  private:
  bool _internal_showallinlinemedia() const;
  void _internal_set_showallinlinemedia(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.UserP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> withheldincountries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilebannerimageurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profileimageurlhttps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withheldscope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilebackgroundcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilebackgroundimageurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilebackgroundimageurlhttps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profileimageurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilelinkcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilesidebarbordercolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profilesidebarfillcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profiletextcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::proto::URLEntityP* descriptionurlentities_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 followerscount_;
  ::PROTOBUF_NAMESPACE_ID::int32 friendscount_;
  ::PROTOBUF_NAMESPACE_ID::int32 listedcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 favouritescount_;
  ::PROTOBUF_NAMESPACE_ID::int32 statusescount_;
  bool isprotected_;
  bool isverified_;
  bool isdefaultprofile_;
  bool isgeoenabled_;
  bool iscontributorsenabled_;
  bool profilebackgroundtiled_;
  bool profileusebackgroundimage_;
  bool isdefaultprofileimage_;
  ::PROTOBUF_NAMESPACE_ID::int32 utcoffset_;
  bool translator_;
  bool isfollowrequestsent_;
  bool showallinlinemedia_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_CoordinatesP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.CoordinatesP) */ {
 public:
  TweetStatusP_CoordinatesP();
  virtual ~TweetStatusP_CoordinatesP();

  TweetStatusP_CoordinatesP(const TweetStatusP_CoordinatesP& from);
  TweetStatusP_CoordinatesP(TweetStatusP_CoordinatesP&& from) noexcept
    : TweetStatusP_CoordinatesP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_CoordinatesP& operator=(const TweetStatusP_CoordinatesP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_CoordinatesP& operator=(TweetStatusP_CoordinatesP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_CoordinatesP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_CoordinatesP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_CoordinatesP*>(
               &_TweetStatusP_CoordinatesP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TweetStatusP_CoordinatesP& a, TweetStatusP_CoordinatesP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_CoordinatesP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_CoordinatesP* New() const final {
    return CreateMaybeMessage<TweetStatusP_CoordinatesP>(nullptr);
  }

  TweetStatusP_CoordinatesP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_CoordinatesP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_CoordinatesP& from);
  void MergeFrom(const TweetStatusP_CoordinatesP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_CoordinatesP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.CoordinatesP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated double coordinates = 2;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  private:
  double _internal_coordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coordinates() const;
  void _internal_add_coordinates(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coordinates();
  public:
  double coordinates(int index) const;
  void set_coordinates(int index, double value);
  void add_coordinates(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coordinates();

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.CoordinatesP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coordinates_;
  mutable std::atomic<int> _coordinates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP) */ {
 public:
  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP();
  virtual ~TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP();

  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from);
  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP&& from) noexcept
    : TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& operator=(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& operator=(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP*>(
               &_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& a, TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* New() const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP>(nullptr);
  }

  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from);
  void MergeFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
  };
  // repeated double coordinate = 1;
  int coordinate_size() const;
  private:
  int _internal_coordinate_size() const;
  public:
  void clear_coordinate();
  private:
  double _internal_coordinate(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coordinate() const;
  void _internal_add_coordinate(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coordinate();
  public:
  double coordinate(int index) const;
  void set_coordinate(int index, double value);
  void add_coordinate(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coordinate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coordinate();

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coordinate_;
  mutable std::atomic<int> _coordinate_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP) */ {
 public:
  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP();
  virtual ~TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP();

  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from);
  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP&& from) noexcept
    : TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& operator=(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& operator=(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP*>(
               &_TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& a, TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* New() const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP>(nullptr);
  }

  TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from);
  void MergeFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP RowsTwoP;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsTwoPFieldNumber = 1,
  };
  // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
  int rowstwop_size() const;
  private:
  int _internal_rowstwop_size() const;
  public:
  void clear_rowstwop();
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* mutable_rowstwop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >*
      mutable_rowstwop();
  private:
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& _internal_rowstwop(int index) const;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* _internal_add_rowstwop();
  public:
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& rowstwop(int index) const;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* add_rowstwop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >&
      rowstwop() const;

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP > rowstwop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_PlaceP_BoundingBoxCoordinateP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP) */ {
 public:
  TweetStatusP_PlaceP_BoundingBoxCoordinateP();
  virtual ~TweetStatusP_PlaceP_BoundingBoxCoordinateP();

  TweetStatusP_PlaceP_BoundingBoxCoordinateP(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from);
  TweetStatusP_PlaceP_BoundingBoxCoordinateP(TweetStatusP_PlaceP_BoundingBoxCoordinateP&& from) noexcept
    : TweetStatusP_PlaceP_BoundingBoxCoordinateP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP& operator=(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP& operator=(TweetStatusP_PlaceP_BoundingBoxCoordinateP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_PlaceP_BoundingBoxCoordinateP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_PlaceP_BoundingBoxCoordinateP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_PlaceP_BoundingBoxCoordinateP*>(
               &_TweetStatusP_PlaceP_BoundingBoxCoordinateP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TweetStatusP_PlaceP_BoundingBoxCoordinateP& a, TweetStatusP_PlaceP_BoundingBoxCoordinateP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_PlaceP_BoundingBoxCoordinateP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_PlaceP_BoundingBoxCoordinateP* New() const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP_BoundingBoxCoordinateP>(nullptr);
  }

  TweetStatusP_PlaceP_BoundingBoxCoordinateP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP_BoundingBoxCoordinateP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from);
  void MergeFrom(const TweetStatusP_PlaceP_BoundingBoxCoordinateP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_PlaceP_BoundingBoxCoordinateP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP RowsOneP;

  // accessors -------------------------------------------------------

  enum : int {
    kThreeDimArrayFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
  int threedimarray_size() const;
  private:
  int _internal_threedimarray_size() const;
  public:
  void clear_threedimarray();
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* mutable_threedimarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP >*
      mutable_threedimarray();
  private:
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& _internal_threedimarray(int index) const;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* _internal_add_threedimarray();
  public:
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& threedimarray(int index) const;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* add_threedimarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP >&
      threedimarray() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP > threedimarray_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_PlaceP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.PlaceP) */ {
 public:
  TweetStatusP_PlaceP();
  virtual ~TweetStatusP_PlaceP();

  TweetStatusP_PlaceP(const TweetStatusP_PlaceP& from);
  TweetStatusP_PlaceP(TweetStatusP_PlaceP&& from) noexcept
    : TweetStatusP_PlaceP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_PlaceP& operator=(const TweetStatusP_PlaceP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_PlaceP& operator=(TweetStatusP_PlaceP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_PlaceP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_PlaceP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_PlaceP*>(
               &_TweetStatusP_PlaceP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TweetStatusP_PlaceP& a, TweetStatusP_PlaceP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_PlaceP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_PlaceP* New() const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP>(nullptr);
  }

  TweetStatusP_PlaceP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_PlaceP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_PlaceP& from);
  void MergeFrom(const TweetStatusP_PlaceP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_PlaceP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.PlaceP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TweetStatusP_PlaceP_BoundingBoxCoordinateP BoundingBoxCoordinateP;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountryCodeFieldNumber = 2,
    kIdFieldNumber = 3,
    kCountryFieldNumber = 4,
    kPlaceTypeFieldNumber = 5,
    kUrlFieldNumber = 6,
    kFullNameFieldNumber = 7,
    kBoundingBoxCoordinatePFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string countryCode = 2;
  void clear_countrycode();
  const std::string& countrycode() const;
  void set_countrycode(const std::string& value);
  void set_countrycode(std::string&& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  std::string* mutable_countrycode();
  std::string* release_countrycode();
  void set_allocated_countrycode(std::string* countrycode);
  private:
  const std::string& _internal_countrycode() const;
  void _internal_set_countrycode(const std::string& value);
  std::string* _internal_mutable_countrycode();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string country = 4;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string placeType = 5;
  void clear_placetype();
  const std::string& placetype() const;
  void set_placetype(const std::string& value);
  void set_placetype(std::string&& value);
  void set_placetype(const char* value);
  void set_placetype(const char* value, size_t size);
  std::string* mutable_placetype();
  std::string* release_placetype();
  void set_allocated_placetype(std::string* placetype);
  private:
  const std::string& _internal_placetype() const;
  void _internal_set_placetype(const std::string& value);
  std::string* _internal_mutable_placetype();
  public:

  // string url = 6;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string fullName = 7;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
  bool has_boundingboxcoordinatep() const;
  private:
  bool _internal_has_boundingboxcoordinatep() const;
  public:
  void clear_boundingboxcoordinatep();
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP& boundingboxcoordinatep() const;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* release_boundingboxcoordinatep();
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* mutable_boundingboxcoordinatep();
  void set_allocated_boundingboxcoordinatep(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* boundingboxcoordinatep);
  private:
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP& _internal_boundingboxcoordinatep() const;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* _internal_mutable_boundingboxcoordinatep();
  public:

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.PlaceP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* boundingboxcoordinatep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_EntitiesP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.EntitiesP) */ {
 public:
  TweetStatusP_EntitiesP();
  virtual ~TweetStatusP_EntitiesP();

  TweetStatusP_EntitiesP(const TweetStatusP_EntitiesP& from);
  TweetStatusP_EntitiesP(TweetStatusP_EntitiesP&& from) noexcept
    : TweetStatusP_EntitiesP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_EntitiesP& operator=(const TweetStatusP_EntitiesP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_EntitiesP& operator=(TweetStatusP_EntitiesP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_EntitiesP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_EntitiesP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_EntitiesP*>(
               &_TweetStatusP_EntitiesP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TweetStatusP_EntitiesP& a, TweetStatusP_EntitiesP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_EntitiesP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_EntitiesP* New() const final {
    return CreateMaybeMessage<TweetStatusP_EntitiesP>(nullptr);
  }

  TweetStatusP_EntitiesP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_EntitiesP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_EntitiesP& from);
  void MergeFrom(const TweetStatusP_EntitiesP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_EntitiesP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.EntitiesP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashtagEntityPFieldNumber = 1,
    kMediaEntityPFieldNumber = 2,
    kUrlEntityPFieldNumber = 3,
    kUserMentionEntityPFieldNumber = 4,
    kSymbolEntityPFieldNumber = 5,
    kPollEntityPFieldNumber = 6,
  };
  // repeated .proto.HashtagEntityP hashtagEntityP = 1;
  int hashtagentityp_size() const;
  private:
  int _internal_hashtagentityp_size() const;
  public:
  void clear_hashtagentityp();
  ::proto::HashtagEntityP* mutable_hashtagentityp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::HashtagEntityP >*
      mutable_hashtagentityp();
  private:
  const ::proto::HashtagEntityP& _internal_hashtagentityp(int index) const;
  ::proto::HashtagEntityP* _internal_add_hashtagentityp();
  public:
  const ::proto::HashtagEntityP& hashtagentityp(int index) const;
  ::proto::HashtagEntityP* add_hashtagentityp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::HashtagEntityP >&
      hashtagentityp() const;

  // repeated .proto.MediaEntityP mediaEntityP = 2;
  int mediaentityp_size() const;
  private:
  int _internal_mediaentityp_size() const;
  public:
  void clear_mediaentityp();
  ::proto::MediaEntityP* mutable_mediaentityp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >*
      mutable_mediaentityp();
  private:
  const ::proto::MediaEntityP& _internal_mediaentityp(int index) const;
  ::proto::MediaEntityP* _internal_add_mediaentityp();
  public:
  const ::proto::MediaEntityP& mediaentityp(int index) const;
  ::proto::MediaEntityP* add_mediaentityp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >&
      mediaentityp() const;

  // repeated .proto.URLEntityP urlEntityP = 3;
  int urlentityp_size() const;
  private:
  int _internal_urlentityp_size() const;
  public:
  void clear_urlentityp();
  ::proto::URLEntityP* mutable_urlentityp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::URLEntityP >*
      mutable_urlentityp();
  private:
  const ::proto::URLEntityP& _internal_urlentityp(int index) const;
  ::proto::URLEntityP* _internal_add_urlentityp();
  public:
  const ::proto::URLEntityP& urlentityp(int index) const;
  ::proto::URLEntityP* add_urlentityp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::URLEntityP >&
      urlentityp() const;

  // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
  int usermentionentityp_size() const;
  private:
  int _internal_usermentionentityp_size() const;
  public:
  void clear_usermentionentityp();
  ::proto::UserMentionEntityP* mutable_usermentionentityp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMentionEntityP >*
      mutable_usermentionentityp();
  private:
  const ::proto::UserMentionEntityP& _internal_usermentionentityp(int index) const;
  ::proto::UserMentionEntityP* _internal_add_usermentionentityp();
  public:
  const ::proto::UserMentionEntityP& usermentionentityp(int index) const;
  ::proto::UserMentionEntityP* add_usermentionentityp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMentionEntityP >&
      usermentionentityp() const;

  // repeated .proto.SymbolEntityP symbolEntityP = 5;
  int symbolentityp_size() const;
  private:
  int _internal_symbolentityp_size() const;
  public:
  void clear_symbolentityp();
  ::proto::SymbolEntityP* mutable_symbolentityp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SymbolEntityP >*
      mutable_symbolentityp();
  private:
  const ::proto::SymbolEntityP& _internal_symbolentityp(int index) const;
  ::proto::SymbolEntityP* _internal_add_symbolentityp();
  public:
  const ::proto::SymbolEntityP& symbolentityp(int index) const;
  ::proto::SymbolEntityP* add_symbolentityp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SymbolEntityP >&
      symbolentityp() const;

  // repeated .proto.PollEntityP pollEntityP = 6;
  int pollentityp_size() const;
  private:
  int _internal_pollentityp_size() const;
  public:
  void clear_pollentityp();
  ::proto::PollEntityP* mutable_pollentityp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PollEntityP >*
      mutable_pollentityp();
  private:
  const ::proto::PollEntityP& _internal_pollentityp(int index) const;
  ::proto::PollEntityP* _internal_add_pollentityp();
  public:
  const ::proto::PollEntityP& pollentityp(int index) const;
  ::proto::PollEntityP* add_pollentityp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PollEntityP >&
      pollentityp() const;

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.EntitiesP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::HashtagEntityP > hashtagentityp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP > mediaentityp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::URLEntityP > urlentityp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMentionEntityP > usermentionentityp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SymbolEntityP > symbolentityp_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PollEntityP > pollentityp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP_ExtendedEntitiesP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP.ExtendedEntitiesP) */ {
 public:
  TweetStatusP_ExtendedEntitiesP();
  virtual ~TweetStatusP_ExtendedEntitiesP();

  TweetStatusP_ExtendedEntitiesP(const TweetStatusP_ExtendedEntitiesP& from);
  TweetStatusP_ExtendedEntitiesP(TweetStatusP_ExtendedEntitiesP&& from) noexcept
    : TweetStatusP_ExtendedEntitiesP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP_ExtendedEntitiesP& operator=(const TweetStatusP_ExtendedEntitiesP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP_ExtendedEntitiesP& operator=(TweetStatusP_ExtendedEntitiesP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP_ExtendedEntitiesP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP_ExtendedEntitiesP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP_ExtendedEntitiesP*>(
               &_TweetStatusP_ExtendedEntitiesP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TweetStatusP_ExtendedEntitiesP& a, TweetStatusP_ExtendedEntitiesP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP_ExtendedEntitiesP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP_ExtendedEntitiesP* New() const final {
    return CreateMaybeMessage<TweetStatusP_ExtendedEntitiesP>(nullptr);
  }

  TweetStatusP_ExtendedEntitiesP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP_ExtendedEntitiesP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP_ExtendedEntitiesP& from);
  void MergeFrom(const TweetStatusP_ExtendedEntitiesP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP_ExtendedEntitiesP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP.ExtendedEntitiesP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaFieldNumber = 1,
  };
  // repeated .proto.MediaEntityP media = 1;
  int media_size() const;
  private:
  int _internal_media_size() const;
  public:
  void clear_media();
  ::proto::MediaEntityP* mutable_media(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >*
      mutable_media();
  private:
  const ::proto::MediaEntityP& _internal_media(int index) const;
  ::proto::MediaEntityP* _internal_add_media();
  public:
  const ::proto::MediaEntityP& media(int index) const;
  ::proto::MediaEntityP* add_media();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >&
      media() const;

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP.ExtendedEntitiesP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP > media_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class TweetStatusP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TweetStatusP) */ {
 public:
  TweetStatusP();
  virtual ~TweetStatusP();

  TweetStatusP(const TweetStatusP& from);
  TweetStatusP(TweetStatusP&& from) noexcept
    : TweetStatusP() {
    *this = ::std::move(from);
  }

  inline TweetStatusP& operator=(const TweetStatusP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TweetStatusP& operator=(TweetStatusP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TweetStatusP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetStatusP* internal_default_instance() {
    return reinterpret_cast<const TweetStatusP*>(
               &_TweetStatusP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TweetStatusP& a, TweetStatusP& b) {
    a.Swap(&b);
  }
  inline void Swap(TweetStatusP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TweetStatusP* New() const final {
    return CreateMaybeMessage<TweetStatusP>(nullptr);
  }

  TweetStatusP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TweetStatusP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TweetStatusP& from);
  void MergeFrom(const TweetStatusP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TweetStatusP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TweetStatusP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TweetStatusP_UserP UserP;
  typedef TweetStatusP_CoordinatesP CoordinatesP;
  typedef TweetStatusP_PlaceP PlaceP;
  typedef TweetStatusP_EntitiesP EntitiesP;
  typedef TweetStatusP_ExtendedEntitiesP ExtendedEntitiesP;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchingRulesFieldNumber = 45,
    kScopesFieldNumber = 47,
    kWithheldInCountriesFieldNumber = 49,
    kCreatedAtFieldNumber = 1,
    kTextFieldNumber = 3,
    kSourceFieldNumber = 4,
    kInReplyToScreenNameFieldNumber = 8,
    kFilterLevelFieldNumber = 43,
    kLangFieldNumber = 44,
    kWithheldScopeFieldNumber = 50,
    kUserPFieldNumber = 27,
    kCoordinatesFieldNumber = 28,
    kPlaceFieldNumber = 29,
    kQuotedStatusFieldNumber = 32,
    kRetweetedStatusFieldNumber = 33,
    kEntitiesPFieldNumber = 38,
    kExtendedEntitiesFieldNumber = 39,
    kIdFieldNumber = 2,
    kInReplyToStatusIdFieldNumber = 6,
    kInReplyToUserIdFieldNumber = 7,
    kQuotedStatusIdFieldNumber = 30,
    kIsTruncatedFieldNumber = 5,
    kIsQuoteStatusFieldNumber = 31,
    kIsFavoritedFieldNumber = 40,
    kIsRetweetedFieldNumber = 41,
    kQuoteCountFieldNumber = 34,
    kReplyCountFieldNumber = 35,
    kRetweetCountFieldNumber = 36,
    kFavoriteCountFieldNumber = 37,
    kIsPossiblySensitiveFieldNumber = 42,
    kWithheldCopyrightFieldNumber = 48,
    kCurrentUserRetweetedIdFieldNumber = 46,
  };
  // repeated .proto.MatchingRulesEntityP matchingRules = 45;
  int matchingrules_size() const;
  private:
  int _internal_matchingrules_size() const;
  public:
  void clear_matchingrules();
  ::proto::MatchingRulesEntityP* mutable_matchingrules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MatchingRulesEntityP >*
      mutable_matchingrules();
  private:
  const ::proto::MatchingRulesEntityP& _internal_matchingrules(int index) const;
  ::proto::MatchingRulesEntityP* _internal_add_matchingrules();
  public:
  const ::proto::MatchingRulesEntityP& matchingrules(int index) const;
  ::proto::MatchingRulesEntityP* add_matchingrules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MatchingRulesEntityP >&
      matchingrules() const;

  // repeated .proto.MapFieldEntry scopes = 47;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  ::proto::MapFieldEntry* mutable_scopes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MapFieldEntry >*
      mutable_scopes();
  private:
  const ::proto::MapFieldEntry& _internal_scopes(int index) const;
  ::proto::MapFieldEntry* _internal_add_scopes();
  public:
  const ::proto::MapFieldEntry& scopes(int index) const;
  ::proto::MapFieldEntry* add_scopes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MapFieldEntry >&
      scopes() const;

  // repeated string withheldInCountries = 49;
  int withheldincountries_size() const;
  private:
  int _internal_withheldincountries_size() const;
  public:
  void clear_withheldincountries();
  const std::string& withheldincountries(int index) const;
  std::string* mutable_withheldincountries(int index);
  void set_withheldincountries(int index, const std::string& value);
  void set_withheldincountries(int index, std::string&& value);
  void set_withheldincountries(int index, const char* value);
  void set_withheldincountries(int index, const char* value, size_t size);
  std::string* add_withheldincountries();
  void add_withheldincountries(const std::string& value);
  void add_withheldincountries(std::string&& value);
  void add_withheldincountries(const char* value);
  void add_withheldincountries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& withheldincountries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_withheldincountries();
  private:
  const std::string& _internal_withheldincountries(int index) const;
  std::string* _internal_add_withheldincountries();
  public:

  // string createdAt = 1;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string source = 4;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string inReplyToScreenName = 8;
  void clear_inreplytoscreenname();
  const std::string& inreplytoscreenname() const;
  void set_inreplytoscreenname(const std::string& value);
  void set_inreplytoscreenname(std::string&& value);
  void set_inreplytoscreenname(const char* value);
  void set_inreplytoscreenname(const char* value, size_t size);
  std::string* mutable_inreplytoscreenname();
  std::string* release_inreplytoscreenname();
  void set_allocated_inreplytoscreenname(std::string* inreplytoscreenname);
  private:
  const std::string& _internal_inreplytoscreenname() const;
  void _internal_set_inreplytoscreenname(const std::string& value);
  std::string* _internal_mutable_inreplytoscreenname();
  public:

  // string filterLevel = 43;
  void clear_filterlevel();
  const std::string& filterlevel() const;
  void set_filterlevel(const std::string& value);
  void set_filterlevel(std::string&& value);
  void set_filterlevel(const char* value);
  void set_filterlevel(const char* value, size_t size);
  std::string* mutable_filterlevel();
  std::string* release_filterlevel();
  void set_allocated_filterlevel(std::string* filterlevel);
  private:
  const std::string& _internal_filterlevel() const;
  void _internal_set_filterlevel(const std::string& value);
  std::string* _internal_mutable_filterlevel();
  public:

  // string lang = 44;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string withheldScope = 50;
  void clear_withheldscope();
  const std::string& withheldscope() const;
  void set_withheldscope(const std::string& value);
  void set_withheldscope(std::string&& value);
  void set_withheldscope(const char* value);
  void set_withheldscope(const char* value, size_t size);
  std::string* mutable_withheldscope();
  std::string* release_withheldscope();
  void set_allocated_withheldscope(std::string* withheldscope);
  private:
  const std::string& _internal_withheldscope() const;
  void _internal_set_withheldscope(const std::string& value);
  std::string* _internal_mutable_withheldscope();
  public:

  // .proto.TweetStatusP.UserP userP = 27;
  bool has_userp() const;
  private:
  bool _internal_has_userp() const;
  public:
  void clear_userp();
  const ::proto::TweetStatusP_UserP& userp() const;
  ::proto::TweetStatusP_UserP* release_userp();
  ::proto::TweetStatusP_UserP* mutable_userp();
  void set_allocated_userp(::proto::TweetStatusP_UserP* userp);
  private:
  const ::proto::TweetStatusP_UserP& _internal_userp() const;
  ::proto::TweetStatusP_UserP* _internal_mutable_userp();
  public:

  // .proto.TweetStatusP.CoordinatesP coordinates = 28;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::proto::TweetStatusP_CoordinatesP& coordinates() const;
  ::proto::TweetStatusP_CoordinatesP* release_coordinates();
  ::proto::TweetStatusP_CoordinatesP* mutable_coordinates();
  void set_allocated_coordinates(::proto::TweetStatusP_CoordinatesP* coordinates);
  private:
  const ::proto::TweetStatusP_CoordinatesP& _internal_coordinates() const;
  ::proto::TweetStatusP_CoordinatesP* _internal_mutable_coordinates();
  public:

  // .proto.TweetStatusP.PlaceP place = 29;
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  const ::proto::TweetStatusP_PlaceP& place() const;
  ::proto::TweetStatusP_PlaceP* release_place();
  ::proto::TweetStatusP_PlaceP* mutable_place();
  void set_allocated_place(::proto::TweetStatusP_PlaceP* place);
  private:
  const ::proto::TweetStatusP_PlaceP& _internal_place() const;
  ::proto::TweetStatusP_PlaceP* _internal_mutable_place();
  public:

  // .proto.TweetStatusP quotedStatus = 32;
  bool has_quotedstatus() const;
  private:
  bool _internal_has_quotedstatus() const;
  public:
  void clear_quotedstatus();
  const ::proto::TweetStatusP& quotedstatus() const;
  ::proto::TweetStatusP* release_quotedstatus();
  ::proto::TweetStatusP* mutable_quotedstatus();
  void set_allocated_quotedstatus(::proto::TweetStatusP* quotedstatus);
  private:
  const ::proto::TweetStatusP& _internal_quotedstatus() const;
  ::proto::TweetStatusP* _internal_mutable_quotedstatus();
  public:

  // .proto.TweetStatusP retweetedStatus = 33;
  bool has_retweetedstatus() const;
  private:
  bool _internal_has_retweetedstatus() const;
  public:
  void clear_retweetedstatus();
  const ::proto::TweetStatusP& retweetedstatus() const;
  ::proto::TweetStatusP* release_retweetedstatus();
  ::proto::TweetStatusP* mutable_retweetedstatus();
  void set_allocated_retweetedstatus(::proto::TweetStatusP* retweetedstatus);
  private:
  const ::proto::TweetStatusP& _internal_retweetedstatus() const;
  ::proto::TweetStatusP* _internal_mutable_retweetedstatus();
  public:

  // .proto.TweetStatusP.EntitiesP entitiesP = 38;
  bool has_entitiesp() const;
  private:
  bool _internal_has_entitiesp() const;
  public:
  void clear_entitiesp();
  const ::proto::TweetStatusP_EntitiesP& entitiesp() const;
  ::proto::TweetStatusP_EntitiesP* release_entitiesp();
  ::proto::TweetStatusP_EntitiesP* mutable_entitiesp();
  void set_allocated_entitiesp(::proto::TweetStatusP_EntitiesP* entitiesp);
  private:
  const ::proto::TweetStatusP_EntitiesP& _internal_entitiesp() const;
  ::proto::TweetStatusP_EntitiesP* _internal_mutable_entitiesp();
  public:

  // .proto.TweetStatusP.ExtendedEntitiesP extendedEntities = 39;
  bool has_extendedentities() const;
  private:
  bool _internal_has_extendedentities() const;
  public:
  void clear_extendedentities();
  const ::proto::TweetStatusP_ExtendedEntitiesP& extendedentities() const;
  ::proto::TweetStatusP_ExtendedEntitiesP* release_extendedentities();
  ::proto::TweetStatusP_ExtendedEntitiesP* mutable_extendedentities();
  void set_allocated_extendedentities(::proto::TweetStatusP_ExtendedEntitiesP* extendedentities);
  private:
  const ::proto::TweetStatusP_ExtendedEntitiesP& _internal_extendedentities() const;
  ::proto::TweetStatusP_ExtendedEntitiesP* _internal_mutable_extendedentities();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 inReplyToStatusId = 6;
  void clear_inreplytostatusid();
  ::PROTOBUF_NAMESPACE_ID::int64 inreplytostatusid() const;
  void set_inreplytostatusid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inreplytostatusid() const;
  void _internal_set_inreplytostatusid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 inReplyToUserId = 7;
  void clear_inreplytouserid();
  ::PROTOBUF_NAMESPACE_ID::int64 inreplytouserid() const;
  void set_inreplytouserid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inreplytouserid() const;
  void _internal_set_inreplytouserid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 quotedStatusId = 30;
  void clear_quotedstatusid();
  ::PROTOBUF_NAMESPACE_ID::int64 quotedstatusid() const;
  void set_quotedstatusid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quotedstatusid() const;
  void _internal_set_quotedstatusid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isTruncated = 5;
  void clear_istruncated();
  bool istruncated() const;
  void set_istruncated(bool value);
  private:
  bool _internal_istruncated() const;
  void _internal_set_istruncated(bool value);
  public:

  // bool isQuoteStatus = 31;
  void clear_isquotestatus();
  bool isquotestatus() const;
  void set_isquotestatus(bool value);
  private:
  bool _internal_isquotestatus() const;
  void _internal_set_isquotestatus(bool value);
  public:

  // bool isFavorited = 40;
  void clear_isfavorited();
  bool isfavorited() const;
  void set_isfavorited(bool value);
  private:
  bool _internal_isfavorited() const;
  void _internal_set_isfavorited(bool value);
  public:

  // bool isRetweeted = 41;
  void clear_isretweeted();
  bool isretweeted() const;
  void set_isretweeted(bool value);
  private:
  bool _internal_isretweeted() const;
  void _internal_set_isretweeted(bool value);
  public:

  // int32 quoteCount = 34;
  void clear_quotecount();
  ::PROTOBUF_NAMESPACE_ID::int32 quotecount() const;
  void set_quotecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quotecount() const;
  void _internal_set_quotecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 replyCount = 35;
  void clear_replycount();
  ::PROTOBUF_NAMESPACE_ID::int32 replycount() const;
  void set_replycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replycount() const;
  void _internal_set_replycount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 retweetCount = 36;
  void clear_retweetcount();
  ::PROTOBUF_NAMESPACE_ID::int32 retweetcount() const;
  void set_retweetcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retweetcount() const;
  void _internal_set_retweetcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 favoriteCount = 37;
  void clear_favoritecount();
  ::PROTOBUF_NAMESPACE_ID::int32 favoritecount() const;
  void set_favoritecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_favoritecount() const;
  void _internal_set_favoritecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isPossiblySensitive = 42;
  void clear_ispossiblysensitive();
  bool ispossiblysensitive() const;
  void set_ispossiblysensitive(bool value);
  private:
  bool _internal_ispossiblysensitive() const;
  void _internal_set_ispossiblysensitive(bool value);
  public:

  // bool withheldCopyright = 48;
  void clear_withheldcopyright();
  bool withheldcopyright() const;
  void set_withheldcopyright(bool value);
  private:
  bool _internal_withheldcopyright() const;
  void _internal_set_withheldcopyright(bool value);
  public:

  // int64 currentUserRetweetedId = 46;
  void clear_currentuserretweetedid();
  ::PROTOBUF_NAMESPACE_ID::int64 currentuserretweetedid() const;
  void set_currentuserretweetedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_currentuserretweetedid() const;
  void _internal_set_currentuserretweetedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TweetStatusP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MatchingRulesEntityP > matchingrules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MapFieldEntry > scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> withheldincountries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inreplytoscreenname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filterlevel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withheldscope_;
  ::proto::TweetStatusP_UserP* userp_;
  ::proto::TweetStatusP_CoordinatesP* coordinates_;
  ::proto::TweetStatusP_PlaceP* place_;
  ::proto::TweetStatusP* quotedstatus_;
  ::proto::TweetStatusP* retweetedstatus_;
  ::proto::TweetStatusP_EntitiesP* entitiesp_;
  ::proto::TweetStatusP_ExtendedEntitiesP* extendedentities_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 inreplytostatusid_;
  ::PROTOBUF_NAMESPACE_ID::int64 inreplytouserid_;
  ::PROTOBUF_NAMESPACE_ID::int64 quotedstatusid_;
  bool istruncated_;
  bool isquotestatus_;
  bool isfavorited_;
  bool isretweeted_;
  ::PROTOBUF_NAMESPACE_ID::int32 quotecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 replycount_;
  ::PROTOBUF_NAMESPACE_ID::int32 retweetcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 favoritecount_;
  bool ispossiblysensitive_;
  bool withheldcopyright_;
  ::PROTOBUF_NAMESPACE_ID::int64 currentuserretweetedid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class URLEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.URLEntityP) */ {
 public:
  URLEntityP();
  virtual ~URLEntityP();

  URLEntityP(const URLEntityP& from);
  URLEntityP(URLEntityP&& from) noexcept
    : URLEntityP() {
    *this = ::std::move(from);
  }

  inline URLEntityP& operator=(const URLEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline URLEntityP& operator=(URLEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const URLEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const URLEntityP* internal_default_instance() {
    return reinterpret_cast<const URLEntityP*>(
               &_URLEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(URLEntityP& a, URLEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(URLEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline URLEntityP* New() const final {
    return CreateMaybeMessage<URLEntityP>(nullptr);
  }

  URLEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<URLEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const URLEntityP& from);
  void MergeFrom(const URLEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(URLEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.URLEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 1,
    kDisplayURLFieldNumber = 2,
    kExpandedURLFieldNumber = 3,
    kUrlFieldNumber = 4,
  };
  // repeated int32 indices = 1;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string displayURL = 2;
  void clear_displayurl();
  const std::string& displayurl() const;
  void set_displayurl(const std::string& value);
  void set_displayurl(std::string&& value);
  void set_displayurl(const char* value);
  void set_displayurl(const char* value, size_t size);
  std::string* mutable_displayurl();
  std::string* release_displayurl();
  void set_allocated_displayurl(std::string* displayurl);
  private:
  const std::string& _internal_displayurl() const;
  void _internal_set_displayurl(const std::string& value);
  std::string* _internal_mutable_displayurl();
  public:

  // string expandedURL = 3;
  void clear_expandedurl();
  const std::string& expandedurl() const;
  void set_expandedurl(const std::string& value);
  void set_expandedurl(std::string&& value);
  void set_expandedurl(const char* value);
  void set_expandedurl(const char* value, size_t size);
  std::string* mutable_expandedurl();
  std::string* release_expandedurl();
  void set_allocated_expandedurl(std::string* expandedurl);
  private:
  const std::string& _internal_expandedurl() const;
  void _internal_set_expandedurl(const std::string& value);
  std::string* _internal_mutable_expandedurl();
  public:

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:proto.URLEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expandedurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class HashtagEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.HashtagEntityP) */ {
 public:
  HashtagEntityP();
  virtual ~HashtagEntityP();

  HashtagEntityP(const HashtagEntityP& from);
  HashtagEntityP(HashtagEntityP&& from) noexcept
    : HashtagEntityP() {
    *this = ::std::move(from);
  }

  inline HashtagEntityP& operator=(const HashtagEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashtagEntityP& operator=(HashtagEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashtagEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashtagEntityP* internal_default_instance() {
    return reinterpret_cast<const HashtagEntityP*>(
               &_HashtagEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HashtagEntityP& a, HashtagEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(HashtagEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashtagEntityP* New() const final {
    return CreateMaybeMessage<HashtagEntityP>(nullptr);
  }

  HashtagEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashtagEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashtagEntityP& from);
  void MergeFrom(const HashtagEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashtagEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.HashtagEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated int32 indices = 1;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:proto.HashtagEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class MediaEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MediaEntityP) */ {
 public:
  MediaEntityP();
  virtual ~MediaEntityP();

  MediaEntityP(const MediaEntityP& from);
  MediaEntityP(MediaEntityP&& from) noexcept
    : MediaEntityP() {
    *this = ::std::move(from);
  }

  inline MediaEntityP& operator=(const MediaEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaEntityP& operator=(MediaEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaEntityP* internal_default_instance() {
    return reinterpret_cast<const MediaEntityP*>(
               &_MediaEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MediaEntityP& a, MediaEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaEntityP* New() const final {
    return CreateMaybeMessage<MediaEntityP>(nullptr);
  }

  MediaEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaEntityP& from);
  void MergeFrom(const MediaEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MediaEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 4,
    kDisplayURLFieldNumber = 1,
    kExpandedURLFieldNumber = 2,
    kMediaURLFieldNumber = 5,
    kMediaURLHttpsFieldNumber = 6,
    kTypeFieldNumber = 8,
    kSourceStatusIdStrFieldNumber = 10,
    kUrlFieldNumber = 11,
    kSizesFieldNumber = 7,
    kVideoInfoFieldNumber = 12,
    kAdditionalMediaInfoFieldNumber = 13,
    kIdFieldNumber = 3,
    kSourceStatusIdFieldNumber = 9,
  };
  // repeated int32 indices = 4;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string displayURL = 1;
  void clear_displayurl();
  const std::string& displayurl() const;
  void set_displayurl(const std::string& value);
  void set_displayurl(std::string&& value);
  void set_displayurl(const char* value);
  void set_displayurl(const char* value, size_t size);
  std::string* mutable_displayurl();
  std::string* release_displayurl();
  void set_allocated_displayurl(std::string* displayurl);
  private:
  const std::string& _internal_displayurl() const;
  void _internal_set_displayurl(const std::string& value);
  std::string* _internal_mutable_displayurl();
  public:

  // string expandedURL = 2;
  void clear_expandedurl();
  const std::string& expandedurl() const;
  void set_expandedurl(const std::string& value);
  void set_expandedurl(std::string&& value);
  void set_expandedurl(const char* value);
  void set_expandedurl(const char* value, size_t size);
  std::string* mutable_expandedurl();
  std::string* release_expandedurl();
  void set_allocated_expandedurl(std::string* expandedurl);
  private:
  const std::string& _internal_expandedurl() const;
  void _internal_set_expandedurl(const std::string& value);
  std::string* _internal_mutable_expandedurl();
  public:

  // string mediaURL = 5;
  void clear_mediaurl();
  const std::string& mediaurl() const;
  void set_mediaurl(const std::string& value);
  void set_mediaurl(std::string&& value);
  void set_mediaurl(const char* value);
  void set_mediaurl(const char* value, size_t size);
  std::string* mutable_mediaurl();
  std::string* release_mediaurl();
  void set_allocated_mediaurl(std::string* mediaurl);
  private:
  const std::string& _internal_mediaurl() const;
  void _internal_set_mediaurl(const std::string& value);
  std::string* _internal_mutable_mediaurl();
  public:

  // string mediaURLHttps = 6;
  void clear_mediaurlhttps();
  const std::string& mediaurlhttps() const;
  void set_mediaurlhttps(const std::string& value);
  void set_mediaurlhttps(std::string&& value);
  void set_mediaurlhttps(const char* value);
  void set_mediaurlhttps(const char* value, size_t size);
  std::string* mutable_mediaurlhttps();
  std::string* release_mediaurlhttps();
  void set_allocated_mediaurlhttps(std::string* mediaurlhttps);
  private:
  const std::string& _internal_mediaurlhttps() const;
  void _internal_set_mediaurlhttps(const std::string& value);
  std::string* _internal_mutable_mediaurlhttps();
  public:

  // string type = 8;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string sourceStatusIdStr = 10;
  void clear_sourcestatusidstr();
  const std::string& sourcestatusidstr() const;
  void set_sourcestatusidstr(const std::string& value);
  void set_sourcestatusidstr(std::string&& value);
  void set_sourcestatusidstr(const char* value);
  void set_sourcestatusidstr(const char* value, size_t size);
  std::string* mutable_sourcestatusidstr();
  std::string* release_sourcestatusidstr();
  void set_allocated_sourcestatusidstr(std::string* sourcestatusidstr);
  private:
  const std::string& _internal_sourcestatusidstr() const;
  void _internal_set_sourcestatusidstr(const std::string& value);
  std::string* _internal_mutable_sourcestatusidstr();
  public:

  // string url = 11;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .proto.MediaSizesEntityP sizes = 7;
  bool has_sizes() const;
  private:
  bool _internal_has_sizes() const;
  public:
  void clear_sizes();
  const ::proto::MediaSizesEntityP& sizes() const;
  ::proto::MediaSizesEntityP* release_sizes();
  ::proto::MediaSizesEntityP* mutable_sizes();
  void set_allocated_sizes(::proto::MediaSizesEntityP* sizes);
  private:
  const ::proto::MediaSizesEntityP& _internal_sizes() const;
  ::proto::MediaSizesEntityP* _internal_mutable_sizes();
  public:

  // .proto.VideoEntityP videoInfo = 12;
  bool has_videoinfo() const;
  private:
  bool _internal_has_videoinfo() const;
  public:
  void clear_videoinfo();
  const ::proto::VideoEntityP& videoinfo() const;
  ::proto::VideoEntityP* release_videoinfo();
  ::proto::VideoEntityP* mutable_videoinfo();
  void set_allocated_videoinfo(::proto::VideoEntityP* videoinfo);
  private:
  const ::proto::VideoEntityP& _internal_videoinfo() const;
  ::proto::VideoEntityP* _internal_mutable_videoinfo();
  public:

  // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 13;
  bool has_additionalmediainfo() const;
  private:
  bool _internal_has_additionalmediainfo() const;
  public:
  void clear_additionalmediainfo();
  const ::proto::AdditionalMediaInfoEntityP& additionalmediainfo() const;
  ::proto::AdditionalMediaInfoEntityP* release_additionalmediainfo();
  ::proto::AdditionalMediaInfoEntityP* mutable_additionalmediainfo();
  void set_allocated_additionalmediainfo(::proto::AdditionalMediaInfoEntityP* additionalmediainfo);
  private:
  const ::proto::AdditionalMediaInfoEntityP& _internal_additionalmediainfo() const;
  ::proto::AdditionalMediaInfoEntityP* _internal_mutable_additionalmediainfo();
  public:

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sourceStatusId = 9;
  void clear_sourcestatusid();
  ::PROTOBUF_NAMESPACE_ID::int64 sourcestatusid() const;
  void set_sourcestatusid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sourcestatusid() const;
  void _internal_set_sourcestatusid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.MediaEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expandedurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mediaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mediaurlhttps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcestatusidstr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::proto::MediaSizesEntityP* sizes_;
  ::proto::VideoEntityP* videoinfo_;
  ::proto::AdditionalMediaInfoEntityP* additionalmediainfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sourcestatusid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class UserMentionEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserMentionEntityP) */ {
 public:
  UserMentionEntityP();
  virtual ~UserMentionEntityP();

  UserMentionEntityP(const UserMentionEntityP& from);
  UserMentionEntityP(UserMentionEntityP&& from) noexcept
    : UserMentionEntityP() {
    *this = ::std::move(from);
  }

  inline UserMentionEntityP& operator=(const UserMentionEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMentionEntityP& operator=(UserMentionEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserMentionEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMentionEntityP* internal_default_instance() {
    return reinterpret_cast<const UserMentionEntityP*>(
               &_UserMentionEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserMentionEntityP& a, UserMentionEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMentionEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserMentionEntityP* New() const final {
    return CreateMaybeMessage<UserMentionEntityP>(nullptr);
  }

  UserMentionEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserMentionEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserMentionEntityP& from);
  void MergeFrom(const UserMentionEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMentionEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserMentionEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 3,
    kIdStrFieldNumber = 2,
    kNameFieldNumber = 4,
    kScreenNameFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated int32 indices = 3;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string idStr = 2;
  void clear_idstr();
  const std::string& idstr() const;
  void set_idstr(const std::string& value);
  void set_idstr(std::string&& value);
  void set_idstr(const char* value);
  void set_idstr(const char* value, size_t size);
  std::string* mutable_idstr();
  std::string* release_idstr();
  void set_allocated_idstr(std::string* idstr);
  private:
  const std::string& _internal_idstr() const;
  void _internal_set_idstr(const std::string& value);
  std::string* _internal_mutable_idstr();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string screenName = 5;
  void clear_screenname();
  const std::string& screenname() const;
  void set_screenname(const std::string& value);
  void set_screenname(std::string&& value);
  void set_screenname(const char* value);
  void set_screenname(const char* value, size_t size);
  std::string* mutable_screenname();
  std::string* release_screenname();
  void set_allocated_screenname(std::string* screenname);
  private:
  const std::string& _internal_screenname() const;
  void _internal_set_screenname(const std::string& value);
  std::string* _internal_mutable_screenname();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UserMentionEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idstr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenname_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class SymbolEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SymbolEntityP) */ {
 public:
  SymbolEntityP();
  virtual ~SymbolEntityP();

  SymbolEntityP(const SymbolEntityP& from);
  SymbolEntityP(SymbolEntityP&& from) noexcept
    : SymbolEntityP() {
    *this = ::std::move(from);
  }

  inline SymbolEntityP& operator=(const SymbolEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolEntityP& operator=(SymbolEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymbolEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolEntityP* internal_default_instance() {
    return reinterpret_cast<const SymbolEntityP*>(
               &_SymbolEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SymbolEntityP& a, SymbolEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(SymbolEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymbolEntityP* New() const final {
    return CreateMaybeMessage<SymbolEntityP>(nullptr);
  }

  SymbolEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymbolEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymbolEntityP& from);
  void MergeFrom(const SymbolEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SymbolEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated int32 indices = 1;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:proto.SymbolEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class PollEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PollEntityP) */ {
 public:
  PollEntityP();
  virtual ~PollEntityP();

  PollEntityP(const PollEntityP& from);
  PollEntityP(PollEntityP&& from) noexcept
    : PollEntityP() {
    *this = ::std::move(from);
  }

  inline PollEntityP& operator=(const PollEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollEntityP& operator=(PollEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PollEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PollEntityP* internal_default_instance() {
    return reinterpret_cast<const PollEntityP*>(
               &_PollEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PollEntityP& a, PollEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(PollEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollEntityP* New() const final {
    return CreateMaybeMessage<PollEntityP>(nullptr);
  }

  PollEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PollEntityP& from);
  void MergeFrom(const PollEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PollEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kEndDatetimeFieldNumber = 2,
    kDurationMinutesFieldNumber = 3,
  };
  // repeated .proto.OptionEntityP options = 1;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  ::proto::OptionEntityP* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionEntityP >*
      mutable_options();
  private:
  const ::proto::OptionEntityP& _internal_options(int index) const;
  ::proto::OptionEntityP* _internal_add_options();
  public:
  const ::proto::OptionEntityP& options(int index) const;
  ::proto::OptionEntityP* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionEntityP >&
      options() const;

  // string endDatetime = 2;
  void clear_enddatetime();
  const std::string& enddatetime() const;
  void set_enddatetime(const std::string& value);
  void set_enddatetime(std::string&& value);
  void set_enddatetime(const char* value);
  void set_enddatetime(const char* value, size_t size);
  std::string* mutable_enddatetime();
  std::string* release_enddatetime();
  void set_allocated_enddatetime(std::string* enddatetime);
  private:
  const std::string& _internal_enddatetime() const;
  void _internal_set_enddatetime(const std::string& value);
  std::string* _internal_mutable_enddatetime();
  public:

  // string durationMinutes = 3;
  void clear_durationminutes();
  const std::string& durationminutes() const;
  void set_durationminutes(const std::string& value);
  void set_durationminutes(std::string&& value);
  void set_durationminutes(const char* value);
  void set_durationminutes(const char* value, size_t size);
  std::string* mutable_durationminutes();
  std::string* release_durationminutes();
  void set_allocated_durationminutes(std::string* durationminutes);
  private:
  const std::string& _internal_durationminutes() const;
  void _internal_set_durationminutes(const std::string& value);
  std::string* _internal_mutable_durationminutes();
  public:

  // @@protoc_insertion_point(class_scope:proto.PollEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionEntityP > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr durationminutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class MediaSizesEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MediaSizesEntityP) */ {
 public:
  MediaSizesEntityP();
  virtual ~MediaSizesEntityP();

  MediaSizesEntityP(const MediaSizesEntityP& from);
  MediaSizesEntityP(MediaSizesEntityP&& from) noexcept
    : MediaSizesEntityP() {
    *this = ::std::move(from);
  }

  inline MediaSizesEntityP& operator=(const MediaSizesEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaSizesEntityP& operator=(MediaSizesEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaSizesEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaSizesEntityP* internal_default_instance() {
    return reinterpret_cast<const MediaSizesEntityP*>(
               &_MediaSizesEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MediaSizesEntityP& a, MediaSizesEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaSizesEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaSizesEntityP* New() const final {
    return CreateMaybeMessage<MediaSizesEntityP>(nullptr);
  }

  MediaSizesEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaSizesEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaSizesEntityP& from);
  void MergeFrom(const MediaSizesEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaSizesEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MediaSizesEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThumbFieldNumber = 1,
    kLargeFieldNumber = 2,
    kMediumFieldNumber = 3,
    kSmallFieldNumber = 4,
  };
  // .proto.SizeEntityP thumb = 1;
  bool has_thumb() const;
  private:
  bool _internal_has_thumb() const;
  public:
  void clear_thumb();
  const ::proto::SizeEntityP& thumb() const;
  ::proto::SizeEntityP* release_thumb();
  ::proto::SizeEntityP* mutable_thumb();
  void set_allocated_thumb(::proto::SizeEntityP* thumb);
  private:
  const ::proto::SizeEntityP& _internal_thumb() const;
  ::proto::SizeEntityP* _internal_mutable_thumb();
  public:

  // .proto.SizeEntityP large = 2;
  bool has_large() const;
  private:
  bool _internal_has_large() const;
  public:
  void clear_large();
  const ::proto::SizeEntityP& large() const;
  ::proto::SizeEntityP* release_large();
  ::proto::SizeEntityP* mutable_large();
  void set_allocated_large(::proto::SizeEntityP* large);
  private:
  const ::proto::SizeEntityP& _internal_large() const;
  ::proto::SizeEntityP* _internal_mutable_large();
  public:

  // .proto.SizeEntityP medium = 3;
  bool has_medium() const;
  private:
  bool _internal_has_medium() const;
  public:
  void clear_medium();
  const ::proto::SizeEntityP& medium() const;
  ::proto::SizeEntityP* release_medium();
  ::proto::SizeEntityP* mutable_medium();
  void set_allocated_medium(::proto::SizeEntityP* medium);
  private:
  const ::proto::SizeEntityP& _internal_medium() const;
  ::proto::SizeEntityP* _internal_mutable_medium();
  public:

  // .proto.SizeEntityP small = 4;
  bool has_small() const;
  private:
  bool _internal_has_small() const;
  public:
  void clear_small();
  const ::proto::SizeEntityP& small() const;
  ::proto::SizeEntityP* release_small();
  ::proto::SizeEntityP* mutable_small();
  void set_allocated_small(::proto::SizeEntityP* small);
  private:
  const ::proto::SizeEntityP& _internal_small() const;
  ::proto::SizeEntityP* _internal_mutable_small();
  public:

  // @@protoc_insertion_point(class_scope:proto.MediaSizesEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::SizeEntityP* thumb_;
  ::proto::SizeEntityP* large_;
  ::proto::SizeEntityP* medium_;
  ::proto::SizeEntityP* small_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class SizeEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SizeEntityP) */ {
 public:
  SizeEntityP();
  virtual ~SizeEntityP();

  SizeEntityP(const SizeEntityP& from);
  SizeEntityP(SizeEntityP&& from) noexcept
    : SizeEntityP() {
    *this = ::std::move(from);
  }

  inline SizeEntityP& operator=(const SizeEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline SizeEntityP& operator=(SizeEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SizeEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SizeEntityP* internal_default_instance() {
    return reinterpret_cast<const SizeEntityP*>(
               &_SizeEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SizeEntityP& a, SizeEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(SizeEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SizeEntityP* New() const final {
    return CreateMaybeMessage<SizeEntityP>(nullptr);
  }

  SizeEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SizeEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SizeEntityP& from);
  void MergeFrom(const SizeEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SizeEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SizeEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResizeFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string resize = 3;
  void clear_resize();
  const std::string& resize() const;
  void set_resize(const std::string& value);
  void set_resize(std::string&& value);
  void set_resize(const char* value);
  void set_resize(const char* value, size_t size);
  std::string* mutable_resize();
  std::string* release_resize();
  void set_allocated_resize(std::string* resize);
  private:
  const std::string& _internal_resize() const;
  void _internal_set_resize(const std::string& value);
  std::string* _internal_mutable_resize();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SizeEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resize_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class VariantEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.VariantEntityP) */ {
 public:
  VariantEntityP();
  virtual ~VariantEntityP();

  VariantEntityP(const VariantEntityP& from);
  VariantEntityP(VariantEntityP&& from) noexcept
    : VariantEntityP() {
    *this = ::std::move(from);
  }

  inline VariantEntityP& operator=(const VariantEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantEntityP& operator=(VariantEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariantEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantEntityP* internal_default_instance() {
    return reinterpret_cast<const VariantEntityP*>(
               &_VariantEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VariantEntityP& a, VariantEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariantEntityP* New() const final {
    return CreateMaybeMessage<VariantEntityP>(nullptr);
  }

  VariantEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantEntityP& from);
  void MergeFrom(const VariantEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.VariantEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 2,
    kUrlFieldNumber = 3,
    kBitrateFieldNumber = 1,
  };
  // string contentType = 2;
  void clear_contenttype();
  const std::string& contenttype() const;
  void set_contenttype(const std::string& value);
  void set_contenttype(std::string&& value);
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  std::string* mutable_contenttype();
  std::string* release_contenttype();
  void set_allocated_contenttype(std::string* contenttype);
  private:
  const std::string& _internal_contenttype() const;
  void _internal_set_contenttype(const std::string& value);
  std::string* _internal_mutable_contenttype();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int64 bitrate = 1;
  void clear_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int64 bitrate() const;
  void set_bitrate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bitrate() const;
  void _internal_set_bitrate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.VariantEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 bitrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class VideoEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.VideoEntityP) */ {
 public:
  VideoEntityP();
  virtual ~VideoEntityP();

  VideoEntityP(const VideoEntityP& from);
  VideoEntityP(VideoEntityP&& from) noexcept
    : VideoEntityP() {
    *this = ::std::move(from);
  }

  inline VideoEntityP& operator=(const VideoEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoEntityP& operator=(VideoEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoEntityP* internal_default_instance() {
    return reinterpret_cast<const VideoEntityP*>(
               &_VideoEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VideoEntityP& a, VideoEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoEntityP* New() const final {
    return CreateMaybeMessage<VideoEntityP>(nullptr);
  }

  VideoEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoEntityP& from);
  void MergeFrom(const VideoEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.VideoEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAspectRatioFieldNumber = 1,
    kVariantsFieldNumber = 3,
    kDurationMillisFieldNumber = 2,
  };
  // repeated int32 aspectRatio = 1;
  int aspectratio_size() const;
  private:
  int _internal_aspectratio_size() const;
  public:
  void clear_aspectratio();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aspectratio(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_aspectratio() const;
  void _internal_add_aspectratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_aspectratio();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 aspectratio(int index) const;
  void set_aspectratio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_aspectratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      aspectratio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_aspectratio();

  // repeated .proto.VariantEntityP variants = 3;
  int variants_size() const;
  private:
  int _internal_variants_size() const;
  public:
  void clear_variants();
  ::proto::VariantEntityP* mutable_variants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::VariantEntityP >*
      mutable_variants();
  private:
  const ::proto::VariantEntityP& _internal_variants(int index) const;
  ::proto::VariantEntityP* _internal_add_variants();
  public:
  const ::proto::VariantEntityP& variants(int index) const;
  ::proto::VariantEntityP* add_variants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::VariantEntityP >&
      variants() const;

  // int32 durationMillis = 2;
  void clear_durationmillis();
  ::PROTOBUF_NAMESPACE_ID::int32 durationmillis() const;
  void set_durationmillis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_durationmillis() const;
  void _internal_set_durationmillis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.VideoEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > aspectratio_;
  mutable std::atomic<int> _aspectratio_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::VariantEntityP > variants_;
  ::PROTOBUF_NAMESPACE_ID::int32 durationmillis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class AdditionalMediaInfoEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AdditionalMediaInfoEntityP) */ {
 public:
  AdditionalMediaInfoEntityP();
  virtual ~AdditionalMediaInfoEntityP();

  AdditionalMediaInfoEntityP(const AdditionalMediaInfoEntityP& from);
  AdditionalMediaInfoEntityP(AdditionalMediaInfoEntityP&& from) noexcept
    : AdditionalMediaInfoEntityP() {
    *this = ::std::move(from);
  }

  inline AdditionalMediaInfoEntityP& operator=(const AdditionalMediaInfoEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdditionalMediaInfoEntityP& operator=(AdditionalMediaInfoEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdditionalMediaInfoEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdditionalMediaInfoEntityP* internal_default_instance() {
    return reinterpret_cast<const AdditionalMediaInfoEntityP*>(
               &_AdditionalMediaInfoEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AdditionalMediaInfoEntityP& a, AdditionalMediaInfoEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(AdditionalMediaInfoEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdditionalMediaInfoEntityP* New() const final {
    return CreateMaybeMessage<AdditionalMediaInfoEntityP>(nullptr);
  }

  AdditionalMediaInfoEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdditionalMediaInfoEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdditionalMediaInfoEntityP& from);
  void MergeFrom(const AdditionalMediaInfoEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdditionalMediaInfoEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AdditionalMediaInfoEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kEmbeddableFieldNumber = 3,
    kMonetizableFieldNumber = 4,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool embeddable = 3;
  void clear_embeddable();
  bool embeddable() const;
  void set_embeddable(bool value);
  private:
  bool _internal_embeddable() const;
  void _internal_set_embeddable(bool value);
  public:

  // bool monetizable = 4;
  void clear_monetizable();
  bool monetizable() const;
  void set_monetizable(bool value);
  private:
  bool _internal_monetizable() const;
  void _internal_set_monetizable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.AdditionalMediaInfoEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool embeddable_;
  bool monetizable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class OptionEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.OptionEntityP) */ {
 public:
  OptionEntityP();
  virtual ~OptionEntityP();

  OptionEntityP(const OptionEntityP& from);
  OptionEntityP(OptionEntityP&& from) noexcept
    : OptionEntityP() {
    *this = ::std::move(from);
  }

  inline OptionEntityP& operator=(const OptionEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionEntityP& operator=(OptionEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionEntityP* internal_default_instance() {
    return reinterpret_cast<const OptionEntityP*>(
               &_OptionEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OptionEntityP& a, OptionEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionEntityP* New() const final {
    return CreateMaybeMessage<OptionEntityP>(nullptr);
  }

  OptionEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionEntityP& from);
  void MergeFrom(const OptionEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.OptionEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kPositionFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.OptionEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class MatchingRulesEntityP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MatchingRulesEntityP) */ {
 public:
  MatchingRulesEntityP();
  virtual ~MatchingRulesEntityP();

  MatchingRulesEntityP(const MatchingRulesEntityP& from);
  MatchingRulesEntityP(MatchingRulesEntityP&& from) noexcept
    : MatchingRulesEntityP() {
    *this = ::std::move(from);
  }

  inline MatchingRulesEntityP& operator=(const MatchingRulesEntityP& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchingRulesEntityP& operator=(MatchingRulesEntityP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchingRulesEntityP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchingRulesEntityP* internal_default_instance() {
    return reinterpret_cast<const MatchingRulesEntityP*>(
               &_MatchingRulesEntityP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MatchingRulesEntityP& a, MatchingRulesEntityP& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchingRulesEntityP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchingRulesEntityP* New() const final {
    return CreateMaybeMessage<MatchingRulesEntityP>(nullptr);
  }

  MatchingRulesEntityP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchingRulesEntityP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchingRulesEntityP& from);
  void MergeFrom(const MatchingRulesEntityP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchingRulesEntityP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MatchingRulesEntityP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kIdStrFieldNumber = 3,
    kIdFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string idStr = 3;
  void clear_idstr();
  const std::string& idstr() const;
  void set_idstr(const std::string& value);
  void set_idstr(std::string&& value);
  void set_idstr(const char* value);
  void set_idstr(const char* value, size_t size);
  std::string* mutable_idstr();
  std::string* release_idstr();
  void set_allocated_idstr(std::string* idstr);
  private:
  const std::string& _internal_idstr() const;
  void _internal_set_idstr(const std::string& value);
  std::string* _internal_mutable_idstr();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.MatchingRulesEntityP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idstr_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// -------------------------------------------------------------------

class MapFieldEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MapFieldEntry) */ {
 public:
  MapFieldEntry();
  virtual ~MapFieldEntry();

  MapFieldEntry(const MapFieldEntry& from);
  MapFieldEntry(MapFieldEntry&& from) noexcept
    : MapFieldEntry() {
    *this = ::std::move(from);
  }

  inline MapFieldEntry& operator=(const MapFieldEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapFieldEntry& operator=(MapFieldEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapFieldEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapFieldEntry* internal_default_instance() {
    return reinterpret_cast<const MapFieldEntry*>(
               &_MapFieldEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MapFieldEntry& a, MapFieldEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapFieldEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapFieldEntry* New() const final {
    return CreateMaybeMessage<MapFieldEntry>(nullptr);
  }

  MapFieldEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapFieldEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapFieldEntry& from);
  void MergeFrom(const MapFieldEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapFieldEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MapFieldEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TweetStatusP_2eproto);
    return ::descriptor_table_TweetStatusP_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bool value = 2;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.MapFieldEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TweetStatusP_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TweetStatusP_UserP

// int64 id = 1;
inline void TweetStatusP_UserP::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP_UserP::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP_UserP::id() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.id)
  return _internal_id();
}
inline void TweetStatusP_UserP::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void TweetStatusP_UserP::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.id)
}

// string name = 2;
inline void TweetStatusP_UserP::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::name() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.name)
  return _internal_name();
}
inline void TweetStatusP_UserP::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.name)
}
inline std::string* TweetStatusP_UserP::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.name)
  return _internal_mutable_name();
}
inline const std::string& TweetStatusP_UserP::_internal_name() const {
  return name_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.name)
}
inline void TweetStatusP_UserP::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.name)
}
inline void TweetStatusP_UserP::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.name)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_name() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.name)
}

// string screenName = 3;
inline void TweetStatusP_UserP::clear_screenname() {
  screenname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::screenname() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.screenName)
  return _internal_screenname();
}
inline void TweetStatusP_UserP::set_screenname(const std::string& value) {
  _internal_set_screenname(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.screenName)
}
inline std::string* TweetStatusP_UserP::mutable_screenname() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.screenName)
  return _internal_mutable_screenname();
}
inline const std::string& TweetStatusP_UserP::_internal_screenname() const {
  return screenname_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_screenname(const std::string& value) {
  
  screenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_screenname(std::string&& value) {
  
  screenname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.screenName)
}
inline void TweetStatusP_UserP::set_screenname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  screenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.screenName)
}
inline void TweetStatusP_UserP::set_screenname(const char* value, size_t size) {
  
  screenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.screenName)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_screenname() {
  
  return screenname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_screenname() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.screenName)
  
  return screenname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_screenname(std::string* screenname) {
  if (screenname != nullptr) {
    
  } else {
    
  }
  screenname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), screenname);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.screenName)
}

// string location = 4;
inline void TweetStatusP_UserP::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::location() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.location)
  return _internal_location();
}
inline void TweetStatusP_UserP::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.location)
}
inline std::string* TweetStatusP_UserP::mutable_location() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.location)
  return _internal_mutable_location();
}
inline const std::string& TweetStatusP_UserP::_internal_location() const {
  return location_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_location(const std::string& value) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_location(std::string&& value) {
  
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.location)
}
inline void TweetStatusP_UserP::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.location)
}
inline void TweetStatusP_UserP::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.location)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_location() {
  
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_location() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.location)
  
  return location_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.location)
}

// string url = 5;
inline void TweetStatusP_UserP::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::url() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.url)
  return _internal_url();
}
inline void TweetStatusP_UserP::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.url)
}
inline std::string* TweetStatusP_UserP::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.url)
  return _internal_mutable_url();
}
inline const std::string& TweetStatusP_UserP::_internal_url() const {
  return url_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.url)
}
inline void TweetStatusP_UserP::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.url)
}
inline void TweetStatusP_UserP::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.url)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_url() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.url)
}

// string description = 6;
inline void TweetStatusP_UserP::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::description() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.description)
  return _internal_description();
}
inline void TweetStatusP_UserP::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.description)
}
inline std::string* TweetStatusP_UserP::mutable_description() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.description)
  return _internal_mutable_description();
}
inline const std::string& TweetStatusP_UserP::_internal_description() const {
  return description_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.description)
}
inline void TweetStatusP_UserP::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.description)
}
inline void TweetStatusP_UserP::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.description)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_description() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.description)
}

// bool isProtected = 7;
inline void TweetStatusP_UserP::clear_isprotected() {
  isprotected_ = false;
}
inline bool TweetStatusP_UserP::_internal_isprotected() const {
  return isprotected_;
}
inline bool TweetStatusP_UserP::isprotected() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isProtected)
  return _internal_isprotected();
}
inline void TweetStatusP_UserP::_internal_set_isprotected(bool value) {
  
  isprotected_ = value;
}
inline void TweetStatusP_UserP::set_isprotected(bool value) {
  _internal_set_isprotected(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isProtected)
}

// bool isVerified = 8;
inline void TweetStatusP_UserP::clear_isverified() {
  isverified_ = false;
}
inline bool TweetStatusP_UserP::_internal_isverified() const {
  return isverified_;
}
inline bool TweetStatusP_UserP::isverified() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isVerified)
  return _internal_isverified();
}
inline void TweetStatusP_UserP::_internal_set_isverified(bool value) {
  
  isverified_ = value;
}
inline void TweetStatusP_UserP::set_isverified(bool value) {
  _internal_set_isverified(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isVerified)
}

// int32 followersCount = 9;
inline void TweetStatusP_UserP::clear_followerscount() {
  followerscount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::_internal_followerscount() const {
  return followerscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::followerscount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.followersCount)
  return _internal_followerscount();
}
inline void TweetStatusP_UserP::_internal_set_followerscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  followerscount_ = value;
}
inline void TweetStatusP_UserP::set_followerscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_followerscount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.followersCount)
}

// int32 friendsCount = 10;
inline void TweetStatusP_UserP::clear_friendscount() {
  friendscount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::_internal_friendscount() const {
  return friendscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::friendscount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.friendsCount)
  return _internal_friendscount();
}
inline void TweetStatusP_UserP::_internal_set_friendscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friendscount_ = value;
}
inline void TweetStatusP_UserP::set_friendscount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friendscount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.friendsCount)
}

// int32 listedCount = 11;
inline void TweetStatusP_UserP::clear_listedcount() {
  listedcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::_internal_listedcount() const {
  return listedcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::listedcount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.listedCount)
  return _internal_listedcount();
}
inline void TweetStatusP_UserP::_internal_set_listedcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listedcount_ = value;
}
inline void TweetStatusP_UserP::set_listedcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listedcount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.listedCount)
}

// int32 favouritesCount = 12;
inline void TweetStatusP_UserP::clear_favouritescount() {
  favouritescount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::_internal_favouritescount() const {
  return favouritescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::favouritescount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.favouritesCount)
  return _internal_favouritescount();
}
inline void TweetStatusP_UserP::_internal_set_favouritescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  favouritescount_ = value;
}
inline void TweetStatusP_UserP::set_favouritescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_favouritescount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.favouritesCount)
}

// int32 statusesCount = 13;
inline void TweetStatusP_UserP::clear_statusescount() {
  statusescount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::_internal_statusescount() const {
  return statusescount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::statusescount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.statusesCount)
  return _internal_statusescount();
}
inline void TweetStatusP_UserP::_internal_set_statusescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statusescount_ = value;
}
inline void TweetStatusP_UserP::set_statusescount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statusescount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.statusesCount)
}

// string createdAt = 14;
inline void TweetStatusP_UserP::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::createdat() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.createdAt)
  return _internal_createdat();
}
inline void TweetStatusP_UserP::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.createdAt)
}
inline std::string* TweetStatusP_UserP::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& TweetStatusP_UserP::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.createdAt)
}
inline void TweetStatusP_UserP::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.createdAt)
}
inline void TweetStatusP_UserP::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.createdAt)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_createdat() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.createdAt)
}

// string profileBannerImageUrl = 15;
inline void TweetStatusP_UserP::clear_profilebannerimageurl() {
  profilebannerimageurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilebannerimageurl() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileBannerImageUrl)
  return _internal_profilebannerimageurl();
}
inline void TweetStatusP_UserP::set_profilebannerimageurl(const std::string& value) {
  _internal_set_profilebannerimageurl(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileBannerImageUrl)
}
inline std::string* TweetStatusP_UserP::mutable_profilebannerimageurl() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileBannerImageUrl)
  return _internal_mutable_profilebannerimageurl();
}
inline const std::string& TweetStatusP_UserP::_internal_profilebannerimageurl() const {
  return profilebannerimageurl_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilebannerimageurl(const std::string& value) {
  
  profilebannerimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilebannerimageurl(std::string&& value) {
  
  profilebannerimageurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileBannerImageUrl)
}
inline void TweetStatusP_UserP::set_profilebannerimageurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilebannerimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileBannerImageUrl)
}
inline void TweetStatusP_UserP::set_profilebannerimageurl(const char* value, size_t size) {
  
  profilebannerimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileBannerImageUrl)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilebannerimageurl() {
  
  return profilebannerimageurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilebannerimageurl() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileBannerImageUrl)
  
  return profilebannerimageurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilebannerimageurl(std::string* profilebannerimageurl) {
  if (profilebannerimageurl != nullptr) {
    
  } else {
    
  }
  profilebannerimageurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilebannerimageurl);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileBannerImageUrl)
}

// string profileImageUrlHttps = 16;
inline void TweetStatusP_UserP::clear_profileimageurlhttps() {
  profileimageurlhttps_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profileimageurlhttps() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileImageUrlHttps)
  return _internal_profileimageurlhttps();
}
inline void TweetStatusP_UserP::set_profileimageurlhttps(const std::string& value) {
  _internal_set_profileimageurlhttps(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileImageUrlHttps)
}
inline std::string* TweetStatusP_UserP::mutable_profileimageurlhttps() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileImageUrlHttps)
  return _internal_mutable_profileimageurlhttps();
}
inline const std::string& TweetStatusP_UserP::_internal_profileimageurlhttps() const {
  return profileimageurlhttps_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profileimageurlhttps(const std::string& value) {
  
  profileimageurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profileimageurlhttps(std::string&& value) {
  
  profileimageurlhttps_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileImageUrlHttps)
}
inline void TweetStatusP_UserP::set_profileimageurlhttps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profileimageurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileImageUrlHttps)
}
inline void TweetStatusP_UserP::set_profileimageurlhttps(const char* value, size_t size) {
  
  profileimageurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileImageUrlHttps)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profileimageurlhttps() {
  
  return profileimageurlhttps_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profileimageurlhttps() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileImageUrlHttps)
  
  return profileimageurlhttps_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profileimageurlhttps(std::string* profileimageurlhttps) {
  if (profileimageurlhttps != nullptr) {
    
  } else {
    
  }
  profileimageurlhttps_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profileimageurlhttps);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileImageUrlHttps)
}

// bool isDefaultProfile = 17;
inline void TweetStatusP_UserP::clear_isdefaultprofile() {
  isdefaultprofile_ = false;
}
inline bool TweetStatusP_UserP::_internal_isdefaultprofile() const {
  return isdefaultprofile_;
}
inline bool TweetStatusP_UserP::isdefaultprofile() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isDefaultProfile)
  return _internal_isdefaultprofile();
}
inline void TweetStatusP_UserP::_internal_set_isdefaultprofile(bool value) {
  
  isdefaultprofile_ = value;
}
inline void TweetStatusP_UserP::set_isdefaultprofile(bool value) {
  _internal_set_isdefaultprofile(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isDefaultProfile)
}

// repeated string withheldInCountries = 18;
inline int TweetStatusP_UserP::_internal_withheldincountries_size() const {
  return withheldincountries_.size();
}
inline int TweetStatusP_UserP::withheldincountries_size() const {
  return _internal_withheldincountries_size();
}
inline void TweetStatusP_UserP::clear_withheldincountries() {
  withheldincountries_.Clear();
}
inline std::string* TweetStatusP_UserP::add_withheldincountries() {
  // @@protoc_insertion_point(field_add_mutable:proto.TweetStatusP.UserP.withheldInCountries)
  return _internal_add_withheldincountries();
}
inline const std::string& TweetStatusP_UserP::_internal_withheldincountries(int index) const {
  return withheldincountries_.Get(index);
}
inline const std::string& TweetStatusP_UserP::withheldincountries(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.withheldInCountries)
  return _internal_withheldincountries(index);
}
inline std::string* TweetStatusP_UserP::mutable_withheldincountries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.withheldInCountries)
  return withheldincountries_.Mutable(index);
}
inline void TweetStatusP_UserP::set_withheldincountries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.withheldInCountries)
  withheldincountries_.Mutable(index)->assign(value);
}
inline void TweetStatusP_UserP::set_withheldincountries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.withheldInCountries)
  withheldincountries_.Mutable(index)->assign(std::move(value));
}
inline void TweetStatusP_UserP::set_withheldincountries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  withheldincountries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.withheldInCountries)
}
inline void TweetStatusP_UserP::set_withheldincountries(int index, const char* value, size_t size) {
  withheldincountries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.withheldInCountries)
}
inline std::string* TweetStatusP_UserP::_internal_add_withheldincountries() {
  return withheldincountries_.Add();
}
inline void TweetStatusP_UserP::add_withheldincountries(const std::string& value) {
  withheldincountries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.UserP.withheldInCountries)
}
inline void TweetStatusP_UserP::add_withheldincountries(std::string&& value) {
  withheldincountries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.UserP.withheldInCountries)
}
inline void TweetStatusP_UserP::add_withheldincountries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  withheldincountries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.TweetStatusP.UserP.withheldInCountries)
}
inline void TweetStatusP_UserP::add_withheldincountries(const char* value, size_t size) {
  withheldincountries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.TweetStatusP.UserP.withheldInCountries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TweetStatusP_UserP::withheldincountries() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.UserP.withheldInCountries)
  return withheldincountries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TweetStatusP_UserP::mutable_withheldincountries() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.UserP.withheldInCountries)
  return &withheldincountries_;
}

// string withheldScope = 19;
inline void TweetStatusP_UserP::clear_withheldscope() {
  withheldscope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::withheldscope() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.withheldScope)
  return _internal_withheldscope();
}
inline void TweetStatusP_UserP::set_withheldscope(const std::string& value) {
  _internal_set_withheldscope(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.withheldScope)
}
inline std::string* TweetStatusP_UserP::mutable_withheldscope() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.withheldScope)
  return _internal_mutable_withheldscope();
}
inline const std::string& TweetStatusP_UserP::_internal_withheldscope() const {
  return withheldscope_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_withheldscope(const std::string& value) {
  
  withheldscope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_withheldscope(std::string&& value) {
  
  withheldscope_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.withheldScope)
}
inline void TweetStatusP_UserP::set_withheldscope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  withheldscope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.withheldScope)
}
inline void TweetStatusP_UserP::set_withheldscope(const char* value, size_t size) {
  
  withheldscope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.withheldScope)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_withheldscope() {
  
  return withheldscope_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_withheldscope() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.withheldScope)
  
  return withheldscope_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_withheldscope(std::string* withheldscope) {
  if (withheldscope != nullptr) {
    
  } else {
    
  }
  withheldscope_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), withheldscope);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.withheldScope)
}

// .proto.URLEntityP descriptionURLEntities = 20;
inline bool TweetStatusP_UserP::_internal_has_descriptionurlentities() const {
  return this != internal_default_instance() && descriptionurlentities_ != nullptr;
}
inline bool TweetStatusP_UserP::has_descriptionurlentities() const {
  return _internal_has_descriptionurlentities();
}
inline void TweetStatusP_UserP::clear_descriptionurlentities() {
  if (GetArenaNoVirtual() == nullptr && descriptionurlentities_ != nullptr) {
    delete descriptionurlentities_;
  }
  descriptionurlentities_ = nullptr;
}
inline const ::proto::URLEntityP& TweetStatusP_UserP::_internal_descriptionurlentities() const {
  const ::proto::URLEntityP* p = descriptionurlentities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::URLEntityP*>(
      &::proto::_URLEntityP_default_instance_);
}
inline const ::proto::URLEntityP& TweetStatusP_UserP::descriptionurlentities() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.descriptionURLEntities)
  return _internal_descriptionurlentities();
}
inline ::proto::URLEntityP* TweetStatusP_UserP::release_descriptionurlentities() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.descriptionURLEntities)
  
  ::proto::URLEntityP* temp = descriptionurlentities_;
  descriptionurlentities_ = nullptr;
  return temp;
}
inline ::proto::URLEntityP* TweetStatusP_UserP::_internal_mutable_descriptionurlentities() {
  
  if (descriptionurlentities_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::URLEntityP>(GetArenaNoVirtual());
    descriptionurlentities_ = p;
  }
  return descriptionurlentities_;
}
inline ::proto::URLEntityP* TweetStatusP_UserP::mutable_descriptionurlentities() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.descriptionURLEntities)
  return _internal_mutable_descriptionurlentities();
}
inline void TweetStatusP_UserP::set_allocated_descriptionurlentities(::proto::URLEntityP* descriptionurlentities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete descriptionurlentities_;
  }
  if (descriptionurlentities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      descriptionurlentities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, descriptionurlentities, submessage_arena);
    }
    
  } else {
    
  }
  descriptionurlentities_ = descriptionurlentities;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.descriptionURLEntities)
}

// bool isGeoEnabled = 21;
inline void TweetStatusP_UserP::clear_isgeoenabled() {
  isgeoenabled_ = false;
}
inline bool TweetStatusP_UserP::_internal_isgeoenabled() const {
  return isgeoenabled_;
}
inline bool TweetStatusP_UserP::isgeoenabled() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isGeoEnabled)
  return _internal_isgeoenabled();
}
inline void TweetStatusP_UserP::_internal_set_isgeoenabled(bool value) {
  
  isgeoenabled_ = value;
}
inline void TweetStatusP_UserP::set_isgeoenabled(bool value) {
  _internal_set_isgeoenabled(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isGeoEnabled)
}

// string lang = 22;
inline void TweetStatusP_UserP::clear_lang() {
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::lang() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.lang)
  return _internal_lang();
}
inline void TweetStatusP_UserP::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.lang)
}
inline std::string* TweetStatusP_UserP::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.lang)
  return _internal_mutable_lang();
}
inline const std::string& TweetStatusP_UserP::_internal_lang() const {
  return lang_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_lang(const std::string& value) {
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_lang(std::string&& value) {
  
  lang_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.lang)
}
inline void TweetStatusP_UserP::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.lang)
}
inline void TweetStatusP_UserP::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.lang)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_lang() {
  
  return lang_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_lang() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.lang)
  
  return lang_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.lang)
}

// bool isContributorsEnabled = 23;
inline void TweetStatusP_UserP::clear_iscontributorsenabled() {
  iscontributorsenabled_ = false;
}
inline bool TweetStatusP_UserP::_internal_iscontributorsenabled() const {
  return iscontributorsenabled_;
}
inline bool TweetStatusP_UserP::iscontributorsenabled() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isContributorsEnabled)
  return _internal_iscontributorsenabled();
}
inline void TweetStatusP_UserP::_internal_set_iscontributorsenabled(bool value) {
  
  iscontributorsenabled_ = value;
}
inline void TweetStatusP_UserP::set_iscontributorsenabled(bool value) {
  _internal_set_iscontributorsenabled(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isContributorsEnabled)
}

// string profileBackgroundColor = 24;
inline void TweetStatusP_UserP::clear_profilebackgroundcolor() {
  profilebackgroundcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileBackgroundColor)
  return _internal_profilebackgroundcolor();
}
inline void TweetStatusP_UserP::set_profilebackgroundcolor(const std::string& value) {
  _internal_set_profilebackgroundcolor(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileBackgroundColor)
}
inline std::string* TweetStatusP_UserP::mutable_profilebackgroundcolor() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileBackgroundColor)
  return _internal_mutable_profilebackgroundcolor();
}
inline const std::string& TweetStatusP_UserP::_internal_profilebackgroundcolor() const {
  return profilebackgroundcolor_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilebackgroundcolor(const std::string& value) {
  
  profilebackgroundcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilebackgroundcolor(std::string&& value) {
  
  profilebackgroundcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileBackgroundColor)
}
inline void TweetStatusP_UserP::set_profilebackgroundcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilebackgroundcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileBackgroundColor)
}
inline void TweetStatusP_UserP::set_profilebackgroundcolor(const char* value, size_t size) {
  
  profilebackgroundcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileBackgroundColor)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilebackgroundcolor() {
  
  return profilebackgroundcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilebackgroundcolor() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileBackgroundColor)
  
  return profilebackgroundcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilebackgroundcolor(std::string* profilebackgroundcolor) {
  if (profilebackgroundcolor != nullptr) {
    
  } else {
    
  }
  profilebackgroundcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilebackgroundcolor);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileBackgroundColor)
}

// string profileBackgroundImageUrl = 25;
inline void TweetStatusP_UserP::clear_profilebackgroundimageurl() {
  profilebackgroundimageurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilebackgroundimageurl() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
  return _internal_profilebackgroundimageurl();
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurl(const std::string& value) {
  _internal_set_profilebackgroundimageurl(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
}
inline std::string* TweetStatusP_UserP::mutable_profilebackgroundimageurl() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
  return _internal_mutable_profilebackgroundimageurl();
}
inline const std::string& TweetStatusP_UserP::_internal_profilebackgroundimageurl() const {
  return profilebackgroundimageurl_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilebackgroundimageurl(const std::string& value) {
  
  profilebackgroundimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurl(std::string&& value) {
  
  profilebackgroundimageurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilebackgroundimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurl(const char* value, size_t size) {
  
  profilebackgroundimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilebackgroundimageurl() {
  
  return profilebackgroundimageurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilebackgroundimageurl() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
  
  return profilebackgroundimageurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilebackgroundimageurl(std::string* profilebackgroundimageurl) {
  if (profilebackgroundimageurl != nullptr) {
    
  } else {
    
  }
  profilebackgroundimageurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilebackgroundimageurl);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileBackgroundImageUrl)
}

// string profileBackgroundImageUrlHttps = 26;
inline void TweetStatusP_UserP::clear_profilebackgroundimageurlhttps() {
  profilebackgroundimageurlhttps_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilebackgroundimageurlhttps() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
  return _internal_profilebackgroundimageurlhttps();
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurlhttps(const std::string& value) {
  _internal_set_profilebackgroundimageurlhttps(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
}
inline std::string* TweetStatusP_UserP::mutable_profilebackgroundimageurlhttps() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
  return _internal_mutable_profilebackgroundimageurlhttps();
}
inline const std::string& TweetStatusP_UserP::_internal_profilebackgroundimageurlhttps() const {
  return profilebackgroundimageurlhttps_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilebackgroundimageurlhttps(const std::string& value) {
  
  profilebackgroundimageurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurlhttps(std::string&& value) {
  
  profilebackgroundimageurlhttps_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurlhttps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilebackgroundimageurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
}
inline void TweetStatusP_UserP::set_profilebackgroundimageurlhttps(const char* value, size_t size) {
  
  profilebackgroundimageurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilebackgroundimageurlhttps() {
  
  return profilebackgroundimageurlhttps_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilebackgroundimageurlhttps() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
  
  return profilebackgroundimageurlhttps_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilebackgroundimageurlhttps(std::string* profilebackgroundimageurlhttps) {
  if (profilebackgroundimageurlhttps != nullptr) {
    
  } else {
    
  }
  profilebackgroundimageurlhttps_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilebackgroundimageurlhttps);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileBackgroundImageUrlHttps)
}

// bool profileBackgroundTiled = 27;
inline void TweetStatusP_UserP::clear_profilebackgroundtiled() {
  profilebackgroundtiled_ = false;
}
inline bool TweetStatusP_UserP::_internal_profilebackgroundtiled() const {
  return profilebackgroundtiled_;
}
inline bool TweetStatusP_UserP::profilebackgroundtiled() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileBackgroundTiled)
  return _internal_profilebackgroundtiled();
}
inline void TweetStatusP_UserP::_internal_set_profilebackgroundtiled(bool value) {
  
  profilebackgroundtiled_ = value;
}
inline void TweetStatusP_UserP::set_profilebackgroundtiled(bool value) {
  _internal_set_profilebackgroundtiled(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileBackgroundTiled)
}

// string profileImageUrl = 28;
inline void TweetStatusP_UserP::clear_profileimageurl() {
  profileimageurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profileimageurl() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileImageUrl)
  return _internal_profileimageurl();
}
inline void TweetStatusP_UserP::set_profileimageurl(const std::string& value) {
  _internal_set_profileimageurl(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileImageUrl)
}
inline std::string* TweetStatusP_UserP::mutable_profileimageurl() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileImageUrl)
  return _internal_mutable_profileimageurl();
}
inline const std::string& TweetStatusP_UserP::_internal_profileimageurl() const {
  return profileimageurl_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profileimageurl(const std::string& value) {
  
  profileimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profileimageurl(std::string&& value) {
  
  profileimageurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileImageUrl)
}
inline void TweetStatusP_UserP::set_profileimageurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profileimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileImageUrl)
}
inline void TweetStatusP_UserP::set_profileimageurl(const char* value, size_t size) {
  
  profileimageurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileImageUrl)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profileimageurl() {
  
  return profileimageurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profileimageurl() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileImageUrl)
  
  return profileimageurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profileimageurl(std::string* profileimageurl) {
  if (profileimageurl != nullptr) {
    
  } else {
    
  }
  profileimageurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profileimageurl);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileImageUrl)
}

// string profileLinkColor = 29;
inline void TweetStatusP_UserP::clear_profilelinkcolor() {
  profilelinkcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilelinkcolor() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileLinkColor)
  return _internal_profilelinkcolor();
}
inline void TweetStatusP_UserP::set_profilelinkcolor(const std::string& value) {
  _internal_set_profilelinkcolor(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileLinkColor)
}
inline std::string* TweetStatusP_UserP::mutable_profilelinkcolor() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileLinkColor)
  return _internal_mutable_profilelinkcolor();
}
inline const std::string& TweetStatusP_UserP::_internal_profilelinkcolor() const {
  return profilelinkcolor_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilelinkcolor(const std::string& value) {
  
  profilelinkcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilelinkcolor(std::string&& value) {
  
  profilelinkcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileLinkColor)
}
inline void TweetStatusP_UserP::set_profilelinkcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilelinkcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileLinkColor)
}
inline void TweetStatusP_UserP::set_profilelinkcolor(const char* value, size_t size) {
  
  profilelinkcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileLinkColor)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilelinkcolor() {
  
  return profilelinkcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilelinkcolor() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileLinkColor)
  
  return profilelinkcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilelinkcolor(std::string* profilelinkcolor) {
  if (profilelinkcolor != nullptr) {
    
  } else {
    
  }
  profilelinkcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilelinkcolor);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileLinkColor)
}

// string profileSidebarBorderColor = 30;
inline void TweetStatusP_UserP::clear_profilesidebarbordercolor() {
  profilesidebarbordercolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilesidebarbordercolor() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileSidebarBorderColor)
  return _internal_profilesidebarbordercolor();
}
inline void TweetStatusP_UserP::set_profilesidebarbordercolor(const std::string& value) {
  _internal_set_profilesidebarbordercolor(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileSidebarBorderColor)
}
inline std::string* TweetStatusP_UserP::mutable_profilesidebarbordercolor() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileSidebarBorderColor)
  return _internal_mutable_profilesidebarbordercolor();
}
inline const std::string& TweetStatusP_UserP::_internal_profilesidebarbordercolor() const {
  return profilesidebarbordercolor_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilesidebarbordercolor(const std::string& value) {
  
  profilesidebarbordercolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilesidebarbordercolor(std::string&& value) {
  
  profilesidebarbordercolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileSidebarBorderColor)
}
inline void TweetStatusP_UserP::set_profilesidebarbordercolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilesidebarbordercolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileSidebarBorderColor)
}
inline void TweetStatusP_UserP::set_profilesidebarbordercolor(const char* value, size_t size) {
  
  profilesidebarbordercolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileSidebarBorderColor)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilesidebarbordercolor() {
  
  return profilesidebarbordercolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilesidebarbordercolor() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileSidebarBorderColor)
  
  return profilesidebarbordercolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilesidebarbordercolor(std::string* profilesidebarbordercolor) {
  if (profilesidebarbordercolor != nullptr) {
    
  } else {
    
  }
  profilesidebarbordercolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilesidebarbordercolor);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileSidebarBorderColor)
}

// string profileSidebarFillColor = 31;
inline void TweetStatusP_UserP::clear_profilesidebarfillcolor() {
  profilesidebarfillcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profilesidebarfillcolor() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileSidebarFillColor)
  return _internal_profilesidebarfillcolor();
}
inline void TweetStatusP_UserP::set_profilesidebarfillcolor(const std::string& value) {
  _internal_set_profilesidebarfillcolor(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileSidebarFillColor)
}
inline std::string* TweetStatusP_UserP::mutable_profilesidebarfillcolor() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileSidebarFillColor)
  return _internal_mutable_profilesidebarfillcolor();
}
inline const std::string& TweetStatusP_UserP::_internal_profilesidebarfillcolor() const {
  return profilesidebarfillcolor_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profilesidebarfillcolor(const std::string& value) {
  
  profilesidebarfillcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profilesidebarfillcolor(std::string&& value) {
  
  profilesidebarfillcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileSidebarFillColor)
}
inline void TweetStatusP_UserP::set_profilesidebarfillcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profilesidebarfillcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileSidebarFillColor)
}
inline void TweetStatusP_UserP::set_profilesidebarfillcolor(const char* value, size_t size) {
  
  profilesidebarfillcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileSidebarFillColor)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profilesidebarfillcolor() {
  
  return profilesidebarfillcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profilesidebarfillcolor() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileSidebarFillColor)
  
  return profilesidebarfillcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profilesidebarfillcolor(std::string* profilesidebarfillcolor) {
  if (profilesidebarfillcolor != nullptr) {
    
  } else {
    
  }
  profilesidebarfillcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profilesidebarfillcolor);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileSidebarFillColor)
}

// string profileTextColor = 32;
inline void TweetStatusP_UserP::clear_profiletextcolor() {
  profiletextcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::profiletextcolor() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileTextColor)
  return _internal_profiletextcolor();
}
inline void TweetStatusP_UserP::set_profiletextcolor(const std::string& value) {
  _internal_set_profiletextcolor(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileTextColor)
}
inline std::string* TweetStatusP_UserP::mutable_profiletextcolor() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.profileTextColor)
  return _internal_mutable_profiletextcolor();
}
inline const std::string& TweetStatusP_UserP::_internal_profiletextcolor() const {
  return profiletextcolor_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_profiletextcolor(const std::string& value) {
  
  profiletextcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_profiletextcolor(std::string&& value) {
  
  profiletextcolor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.profileTextColor)
}
inline void TweetStatusP_UserP::set_profiletextcolor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profiletextcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.profileTextColor)
}
inline void TweetStatusP_UserP::set_profiletextcolor(const char* value, size_t size) {
  
  profiletextcolor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.profileTextColor)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_profiletextcolor() {
  
  return profiletextcolor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_profiletextcolor() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.profileTextColor)
  
  return profiletextcolor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_profiletextcolor(std::string* profiletextcolor) {
  if (profiletextcolor != nullptr) {
    
  } else {
    
  }
  profiletextcolor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profiletextcolor);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.profileTextColor)
}

// bool profileUseBackgroundImage = 33;
inline void TweetStatusP_UserP::clear_profileusebackgroundimage() {
  profileusebackgroundimage_ = false;
}
inline bool TweetStatusP_UserP::_internal_profileusebackgroundimage() const {
  return profileusebackgroundimage_;
}
inline bool TweetStatusP_UserP::profileusebackgroundimage() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.profileUseBackgroundImage)
  return _internal_profileusebackgroundimage();
}
inline void TweetStatusP_UserP::_internal_set_profileusebackgroundimage(bool value) {
  
  profileusebackgroundimage_ = value;
}
inline void TweetStatusP_UserP::set_profileusebackgroundimage(bool value) {
  _internal_set_profileusebackgroundimage(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.profileUseBackgroundImage)
}

// bool isDefaultProfileImage = 34;
inline void TweetStatusP_UserP::clear_isdefaultprofileimage() {
  isdefaultprofileimage_ = false;
}
inline bool TweetStatusP_UserP::_internal_isdefaultprofileimage() const {
  return isdefaultprofileimage_;
}
inline bool TweetStatusP_UserP::isdefaultprofileimage() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isDefaultProfileImage)
  return _internal_isdefaultprofileimage();
}
inline void TweetStatusP_UserP::_internal_set_isdefaultprofileimage(bool value) {
  
  isdefaultprofileimage_ = value;
}
inline void TweetStatusP_UserP::set_isdefaultprofileimage(bool value) {
  _internal_set_isdefaultprofileimage(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isDefaultProfileImage)
}

// int32 utcOffset = 35;
inline void TweetStatusP_UserP::clear_utcoffset() {
  utcoffset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::_internal_utcoffset() const {
  return utcoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP_UserP::utcoffset() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.utcOffset)
  return _internal_utcoffset();
}
inline void TweetStatusP_UserP::_internal_set_utcoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  utcoffset_ = value;
}
inline void TweetStatusP_UserP::set_utcoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utcoffset(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.utcOffset)
}

// string timeZone = 36;
inline void TweetStatusP_UserP::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_UserP::timezone() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.timeZone)
  return _internal_timezone();
}
inline void TweetStatusP_UserP::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.timeZone)
}
inline std::string* TweetStatusP_UserP::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.UserP.timeZone)
  return _internal_mutable_timezone();
}
inline const std::string& TweetStatusP_UserP::_internal_timezone() const {
  return timezone_.GetNoArena();
}
inline void TweetStatusP_UserP::_internal_set_timezone(const std::string& value) {
  
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_UserP::set_timezone(std::string&& value) {
  
  timezone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.UserP.timeZone)
}
inline void TweetStatusP_UserP::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.UserP.timeZone)
}
inline void TweetStatusP_UserP::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.UserP.timeZone)
}
inline std::string* TweetStatusP_UserP::_internal_mutable_timezone() {
  
  return timezone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_UserP::release_timezone() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.UserP.timeZone)
  
  return timezone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_UserP::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.UserP.timeZone)
}

// bool translator = 37;
inline void TweetStatusP_UserP::clear_translator() {
  translator_ = false;
}
inline bool TweetStatusP_UserP::_internal_translator() const {
  return translator_;
}
inline bool TweetStatusP_UserP::translator() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.translator)
  return _internal_translator();
}
inline void TweetStatusP_UserP::_internal_set_translator(bool value) {
  
  translator_ = value;
}
inline void TweetStatusP_UserP::set_translator(bool value) {
  _internal_set_translator(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.translator)
}

// bool isFollowRequestSent = 38;
inline void TweetStatusP_UserP::clear_isfollowrequestsent() {
  isfollowrequestsent_ = false;
}
inline bool TweetStatusP_UserP::_internal_isfollowrequestsent() const {
  return isfollowrequestsent_;
}
inline bool TweetStatusP_UserP::isfollowrequestsent() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.isFollowRequestSent)
  return _internal_isfollowrequestsent();
}
inline void TweetStatusP_UserP::_internal_set_isfollowrequestsent(bool value) {
  
  isfollowrequestsent_ = value;
}
inline void TweetStatusP_UserP::set_isfollowrequestsent(bool value) {
  _internal_set_isfollowrequestsent(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.isFollowRequestSent)
}

// bool showAllInlineMedia = 39;
inline void TweetStatusP_UserP::clear_showallinlinemedia() {
  showallinlinemedia_ = false;
}
inline bool TweetStatusP_UserP::_internal_showallinlinemedia() const {
  return showallinlinemedia_;
}
inline bool TweetStatusP_UserP::showallinlinemedia() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.UserP.showAllInlineMedia)
  return _internal_showallinlinemedia();
}
inline void TweetStatusP_UserP::_internal_set_showallinlinemedia(bool value) {
  
  showallinlinemedia_ = value;
}
inline void TweetStatusP_UserP::set_showallinlinemedia(bool value) {
  _internal_set_showallinlinemedia(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.UserP.showAllInlineMedia)
}

// -------------------------------------------------------------------

// TweetStatusP_CoordinatesP

// string type = 1;
inline void TweetStatusP_CoordinatesP::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_CoordinatesP::type() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.CoordinatesP.type)
  return _internal_type();
}
inline void TweetStatusP_CoordinatesP::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.CoordinatesP.type)
}
inline std::string* TweetStatusP_CoordinatesP::mutable_type() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.CoordinatesP.type)
  return _internal_mutable_type();
}
inline const std::string& TweetStatusP_CoordinatesP::_internal_type() const {
  return type_.GetNoArena();
}
inline void TweetStatusP_CoordinatesP::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_CoordinatesP::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.CoordinatesP.type)
}
inline void TweetStatusP_CoordinatesP::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.CoordinatesP.type)
}
inline void TweetStatusP_CoordinatesP::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.CoordinatesP.type)
}
inline std::string* TweetStatusP_CoordinatesP::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_CoordinatesP::release_type() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.CoordinatesP.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_CoordinatesP::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.CoordinatesP.type)
}

// repeated double coordinates = 2;
inline int TweetStatusP_CoordinatesP::_internal_coordinates_size() const {
  return coordinates_.size();
}
inline int TweetStatusP_CoordinatesP::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void TweetStatusP_CoordinatesP::clear_coordinates() {
  coordinates_.Clear();
}
inline double TweetStatusP_CoordinatesP::_internal_coordinates(int index) const {
  return coordinates_.Get(index);
}
inline double TweetStatusP_CoordinatesP::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.CoordinatesP.coordinates)
  return _internal_coordinates(index);
}
inline void TweetStatusP_CoordinatesP::set_coordinates(int index, double value) {
  coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.CoordinatesP.coordinates)
}
inline void TweetStatusP_CoordinatesP::_internal_add_coordinates(double value) {
  coordinates_.Add(value);
}
inline void TweetStatusP_CoordinatesP::add_coordinates(double value) {
  _internal_add_coordinates(value);
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.CoordinatesP.coordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TweetStatusP_CoordinatesP::_internal_coordinates() const {
  return coordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TweetStatusP_CoordinatesP::coordinates() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.CoordinatesP.coordinates)
  return _internal_coordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TweetStatusP_CoordinatesP::_internal_mutable_coordinates() {
  return &coordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TweetStatusP_CoordinatesP::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.CoordinatesP.coordinates)
  return _internal_mutable_coordinates();
}

// -------------------------------------------------------------------

// TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP

// repeated double coordinate = 1;
inline int TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_internal_coordinate_size() const {
  return coordinate_.size();
}
inline int TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::coordinate_size() const {
  return _internal_coordinate_size();
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::clear_coordinate() {
  coordinate_.Clear();
}
inline double TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_internal_coordinate(int index) const {
  return coordinate_.Get(index);
}
inline double TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::coordinate(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP.coordinate)
  return _internal_coordinate(index);
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::set_coordinate(int index, double value) {
  coordinate_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP.coordinate)
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_internal_add_coordinate(double value) {
  coordinate_.Add(value);
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::add_coordinate(double value) {
  _internal_add_coordinate(value);
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP.coordinate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_internal_coordinate() const {
  return coordinate_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::coordinate() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP.coordinate)
  return _internal_coordinate();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_internal_mutable_coordinate() {
  return &coordinate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP.coordinate)
  return _internal_mutable_coordinate();
}

// -------------------------------------------------------------------

// TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP

// repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
inline int TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::_internal_rowstwop_size() const {
  return rowstwop_.size();
}
inline int TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::rowstwop_size() const {
  return _internal_rowstwop_size();
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::clear_rowstwop() {
  rowstwop_.Clear();
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::mutable_rowstwop(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.rowsTwoP)
  return rowstwop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >*
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::mutable_rowstwop() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.rowsTwoP)
  return &rowstwop_;
}
inline const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::_internal_rowstwop(int index) const {
  return rowstwop_.Get(index);
}
inline const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::rowstwop(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.rowsTwoP)
  return _internal_rowstwop(index);
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::_internal_add_rowstwop() {
  return rowstwop_.Add();
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::add_rowstwop() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.rowsTwoP)
  return _internal_add_rowstwop();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >&
TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP::rowstwop() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP.rowsTwoP)
  return rowstwop_;
}

// -------------------------------------------------------------------

// TweetStatusP_PlaceP_BoundingBoxCoordinateP

// string type = 1;
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP_BoundingBoxCoordinateP::type() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
  return _internal_type();
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
}
inline std::string* TweetStatusP_PlaceP_BoundingBoxCoordinateP::mutable_type() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
  return _internal_mutable_type();
}
inline const std::string& TweetStatusP_PlaceP_BoundingBoxCoordinateP::_internal_type() const {
  return type_.GetNoArena();
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
}
inline std::string* TweetStatusP_PlaceP_BoundingBoxCoordinateP::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP_BoundingBoxCoordinateP::release_type() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.type)
}

// repeated .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
inline int TweetStatusP_PlaceP_BoundingBoxCoordinateP::_internal_threedimarray_size() const {
  return threedimarray_.size();
}
inline int TweetStatusP_PlaceP_BoundingBoxCoordinateP::threedimarray_size() const {
  return _internal_threedimarray_size();
}
inline void TweetStatusP_PlaceP_BoundingBoxCoordinateP::clear_threedimarray() {
  threedimarray_.Clear();
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* TweetStatusP_PlaceP_BoundingBoxCoordinateP::mutable_threedimarray(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.threeDimArray)
  return threedimarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP >*
TweetStatusP_PlaceP_BoundingBoxCoordinateP::mutable_threedimarray() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.threeDimArray)
  return &threedimarray_;
}
inline const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& TweetStatusP_PlaceP_BoundingBoxCoordinateP::_internal_threedimarray(int index) const {
  return threedimarray_.Get(index);
}
inline const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP& TweetStatusP_PlaceP_BoundingBoxCoordinateP::threedimarray(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.threeDimArray)
  return _internal_threedimarray(index);
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* TweetStatusP_PlaceP_BoundingBoxCoordinateP::_internal_add_threedimarray() {
  return threedimarray_.Add();
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP* TweetStatusP_PlaceP_BoundingBoxCoordinateP::add_threedimarray() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.threeDimArray)
  return _internal_add_threedimarray();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP_RowsOneP >&
TweetStatusP_PlaceP_BoundingBoxCoordinateP::threedimarray() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP.threeDimArray)
  return threedimarray_;
}

// -------------------------------------------------------------------

// TweetStatusP_PlaceP

// string name = 1;
inline void TweetStatusP_PlaceP::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::name() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.name)
  return _internal_name();
}
inline void TweetStatusP_PlaceP::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.name)
}
inline std::string* TweetStatusP_PlaceP::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.name)
  return _internal_mutable_name();
}
inline const std::string& TweetStatusP_PlaceP::_internal_name() const {
  return name_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.name)
}
inline void TweetStatusP_PlaceP::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.name)
}
inline void TweetStatusP_PlaceP::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.name)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_name() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.name)
}

// string countryCode = 2;
inline void TweetStatusP_PlaceP::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::countrycode() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.countryCode)
  return _internal_countrycode();
}
inline void TweetStatusP_PlaceP::set_countrycode(const std::string& value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.countryCode)
}
inline std::string* TweetStatusP_PlaceP::mutable_countrycode() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.countryCode)
  return _internal_mutable_countrycode();
}
inline const std::string& TweetStatusP_PlaceP::_internal_countrycode() const {
  return countrycode_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_countrycode(const std::string& value) {
  
  countrycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_countrycode(std::string&& value) {
  
  countrycode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.countryCode)
}
inline void TweetStatusP_PlaceP::set_countrycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.countryCode)
}
inline void TweetStatusP_PlaceP::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.countryCode)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_countrycode() {
  
  return countrycode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_countrycode() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.countryCode)
  
  return countrycode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_countrycode(std::string* countrycode) {
  if (countrycode != nullptr) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.countryCode)
}

// string id = 3;
inline void TweetStatusP_PlaceP::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::id() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.id)
  return _internal_id();
}
inline void TweetStatusP_PlaceP::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.id)
}
inline std::string* TweetStatusP_PlaceP::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.id)
  return _internal_mutable_id();
}
inline const std::string& TweetStatusP_PlaceP::_internal_id() const {
  return id_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.id)
}
inline void TweetStatusP_PlaceP::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.id)
}
inline void TweetStatusP_PlaceP::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.id)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_id() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.id)
}

// string country = 4;
inline void TweetStatusP_PlaceP::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::country() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.country)
  return _internal_country();
}
inline void TweetStatusP_PlaceP::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.country)
}
inline std::string* TweetStatusP_PlaceP::mutable_country() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.country)
  return _internal_mutable_country();
}
inline const std::string& TweetStatusP_PlaceP::_internal_country() const {
  return country_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.country)
}
inline void TweetStatusP_PlaceP::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.country)
}
inline void TweetStatusP_PlaceP::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.country)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_country() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.country)
}

// string placeType = 5;
inline void TweetStatusP_PlaceP::clear_placetype() {
  placetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::placetype() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.placeType)
  return _internal_placetype();
}
inline void TweetStatusP_PlaceP::set_placetype(const std::string& value) {
  _internal_set_placetype(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.placeType)
}
inline std::string* TweetStatusP_PlaceP::mutable_placetype() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.placeType)
  return _internal_mutable_placetype();
}
inline const std::string& TweetStatusP_PlaceP::_internal_placetype() const {
  return placetype_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_placetype(const std::string& value) {
  
  placetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_placetype(std::string&& value) {
  
  placetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.placeType)
}
inline void TweetStatusP_PlaceP::set_placetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.placeType)
}
inline void TweetStatusP_PlaceP::set_placetype(const char* value, size_t size) {
  
  placetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.placeType)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_placetype() {
  
  return placetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_placetype() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.placeType)
  
  return placetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_placetype(std::string* placetype) {
  if (placetype != nullptr) {
    
  } else {
    
  }
  placetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placetype);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.placeType)
}

// string url = 6;
inline void TweetStatusP_PlaceP::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::url() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.url)
  return _internal_url();
}
inline void TweetStatusP_PlaceP::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.url)
}
inline std::string* TweetStatusP_PlaceP::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.url)
  return _internal_mutable_url();
}
inline const std::string& TweetStatusP_PlaceP::_internal_url() const {
  return url_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.url)
}
inline void TweetStatusP_PlaceP::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.url)
}
inline void TweetStatusP_PlaceP::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.url)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_url() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.url)
}

// string fullName = 7;
inline void TweetStatusP_PlaceP::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP_PlaceP::fullname() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.fullName)
  return _internal_fullname();
}
inline void TweetStatusP_PlaceP::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.PlaceP.fullName)
}
inline std::string* TweetStatusP_PlaceP::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.fullName)
  return _internal_mutable_fullname();
}
inline const std::string& TweetStatusP_PlaceP::_internal_fullname() const {
  return fullname_.GetNoArena();
}
inline void TweetStatusP_PlaceP::_internal_set_fullname(const std::string& value) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP_PlaceP::set_fullname(std::string&& value) {
  
  fullname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.PlaceP.fullName)
}
inline void TweetStatusP_PlaceP::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.PlaceP.fullName)
}
inline void TweetStatusP_PlaceP::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.PlaceP.fullName)
}
inline std::string* TweetStatusP_PlaceP::_internal_mutable_fullname() {
  
  return fullname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP_PlaceP::release_fullname() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.fullName)
  
  return fullname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP_PlaceP::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.fullName)
}

// .proto.TweetStatusP.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
inline bool TweetStatusP_PlaceP::_internal_has_boundingboxcoordinatep() const {
  return this != internal_default_instance() && boundingboxcoordinatep_ != nullptr;
}
inline bool TweetStatusP_PlaceP::has_boundingboxcoordinatep() const {
  return _internal_has_boundingboxcoordinatep();
}
inline void TweetStatusP_PlaceP::clear_boundingboxcoordinatep() {
  if (GetArenaNoVirtual() == nullptr && boundingboxcoordinatep_ != nullptr) {
    delete boundingboxcoordinatep_;
  }
  boundingboxcoordinatep_ = nullptr;
}
inline const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP& TweetStatusP_PlaceP::_internal_boundingboxcoordinatep() const {
  const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* p = boundingboxcoordinatep_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP*>(
      &::proto::_TweetStatusP_PlaceP_BoundingBoxCoordinateP_default_instance_);
}
inline const ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP& TweetStatusP_PlaceP::boundingboxcoordinatep() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.PlaceP.boundingBoxCoordinateP)
  return _internal_boundingboxcoordinatep();
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* TweetStatusP_PlaceP::release_boundingboxcoordinatep() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.PlaceP.boundingBoxCoordinateP)
  
  ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* temp = boundingboxcoordinatep_;
  boundingboxcoordinatep_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* TweetStatusP_PlaceP::_internal_mutable_boundingboxcoordinatep() {
  
  if (boundingboxcoordinatep_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP>(GetArenaNoVirtual());
    boundingboxcoordinatep_ = p;
  }
  return boundingboxcoordinatep_;
}
inline ::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* TweetStatusP_PlaceP::mutable_boundingboxcoordinatep() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.PlaceP.boundingBoxCoordinateP)
  return _internal_mutable_boundingboxcoordinatep();
}
inline void TweetStatusP_PlaceP::set_allocated_boundingboxcoordinatep(::proto::TweetStatusP_PlaceP_BoundingBoxCoordinateP* boundingboxcoordinatep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete boundingboxcoordinatep_;
  }
  if (boundingboxcoordinatep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      boundingboxcoordinatep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingboxcoordinatep, submessage_arena);
    }
    
  } else {
    
  }
  boundingboxcoordinatep_ = boundingboxcoordinatep;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.PlaceP.boundingBoxCoordinateP)
}

// -------------------------------------------------------------------

// TweetStatusP_EntitiesP

// repeated .proto.HashtagEntityP hashtagEntityP = 1;
inline int TweetStatusP_EntitiesP::_internal_hashtagentityp_size() const {
  return hashtagentityp_.size();
}
inline int TweetStatusP_EntitiesP::hashtagentityp_size() const {
  return _internal_hashtagentityp_size();
}
inline void TweetStatusP_EntitiesP::clear_hashtagentityp() {
  hashtagentityp_.Clear();
}
inline ::proto::HashtagEntityP* TweetStatusP_EntitiesP::mutable_hashtagentityp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.EntitiesP.hashtagEntityP)
  return hashtagentityp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::HashtagEntityP >*
TweetStatusP_EntitiesP::mutable_hashtagentityp() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.EntitiesP.hashtagEntityP)
  return &hashtagentityp_;
}
inline const ::proto::HashtagEntityP& TweetStatusP_EntitiesP::_internal_hashtagentityp(int index) const {
  return hashtagentityp_.Get(index);
}
inline const ::proto::HashtagEntityP& TweetStatusP_EntitiesP::hashtagentityp(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.EntitiesP.hashtagEntityP)
  return _internal_hashtagentityp(index);
}
inline ::proto::HashtagEntityP* TweetStatusP_EntitiesP::_internal_add_hashtagentityp() {
  return hashtagentityp_.Add();
}
inline ::proto::HashtagEntityP* TweetStatusP_EntitiesP::add_hashtagentityp() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.EntitiesP.hashtagEntityP)
  return _internal_add_hashtagentityp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::HashtagEntityP >&
TweetStatusP_EntitiesP::hashtagentityp() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.EntitiesP.hashtagEntityP)
  return hashtagentityp_;
}

// repeated .proto.MediaEntityP mediaEntityP = 2;
inline int TweetStatusP_EntitiesP::_internal_mediaentityp_size() const {
  return mediaentityp_.size();
}
inline int TweetStatusP_EntitiesP::mediaentityp_size() const {
  return _internal_mediaentityp_size();
}
inline void TweetStatusP_EntitiesP::clear_mediaentityp() {
  mediaentityp_.Clear();
}
inline ::proto::MediaEntityP* TweetStatusP_EntitiesP::mutable_mediaentityp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.EntitiesP.mediaEntityP)
  return mediaentityp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >*
TweetStatusP_EntitiesP::mutable_mediaentityp() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.EntitiesP.mediaEntityP)
  return &mediaentityp_;
}
inline const ::proto::MediaEntityP& TweetStatusP_EntitiesP::_internal_mediaentityp(int index) const {
  return mediaentityp_.Get(index);
}
inline const ::proto::MediaEntityP& TweetStatusP_EntitiesP::mediaentityp(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.EntitiesP.mediaEntityP)
  return _internal_mediaentityp(index);
}
inline ::proto::MediaEntityP* TweetStatusP_EntitiesP::_internal_add_mediaentityp() {
  return mediaentityp_.Add();
}
inline ::proto::MediaEntityP* TweetStatusP_EntitiesP::add_mediaentityp() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.EntitiesP.mediaEntityP)
  return _internal_add_mediaentityp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >&
TweetStatusP_EntitiesP::mediaentityp() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.EntitiesP.mediaEntityP)
  return mediaentityp_;
}

// repeated .proto.URLEntityP urlEntityP = 3;
inline int TweetStatusP_EntitiesP::_internal_urlentityp_size() const {
  return urlentityp_.size();
}
inline int TweetStatusP_EntitiesP::urlentityp_size() const {
  return _internal_urlentityp_size();
}
inline void TweetStatusP_EntitiesP::clear_urlentityp() {
  urlentityp_.Clear();
}
inline ::proto::URLEntityP* TweetStatusP_EntitiesP::mutable_urlentityp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.EntitiesP.urlEntityP)
  return urlentityp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::URLEntityP >*
TweetStatusP_EntitiesP::mutable_urlentityp() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.EntitiesP.urlEntityP)
  return &urlentityp_;
}
inline const ::proto::URLEntityP& TweetStatusP_EntitiesP::_internal_urlentityp(int index) const {
  return urlentityp_.Get(index);
}
inline const ::proto::URLEntityP& TweetStatusP_EntitiesP::urlentityp(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.EntitiesP.urlEntityP)
  return _internal_urlentityp(index);
}
inline ::proto::URLEntityP* TweetStatusP_EntitiesP::_internal_add_urlentityp() {
  return urlentityp_.Add();
}
inline ::proto::URLEntityP* TweetStatusP_EntitiesP::add_urlentityp() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.EntitiesP.urlEntityP)
  return _internal_add_urlentityp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::URLEntityP >&
TweetStatusP_EntitiesP::urlentityp() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.EntitiesP.urlEntityP)
  return urlentityp_;
}

// repeated .proto.UserMentionEntityP userMentionEntityP = 4;
inline int TweetStatusP_EntitiesP::_internal_usermentionentityp_size() const {
  return usermentionentityp_.size();
}
inline int TweetStatusP_EntitiesP::usermentionentityp_size() const {
  return _internal_usermentionentityp_size();
}
inline void TweetStatusP_EntitiesP::clear_usermentionentityp() {
  usermentionentityp_.Clear();
}
inline ::proto::UserMentionEntityP* TweetStatusP_EntitiesP::mutable_usermentionentityp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.EntitiesP.userMentionEntityP)
  return usermentionentityp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMentionEntityP >*
TweetStatusP_EntitiesP::mutable_usermentionentityp() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.EntitiesP.userMentionEntityP)
  return &usermentionentityp_;
}
inline const ::proto::UserMentionEntityP& TweetStatusP_EntitiesP::_internal_usermentionentityp(int index) const {
  return usermentionentityp_.Get(index);
}
inline const ::proto::UserMentionEntityP& TweetStatusP_EntitiesP::usermentionentityp(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.EntitiesP.userMentionEntityP)
  return _internal_usermentionentityp(index);
}
inline ::proto::UserMentionEntityP* TweetStatusP_EntitiesP::_internal_add_usermentionentityp() {
  return usermentionentityp_.Add();
}
inline ::proto::UserMentionEntityP* TweetStatusP_EntitiesP::add_usermentionentityp() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.EntitiesP.userMentionEntityP)
  return _internal_add_usermentionentityp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMentionEntityP >&
TweetStatusP_EntitiesP::usermentionentityp() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.EntitiesP.userMentionEntityP)
  return usermentionentityp_;
}

// repeated .proto.SymbolEntityP symbolEntityP = 5;
inline int TweetStatusP_EntitiesP::_internal_symbolentityp_size() const {
  return symbolentityp_.size();
}
inline int TweetStatusP_EntitiesP::symbolentityp_size() const {
  return _internal_symbolentityp_size();
}
inline void TweetStatusP_EntitiesP::clear_symbolentityp() {
  symbolentityp_.Clear();
}
inline ::proto::SymbolEntityP* TweetStatusP_EntitiesP::mutable_symbolentityp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.EntitiesP.symbolEntityP)
  return symbolentityp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SymbolEntityP >*
TweetStatusP_EntitiesP::mutable_symbolentityp() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.EntitiesP.symbolEntityP)
  return &symbolentityp_;
}
inline const ::proto::SymbolEntityP& TweetStatusP_EntitiesP::_internal_symbolentityp(int index) const {
  return symbolentityp_.Get(index);
}
inline const ::proto::SymbolEntityP& TweetStatusP_EntitiesP::symbolentityp(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.EntitiesP.symbolEntityP)
  return _internal_symbolentityp(index);
}
inline ::proto::SymbolEntityP* TweetStatusP_EntitiesP::_internal_add_symbolentityp() {
  return symbolentityp_.Add();
}
inline ::proto::SymbolEntityP* TweetStatusP_EntitiesP::add_symbolentityp() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.EntitiesP.symbolEntityP)
  return _internal_add_symbolentityp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SymbolEntityP >&
TweetStatusP_EntitiesP::symbolentityp() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.EntitiesP.symbolEntityP)
  return symbolentityp_;
}

// repeated .proto.PollEntityP pollEntityP = 6;
inline int TweetStatusP_EntitiesP::_internal_pollentityp_size() const {
  return pollentityp_.size();
}
inline int TweetStatusP_EntitiesP::pollentityp_size() const {
  return _internal_pollentityp_size();
}
inline void TweetStatusP_EntitiesP::clear_pollentityp() {
  pollentityp_.Clear();
}
inline ::proto::PollEntityP* TweetStatusP_EntitiesP::mutable_pollentityp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.EntitiesP.pollEntityP)
  return pollentityp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PollEntityP >*
TweetStatusP_EntitiesP::mutable_pollentityp() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.EntitiesP.pollEntityP)
  return &pollentityp_;
}
inline const ::proto::PollEntityP& TweetStatusP_EntitiesP::_internal_pollentityp(int index) const {
  return pollentityp_.Get(index);
}
inline const ::proto::PollEntityP& TweetStatusP_EntitiesP::pollentityp(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.EntitiesP.pollEntityP)
  return _internal_pollentityp(index);
}
inline ::proto::PollEntityP* TweetStatusP_EntitiesP::_internal_add_pollentityp() {
  return pollentityp_.Add();
}
inline ::proto::PollEntityP* TweetStatusP_EntitiesP::add_pollentityp() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.EntitiesP.pollEntityP)
  return _internal_add_pollentityp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PollEntityP >&
TweetStatusP_EntitiesP::pollentityp() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.EntitiesP.pollEntityP)
  return pollentityp_;
}

// -------------------------------------------------------------------

// TweetStatusP_ExtendedEntitiesP

// repeated .proto.MediaEntityP media = 1;
inline int TweetStatusP_ExtendedEntitiesP::_internal_media_size() const {
  return media_.size();
}
inline int TweetStatusP_ExtendedEntitiesP::media_size() const {
  return _internal_media_size();
}
inline void TweetStatusP_ExtendedEntitiesP::clear_media() {
  media_.Clear();
}
inline ::proto::MediaEntityP* TweetStatusP_ExtendedEntitiesP::mutable_media(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.ExtendedEntitiesP.media)
  return media_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >*
TweetStatusP_ExtendedEntitiesP::mutable_media() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.ExtendedEntitiesP.media)
  return &media_;
}
inline const ::proto::MediaEntityP& TweetStatusP_ExtendedEntitiesP::_internal_media(int index) const {
  return media_.Get(index);
}
inline const ::proto::MediaEntityP& TweetStatusP_ExtendedEntitiesP::media(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.ExtendedEntitiesP.media)
  return _internal_media(index);
}
inline ::proto::MediaEntityP* TweetStatusP_ExtendedEntitiesP::_internal_add_media() {
  return media_.Add();
}
inline ::proto::MediaEntityP* TweetStatusP_ExtendedEntitiesP::add_media() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.ExtendedEntitiesP.media)
  return _internal_add_media();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MediaEntityP >&
TweetStatusP_ExtendedEntitiesP::media() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.ExtendedEntitiesP.media)
  return media_;
}

// -------------------------------------------------------------------

// TweetStatusP

// string createdAt = 1;
inline void TweetStatusP::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::createdat() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.createdAt)
  return _internal_createdat();
}
inline void TweetStatusP::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.createdAt)
}
inline std::string* TweetStatusP::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& TweetStatusP::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void TweetStatusP::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.createdAt)
}
inline void TweetStatusP::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.createdAt)
}
inline void TweetStatusP::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.createdAt)
}
inline std::string* TweetStatusP::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_createdat() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.createdAt)
}

// int64 id = 2;
inline void TweetStatusP::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::id() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.id)
  return _internal_id();
}
inline void TweetStatusP::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void TweetStatusP::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.id)
}

// string text = 3;
inline void TweetStatusP::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::text() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.text)
  return _internal_text();
}
inline void TweetStatusP::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.text)
}
inline std::string* TweetStatusP::mutable_text() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.text)
  return _internal_mutable_text();
}
inline const std::string& TweetStatusP::_internal_text() const {
  return text_.GetNoArena();
}
inline void TweetStatusP::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.text)
}
inline void TweetStatusP::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.text)
}
inline void TweetStatusP::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.text)
}
inline std::string* TweetStatusP::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_text() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.text)
}

// string source = 4;
inline void TweetStatusP::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::source() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.source)
  return _internal_source();
}
inline void TweetStatusP::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.source)
}
inline std::string* TweetStatusP::mutable_source() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.source)
  return _internal_mutable_source();
}
inline const std::string& TweetStatusP::_internal_source() const {
  return source_.GetNoArena();
}
inline void TweetStatusP::_internal_set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.source)
}
inline void TweetStatusP::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.source)
}
inline void TweetStatusP::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.source)
}
inline std::string* TweetStatusP::_internal_mutable_source() {
  
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_source() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.source)
}

// bool isTruncated = 5;
inline void TweetStatusP::clear_istruncated() {
  istruncated_ = false;
}
inline bool TweetStatusP::_internal_istruncated() const {
  return istruncated_;
}
inline bool TweetStatusP::istruncated() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.isTruncated)
  return _internal_istruncated();
}
inline void TweetStatusP::_internal_set_istruncated(bool value) {
  
  istruncated_ = value;
}
inline void TweetStatusP::set_istruncated(bool value) {
  _internal_set_istruncated(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.isTruncated)
}

// int64 inReplyToStatusId = 6;
inline void TweetStatusP::clear_inreplytostatusid() {
  inreplytostatusid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::_internal_inreplytostatusid() const {
  return inreplytostatusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::inreplytostatusid() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.inReplyToStatusId)
  return _internal_inreplytostatusid();
}
inline void TweetStatusP::_internal_set_inreplytostatusid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inreplytostatusid_ = value;
}
inline void TweetStatusP::set_inreplytostatusid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inreplytostatusid(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.inReplyToStatusId)
}

// int64 inReplyToUserId = 7;
inline void TweetStatusP::clear_inreplytouserid() {
  inreplytouserid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::_internal_inreplytouserid() const {
  return inreplytouserid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::inreplytouserid() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.inReplyToUserId)
  return _internal_inreplytouserid();
}
inline void TweetStatusP::_internal_set_inreplytouserid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inreplytouserid_ = value;
}
inline void TweetStatusP::set_inreplytouserid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inreplytouserid(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.inReplyToUserId)
}

// string inReplyToScreenName = 8;
inline void TweetStatusP::clear_inreplytoscreenname() {
  inreplytoscreenname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::inreplytoscreenname() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.inReplyToScreenName)
  return _internal_inreplytoscreenname();
}
inline void TweetStatusP::set_inreplytoscreenname(const std::string& value) {
  _internal_set_inreplytoscreenname(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.inReplyToScreenName)
}
inline std::string* TweetStatusP::mutable_inreplytoscreenname() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.inReplyToScreenName)
  return _internal_mutable_inreplytoscreenname();
}
inline const std::string& TweetStatusP::_internal_inreplytoscreenname() const {
  return inreplytoscreenname_.GetNoArena();
}
inline void TweetStatusP::_internal_set_inreplytoscreenname(const std::string& value) {
  
  inreplytoscreenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_inreplytoscreenname(std::string&& value) {
  
  inreplytoscreenname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.inReplyToScreenName)
}
inline void TweetStatusP::set_inreplytoscreenname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inreplytoscreenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.inReplyToScreenName)
}
inline void TweetStatusP::set_inreplytoscreenname(const char* value, size_t size) {
  
  inreplytoscreenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.inReplyToScreenName)
}
inline std::string* TweetStatusP::_internal_mutable_inreplytoscreenname() {
  
  return inreplytoscreenname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_inreplytoscreenname() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.inReplyToScreenName)
  
  return inreplytoscreenname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_inreplytoscreenname(std::string* inreplytoscreenname) {
  if (inreplytoscreenname != nullptr) {
    
  } else {
    
  }
  inreplytoscreenname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inreplytoscreenname);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.inReplyToScreenName)
}

// .proto.TweetStatusP.UserP userP = 27;
inline bool TweetStatusP::_internal_has_userp() const {
  return this != internal_default_instance() && userp_ != nullptr;
}
inline bool TweetStatusP::has_userp() const {
  return _internal_has_userp();
}
inline void TweetStatusP::clear_userp() {
  if (GetArenaNoVirtual() == nullptr && userp_ != nullptr) {
    delete userp_;
  }
  userp_ = nullptr;
}
inline const ::proto::TweetStatusP_UserP& TweetStatusP::_internal_userp() const {
  const ::proto::TweetStatusP_UserP* p = userp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP_UserP*>(
      &::proto::_TweetStatusP_UserP_default_instance_);
}
inline const ::proto::TweetStatusP_UserP& TweetStatusP::userp() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.userP)
  return _internal_userp();
}
inline ::proto::TweetStatusP_UserP* TweetStatusP::release_userp() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.userP)
  
  ::proto::TweetStatusP_UserP* temp = userp_;
  userp_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP_UserP* TweetStatusP::_internal_mutable_userp() {
  
  if (userp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP_UserP>(GetArenaNoVirtual());
    userp_ = p;
  }
  return userp_;
}
inline ::proto::TweetStatusP_UserP* TweetStatusP::mutable_userp() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.userP)
  return _internal_mutable_userp();
}
inline void TweetStatusP::set_allocated_userp(::proto::TweetStatusP_UserP* userp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userp_;
  }
  if (userp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userp, submessage_arena);
    }
    
  } else {
    
  }
  userp_ = userp;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.userP)
}

// .proto.TweetStatusP.CoordinatesP coordinates = 28;
inline bool TweetStatusP::_internal_has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != nullptr;
}
inline bool TweetStatusP::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void TweetStatusP::clear_coordinates() {
  if (GetArenaNoVirtual() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
}
inline const ::proto::TweetStatusP_CoordinatesP& TweetStatusP::_internal_coordinates() const {
  const ::proto::TweetStatusP_CoordinatesP* p = coordinates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP_CoordinatesP*>(
      &::proto::_TweetStatusP_CoordinatesP_default_instance_);
}
inline const ::proto::TweetStatusP_CoordinatesP& TweetStatusP::coordinates() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.coordinates)
  return _internal_coordinates();
}
inline ::proto::TweetStatusP_CoordinatesP* TweetStatusP::release_coordinates() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.coordinates)
  
  ::proto::TweetStatusP_CoordinatesP* temp = coordinates_;
  coordinates_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP_CoordinatesP* TweetStatusP::_internal_mutable_coordinates() {
  
  if (coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP_CoordinatesP>(GetArenaNoVirtual());
    coordinates_ = p;
  }
  return coordinates_;
}
inline ::proto::TweetStatusP_CoordinatesP* TweetStatusP::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.coordinates)
  return _internal_mutable_coordinates();
}
inline void TweetStatusP::set_allocated_coordinates(::proto::TweetStatusP_CoordinatesP* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.coordinates)
}

// .proto.TweetStatusP.PlaceP place = 29;
inline bool TweetStatusP::_internal_has_place() const {
  return this != internal_default_instance() && place_ != nullptr;
}
inline bool TweetStatusP::has_place() const {
  return _internal_has_place();
}
inline void TweetStatusP::clear_place() {
  if (GetArenaNoVirtual() == nullptr && place_ != nullptr) {
    delete place_;
  }
  place_ = nullptr;
}
inline const ::proto::TweetStatusP_PlaceP& TweetStatusP::_internal_place() const {
  const ::proto::TweetStatusP_PlaceP* p = place_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP_PlaceP*>(
      &::proto::_TweetStatusP_PlaceP_default_instance_);
}
inline const ::proto::TweetStatusP_PlaceP& TweetStatusP::place() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.place)
  return _internal_place();
}
inline ::proto::TweetStatusP_PlaceP* TweetStatusP::release_place() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.place)
  
  ::proto::TweetStatusP_PlaceP* temp = place_;
  place_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP_PlaceP* TweetStatusP::_internal_mutable_place() {
  
  if (place_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP_PlaceP>(GetArenaNoVirtual());
    place_ = p;
  }
  return place_;
}
inline ::proto::TweetStatusP_PlaceP* TweetStatusP::mutable_place() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.place)
  return _internal_mutable_place();
}
inline void TweetStatusP::set_allocated_place(::proto::TweetStatusP_PlaceP* place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete place_;
  }
  if (place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, place, submessage_arena);
    }
    
  } else {
    
  }
  place_ = place;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.place)
}

// int64 quotedStatusId = 30;
inline void TweetStatusP::clear_quotedstatusid() {
  quotedstatusid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::_internal_quotedstatusid() const {
  return quotedstatusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::quotedstatusid() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.quotedStatusId)
  return _internal_quotedstatusid();
}
inline void TweetStatusP::_internal_set_quotedstatusid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quotedstatusid_ = value;
}
inline void TweetStatusP::set_quotedstatusid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quotedstatusid(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.quotedStatusId)
}

// bool isQuoteStatus = 31;
inline void TweetStatusP::clear_isquotestatus() {
  isquotestatus_ = false;
}
inline bool TweetStatusP::_internal_isquotestatus() const {
  return isquotestatus_;
}
inline bool TweetStatusP::isquotestatus() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.isQuoteStatus)
  return _internal_isquotestatus();
}
inline void TweetStatusP::_internal_set_isquotestatus(bool value) {
  
  isquotestatus_ = value;
}
inline void TweetStatusP::set_isquotestatus(bool value) {
  _internal_set_isquotestatus(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.isQuoteStatus)
}

// .proto.TweetStatusP quotedStatus = 32;
inline bool TweetStatusP::_internal_has_quotedstatus() const {
  return this != internal_default_instance() && quotedstatus_ != nullptr;
}
inline bool TweetStatusP::has_quotedstatus() const {
  return _internal_has_quotedstatus();
}
inline void TweetStatusP::clear_quotedstatus() {
  if (GetArenaNoVirtual() == nullptr && quotedstatus_ != nullptr) {
    delete quotedstatus_;
  }
  quotedstatus_ = nullptr;
}
inline const ::proto::TweetStatusP& TweetStatusP::_internal_quotedstatus() const {
  const ::proto::TweetStatusP* p = quotedstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP*>(
      &::proto::_TweetStatusP_default_instance_);
}
inline const ::proto::TweetStatusP& TweetStatusP::quotedstatus() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.quotedStatus)
  return _internal_quotedstatus();
}
inline ::proto::TweetStatusP* TweetStatusP::release_quotedstatus() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.quotedStatus)
  
  ::proto::TweetStatusP* temp = quotedstatus_;
  quotedstatus_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP* TweetStatusP::_internal_mutable_quotedstatus() {
  
  if (quotedstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP>(GetArenaNoVirtual());
    quotedstatus_ = p;
  }
  return quotedstatus_;
}
inline ::proto::TweetStatusP* TweetStatusP::mutable_quotedstatus() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.quotedStatus)
  return _internal_mutable_quotedstatus();
}
inline void TweetStatusP::set_allocated_quotedstatus(::proto::TweetStatusP* quotedstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quotedstatus_;
  }
  if (quotedstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quotedstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quotedstatus, submessage_arena);
    }
    
  } else {
    
  }
  quotedstatus_ = quotedstatus;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.quotedStatus)
}

// .proto.TweetStatusP retweetedStatus = 33;
inline bool TweetStatusP::_internal_has_retweetedstatus() const {
  return this != internal_default_instance() && retweetedstatus_ != nullptr;
}
inline bool TweetStatusP::has_retweetedstatus() const {
  return _internal_has_retweetedstatus();
}
inline void TweetStatusP::clear_retweetedstatus() {
  if (GetArenaNoVirtual() == nullptr && retweetedstatus_ != nullptr) {
    delete retweetedstatus_;
  }
  retweetedstatus_ = nullptr;
}
inline const ::proto::TweetStatusP& TweetStatusP::_internal_retweetedstatus() const {
  const ::proto::TweetStatusP* p = retweetedstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP*>(
      &::proto::_TweetStatusP_default_instance_);
}
inline const ::proto::TweetStatusP& TweetStatusP::retweetedstatus() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.retweetedStatus)
  return _internal_retweetedstatus();
}
inline ::proto::TweetStatusP* TweetStatusP::release_retweetedstatus() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.retweetedStatus)
  
  ::proto::TweetStatusP* temp = retweetedstatus_;
  retweetedstatus_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP* TweetStatusP::_internal_mutable_retweetedstatus() {
  
  if (retweetedstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP>(GetArenaNoVirtual());
    retweetedstatus_ = p;
  }
  return retweetedstatus_;
}
inline ::proto::TweetStatusP* TweetStatusP::mutable_retweetedstatus() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.retweetedStatus)
  return _internal_mutable_retweetedstatus();
}
inline void TweetStatusP::set_allocated_retweetedstatus(::proto::TweetStatusP* retweetedstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete retweetedstatus_;
  }
  if (retweetedstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      retweetedstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retweetedstatus, submessage_arena);
    }
    
  } else {
    
  }
  retweetedstatus_ = retweetedstatus;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.retweetedStatus)
}

// int32 quoteCount = 34;
inline void TweetStatusP::clear_quotecount() {
  quotecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::_internal_quotecount() const {
  return quotecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::quotecount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.quoteCount)
  return _internal_quotecount();
}
inline void TweetStatusP::_internal_set_quotecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quotecount_ = value;
}
inline void TweetStatusP::set_quotecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quotecount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.quoteCount)
}

// int32 replyCount = 35;
inline void TweetStatusP::clear_replycount() {
  replycount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::_internal_replycount() const {
  return replycount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::replycount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.replyCount)
  return _internal_replycount();
}
inline void TweetStatusP::_internal_set_replycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replycount_ = value;
}
inline void TweetStatusP::set_replycount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replycount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.replyCount)
}

// int32 retweetCount = 36;
inline void TweetStatusP::clear_retweetcount() {
  retweetcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::_internal_retweetcount() const {
  return retweetcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::retweetcount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.retweetCount)
  return _internal_retweetcount();
}
inline void TweetStatusP::_internal_set_retweetcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retweetcount_ = value;
}
inline void TweetStatusP::set_retweetcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retweetcount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.retweetCount)
}

// int32 favoriteCount = 37;
inline void TweetStatusP::clear_favoritecount() {
  favoritecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::_internal_favoritecount() const {
  return favoritecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TweetStatusP::favoritecount() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.favoriteCount)
  return _internal_favoritecount();
}
inline void TweetStatusP::_internal_set_favoritecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  favoritecount_ = value;
}
inline void TweetStatusP::set_favoritecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_favoritecount(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.favoriteCount)
}

// .proto.TweetStatusP.EntitiesP entitiesP = 38;
inline bool TweetStatusP::_internal_has_entitiesp() const {
  return this != internal_default_instance() && entitiesp_ != nullptr;
}
inline bool TweetStatusP::has_entitiesp() const {
  return _internal_has_entitiesp();
}
inline void TweetStatusP::clear_entitiesp() {
  if (GetArenaNoVirtual() == nullptr && entitiesp_ != nullptr) {
    delete entitiesp_;
  }
  entitiesp_ = nullptr;
}
inline const ::proto::TweetStatusP_EntitiesP& TweetStatusP::_internal_entitiesp() const {
  const ::proto::TweetStatusP_EntitiesP* p = entitiesp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP_EntitiesP*>(
      &::proto::_TweetStatusP_EntitiesP_default_instance_);
}
inline const ::proto::TweetStatusP_EntitiesP& TweetStatusP::entitiesp() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.entitiesP)
  return _internal_entitiesp();
}
inline ::proto::TweetStatusP_EntitiesP* TweetStatusP::release_entitiesp() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.entitiesP)
  
  ::proto::TweetStatusP_EntitiesP* temp = entitiesp_;
  entitiesp_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP_EntitiesP* TweetStatusP::_internal_mutable_entitiesp() {
  
  if (entitiesp_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP_EntitiesP>(GetArenaNoVirtual());
    entitiesp_ = p;
  }
  return entitiesp_;
}
inline ::proto::TweetStatusP_EntitiesP* TweetStatusP::mutable_entitiesp() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.entitiesP)
  return _internal_mutable_entitiesp();
}
inline void TweetStatusP::set_allocated_entitiesp(::proto::TweetStatusP_EntitiesP* entitiesp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entitiesp_;
  }
  if (entitiesp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entitiesp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entitiesp, submessage_arena);
    }
    
  } else {
    
  }
  entitiesp_ = entitiesp;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.entitiesP)
}

// .proto.TweetStatusP.ExtendedEntitiesP extendedEntities = 39;
inline bool TweetStatusP::_internal_has_extendedentities() const {
  return this != internal_default_instance() && extendedentities_ != nullptr;
}
inline bool TweetStatusP::has_extendedentities() const {
  return _internal_has_extendedentities();
}
inline void TweetStatusP::clear_extendedentities() {
  if (GetArenaNoVirtual() == nullptr && extendedentities_ != nullptr) {
    delete extendedentities_;
  }
  extendedentities_ = nullptr;
}
inline const ::proto::TweetStatusP_ExtendedEntitiesP& TweetStatusP::_internal_extendedentities() const {
  const ::proto::TweetStatusP_ExtendedEntitiesP* p = extendedentities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TweetStatusP_ExtendedEntitiesP*>(
      &::proto::_TweetStatusP_ExtendedEntitiesP_default_instance_);
}
inline const ::proto::TweetStatusP_ExtendedEntitiesP& TweetStatusP::extendedentities() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.extendedEntities)
  return _internal_extendedentities();
}
inline ::proto::TweetStatusP_ExtendedEntitiesP* TweetStatusP::release_extendedentities() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.extendedEntities)
  
  ::proto::TweetStatusP_ExtendedEntitiesP* temp = extendedentities_;
  extendedentities_ = nullptr;
  return temp;
}
inline ::proto::TweetStatusP_ExtendedEntitiesP* TweetStatusP::_internal_mutable_extendedentities() {
  
  if (extendedentities_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TweetStatusP_ExtendedEntitiesP>(GetArenaNoVirtual());
    extendedentities_ = p;
  }
  return extendedentities_;
}
inline ::proto::TweetStatusP_ExtendedEntitiesP* TweetStatusP::mutable_extendedentities() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.extendedEntities)
  return _internal_mutable_extendedentities();
}
inline void TweetStatusP::set_allocated_extendedentities(::proto::TweetStatusP_ExtendedEntitiesP* extendedentities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extendedentities_;
  }
  if (extendedentities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extendedentities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendedentities, submessage_arena);
    }
    
  } else {
    
  }
  extendedentities_ = extendedentities;
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.extendedEntities)
}

// bool isFavorited = 40;
inline void TweetStatusP::clear_isfavorited() {
  isfavorited_ = false;
}
inline bool TweetStatusP::_internal_isfavorited() const {
  return isfavorited_;
}
inline bool TweetStatusP::isfavorited() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.isFavorited)
  return _internal_isfavorited();
}
inline void TweetStatusP::_internal_set_isfavorited(bool value) {
  
  isfavorited_ = value;
}
inline void TweetStatusP::set_isfavorited(bool value) {
  _internal_set_isfavorited(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.isFavorited)
}

// bool isRetweeted = 41;
inline void TweetStatusP::clear_isretweeted() {
  isretweeted_ = false;
}
inline bool TweetStatusP::_internal_isretweeted() const {
  return isretweeted_;
}
inline bool TweetStatusP::isretweeted() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.isRetweeted)
  return _internal_isretweeted();
}
inline void TweetStatusP::_internal_set_isretweeted(bool value) {
  
  isretweeted_ = value;
}
inline void TweetStatusP::set_isretweeted(bool value) {
  _internal_set_isretweeted(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.isRetweeted)
}

// bool isPossiblySensitive = 42;
inline void TweetStatusP::clear_ispossiblysensitive() {
  ispossiblysensitive_ = false;
}
inline bool TweetStatusP::_internal_ispossiblysensitive() const {
  return ispossiblysensitive_;
}
inline bool TweetStatusP::ispossiblysensitive() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.isPossiblySensitive)
  return _internal_ispossiblysensitive();
}
inline void TweetStatusP::_internal_set_ispossiblysensitive(bool value) {
  
  ispossiblysensitive_ = value;
}
inline void TweetStatusP::set_ispossiblysensitive(bool value) {
  _internal_set_ispossiblysensitive(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.isPossiblySensitive)
}

// string filterLevel = 43;
inline void TweetStatusP::clear_filterlevel() {
  filterlevel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::filterlevel() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.filterLevel)
  return _internal_filterlevel();
}
inline void TweetStatusP::set_filterlevel(const std::string& value) {
  _internal_set_filterlevel(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.filterLevel)
}
inline std::string* TweetStatusP::mutable_filterlevel() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.filterLevel)
  return _internal_mutable_filterlevel();
}
inline const std::string& TweetStatusP::_internal_filterlevel() const {
  return filterlevel_.GetNoArena();
}
inline void TweetStatusP::_internal_set_filterlevel(const std::string& value) {
  
  filterlevel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_filterlevel(std::string&& value) {
  
  filterlevel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.filterLevel)
}
inline void TweetStatusP::set_filterlevel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filterlevel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.filterLevel)
}
inline void TweetStatusP::set_filterlevel(const char* value, size_t size) {
  
  filterlevel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.filterLevel)
}
inline std::string* TweetStatusP::_internal_mutable_filterlevel() {
  
  return filterlevel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_filterlevel() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.filterLevel)
  
  return filterlevel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_filterlevel(std::string* filterlevel) {
  if (filterlevel != nullptr) {
    
  } else {
    
  }
  filterlevel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filterlevel);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.filterLevel)
}

// string lang = 44;
inline void TweetStatusP::clear_lang() {
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::lang() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.lang)
  return _internal_lang();
}
inline void TweetStatusP::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.lang)
}
inline std::string* TweetStatusP::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.lang)
  return _internal_mutable_lang();
}
inline const std::string& TweetStatusP::_internal_lang() const {
  return lang_.GetNoArena();
}
inline void TweetStatusP::_internal_set_lang(const std::string& value) {
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_lang(std::string&& value) {
  
  lang_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.lang)
}
inline void TweetStatusP::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.lang)
}
inline void TweetStatusP::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.lang)
}
inline std::string* TweetStatusP::_internal_mutable_lang() {
  
  return lang_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_lang() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.lang)
  
  return lang_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.lang)
}

// repeated .proto.MatchingRulesEntityP matchingRules = 45;
inline int TweetStatusP::_internal_matchingrules_size() const {
  return matchingrules_.size();
}
inline int TweetStatusP::matchingrules_size() const {
  return _internal_matchingrules_size();
}
inline void TweetStatusP::clear_matchingrules() {
  matchingrules_.Clear();
}
inline ::proto::MatchingRulesEntityP* TweetStatusP::mutable_matchingrules(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.matchingRules)
  return matchingrules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MatchingRulesEntityP >*
TweetStatusP::mutable_matchingrules() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.matchingRules)
  return &matchingrules_;
}
inline const ::proto::MatchingRulesEntityP& TweetStatusP::_internal_matchingrules(int index) const {
  return matchingrules_.Get(index);
}
inline const ::proto::MatchingRulesEntityP& TweetStatusP::matchingrules(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.matchingRules)
  return _internal_matchingrules(index);
}
inline ::proto::MatchingRulesEntityP* TweetStatusP::_internal_add_matchingrules() {
  return matchingrules_.Add();
}
inline ::proto::MatchingRulesEntityP* TweetStatusP::add_matchingrules() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.matchingRules)
  return _internal_add_matchingrules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MatchingRulesEntityP >&
TweetStatusP::matchingrules() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.matchingRules)
  return matchingrules_;
}

// int64 currentUserRetweetedId = 46;
inline void TweetStatusP::clear_currentuserretweetedid() {
  currentuserretweetedid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::_internal_currentuserretweetedid() const {
  return currentuserretweetedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TweetStatusP::currentuserretweetedid() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.currentUserRetweetedId)
  return _internal_currentuserretweetedid();
}
inline void TweetStatusP::_internal_set_currentuserretweetedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  currentuserretweetedid_ = value;
}
inline void TweetStatusP::set_currentuserretweetedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_currentuserretweetedid(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.currentUserRetweetedId)
}

// repeated .proto.MapFieldEntry scopes = 47;
inline int TweetStatusP::_internal_scopes_size() const {
  return scopes_.size();
}
inline int TweetStatusP::scopes_size() const {
  return _internal_scopes_size();
}
inline void TweetStatusP::clear_scopes() {
  scopes_.Clear();
}
inline ::proto::MapFieldEntry* TweetStatusP::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.scopes)
  return scopes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MapFieldEntry >*
TweetStatusP::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.scopes)
  return &scopes_;
}
inline const ::proto::MapFieldEntry& TweetStatusP::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const ::proto::MapFieldEntry& TweetStatusP::scopes(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.scopes)
  return _internal_scopes(index);
}
inline ::proto::MapFieldEntry* TweetStatusP::_internal_add_scopes() {
  return scopes_.Add();
}
inline ::proto::MapFieldEntry* TweetStatusP::add_scopes() {
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.scopes)
  return _internal_add_scopes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MapFieldEntry >&
TweetStatusP::scopes() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.scopes)
  return scopes_;
}

// bool withheldCopyright = 48;
inline void TweetStatusP::clear_withheldcopyright() {
  withheldcopyright_ = false;
}
inline bool TweetStatusP::_internal_withheldcopyright() const {
  return withheldcopyright_;
}
inline bool TweetStatusP::withheldcopyright() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.withheldCopyright)
  return _internal_withheldcopyright();
}
inline void TweetStatusP::_internal_set_withheldcopyright(bool value) {
  
  withheldcopyright_ = value;
}
inline void TweetStatusP::set_withheldcopyright(bool value) {
  _internal_set_withheldcopyright(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.withheldCopyright)
}

// repeated string withheldInCountries = 49;
inline int TweetStatusP::_internal_withheldincountries_size() const {
  return withheldincountries_.size();
}
inline int TweetStatusP::withheldincountries_size() const {
  return _internal_withheldincountries_size();
}
inline void TweetStatusP::clear_withheldincountries() {
  withheldincountries_.Clear();
}
inline std::string* TweetStatusP::add_withheldincountries() {
  // @@protoc_insertion_point(field_add_mutable:proto.TweetStatusP.withheldInCountries)
  return _internal_add_withheldincountries();
}
inline const std::string& TweetStatusP::_internal_withheldincountries(int index) const {
  return withheldincountries_.Get(index);
}
inline const std::string& TweetStatusP::withheldincountries(int index) const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.withheldInCountries)
  return _internal_withheldincountries(index);
}
inline std::string* TweetStatusP::mutable_withheldincountries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.withheldInCountries)
  return withheldincountries_.Mutable(index);
}
inline void TweetStatusP::set_withheldincountries(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.withheldInCountries)
  withheldincountries_.Mutable(index)->assign(value);
}
inline void TweetStatusP::set_withheldincountries(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.withheldInCountries)
  withheldincountries_.Mutable(index)->assign(std::move(value));
}
inline void TweetStatusP::set_withheldincountries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  withheldincountries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.withheldInCountries)
}
inline void TweetStatusP::set_withheldincountries(int index, const char* value, size_t size) {
  withheldincountries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.withheldInCountries)
}
inline std::string* TweetStatusP::_internal_add_withheldincountries() {
  return withheldincountries_.Add();
}
inline void TweetStatusP::add_withheldincountries(const std::string& value) {
  withheldincountries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.withheldInCountries)
}
inline void TweetStatusP::add_withheldincountries(std::string&& value) {
  withheldincountries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.TweetStatusP.withheldInCountries)
}
inline void TweetStatusP::add_withheldincountries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  withheldincountries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.TweetStatusP.withheldInCountries)
}
inline void TweetStatusP::add_withheldincountries(const char* value, size_t size) {
  withheldincountries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.TweetStatusP.withheldInCountries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TweetStatusP::withheldincountries() const {
  // @@protoc_insertion_point(field_list:proto.TweetStatusP.withheldInCountries)
  return withheldincountries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TweetStatusP::mutable_withheldincountries() {
  // @@protoc_insertion_point(field_mutable_list:proto.TweetStatusP.withheldInCountries)
  return &withheldincountries_;
}

// string withheldScope = 50;
inline void TweetStatusP::clear_withheldscope() {
  withheldscope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TweetStatusP::withheldscope() const {
  // @@protoc_insertion_point(field_get:proto.TweetStatusP.withheldScope)
  return _internal_withheldscope();
}
inline void TweetStatusP::set_withheldscope(const std::string& value) {
  _internal_set_withheldscope(value);
  // @@protoc_insertion_point(field_set:proto.TweetStatusP.withheldScope)
}
inline std::string* TweetStatusP::mutable_withheldscope() {
  // @@protoc_insertion_point(field_mutable:proto.TweetStatusP.withheldScope)
  return _internal_mutable_withheldscope();
}
inline const std::string& TweetStatusP::_internal_withheldscope() const {
  return withheldscope_.GetNoArena();
}
inline void TweetStatusP::_internal_set_withheldscope(const std::string& value) {
  
  withheldscope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TweetStatusP::set_withheldscope(std::string&& value) {
  
  withheldscope_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.TweetStatusP.withheldScope)
}
inline void TweetStatusP::set_withheldscope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  withheldscope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.TweetStatusP.withheldScope)
}
inline void TweetStatusP::set_withheldscope(const char* value, size_t size) {
  
  withheldscope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.TweetStatusP.withheldScope)
}
inline std::string* TweetStatusP::_internal_mutable_withheldscope() {
  
  return withheldscope_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TweetStatusP::release_withheldscope() {
  // @@protoc_insertion_point(field_release:proto.TweetStatusP.withheldScope)
  
  return withheldscope_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TweetStatusP::set_allocated_withheldscope(std::string* withheldscope) {
  if (withheldscope != nullptr) {
    
  } else {
    
  }
  withheldscope_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), withheldscope);
  // @@protoc_insertion_point(field_set_allocated:proto.TweetStatusP.withheldScope)
}

// -------------------------------------------------------------------

// URLEntityP

// repeated int32 indices = 1;
inline int URLEntityP::_internal_indices_size() const {
  return indices_.size();
}
inline int URLEntityP::indices_size() const {
  return _internal_indices_size();
}
inline void URLEntityP::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 URLEntityP::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 URLEntityP::indices(int index) const {
  // @@protoc_insertion_point(field_get:proto.URLEntityP.indices)
  return _internal_indices(index);
}
inline void URLEntityP::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.URLEntityP.indices)
}
inline void URLEntityP::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void URLEntityP::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:proto.URLEntityP.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
URLEntityP::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
URLEntityP::indices() const {
  // @@protoc_insertion_point(field_list:proto.URLEntityP.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
URLEntityP::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
URLEntityP::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:proto.URLEntityP.indices)
  return _internal_mutable_indices();
}

// string displayURL = 2;
inline void URLEntityP::clear_displayurl() {
  displayurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& URLEntityP::displayurl() const {
  // @@protoc_insertion_point(field_get:proto.URLEntityP.displayURL)
  return _internal_displayurl();
}
inline void URLEntityP::set_displayurl(const std::string& value) {
  _internal_set_displayurl(value);
  // @@protoc_insertion_point(field_set:proto.URLEntityP.displayURL)
}
inline std::string* URLEntityP::mutable_displayurl() {
  // @@protoc_insertion_point(field_mutable:proto.URLEntityP.displayURL)
  return _internal_mutable_displayurl();
}
inline const std::string& URLEntityP::_internal_displayurl() const {
  return displayurl_.GetNoArena();
}
inline void URLEntityP::_internal_set_displayurl(const std::string& value) {
  
  displayurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void URLEntityP::set_displayurl(std::string&& value) {
  
  displayurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.URLEntityP.displayURL)
}
inline void URLEntityP::set_displayurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.URLEntityP.displayURL)
}
inline void URLEntityP::set_displayurl(const char* value, size_t size) {
  
  displayurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.URLEntityP.displayURL)
}
inline std::string* URLEntityP::_internal_mutable_displayurl() {
  
  return displayurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* URLEntityP::release_displayurl() {
  // @@protoc_insertion_point(field_release:proto.URLEntityP.displayURL)
  
  return displayurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void URLEntityP::set_allocated_displayurl(std::string* displayurl) {
  if (displayurl != nullptr) {
    
  } else {
    
  }
  displayurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayurl);
  // @@protoc_insertion_point(field_set_allocated:proto.URLEntityP.displayURL)
}

// string expandedURL = 3;
inline void URLEntityP::clear_expandedurl() {
  expandedurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& URLEntityP::expandedurl() const {
  // @@protoc_insertion_point(field_get:proto.URLEntityP.expandedURL)
  return _internal_expandedurl();
}
inline void URLEntityP::set_expandedurl(const std::string& value) {
  _internal_set_expandedurl(value);
  // @@protoc_insertion_point(field_set:proto.URLEntityP.expandedURL)
}
inline std::string* URLEntityP::mutable_expandedurl() {
  // @@protoc_insertion_point(field_mutable:proto.URLEntityP.expandedURL)
  return _internal_mutable_expandedurl();
}
inline const std::string& URLEntityP::_internal_expandedurl() const {
  return expandedurl_.GetNoArena();
}
inline void URLEntityP::_internal_set_expandedurl(const std::string& value) {
  
  expandedurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void URLEntityP::set_expandedurl(std::string&& value) {
  
  expandedurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.URLEntityP.expandedURL)
}
inline void URLEntityP::set_expandedurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expandedurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.URLEntityP.expandedURL)
}
inline void URLEntityP::set_expandedurl(const char* value, size_t size) {
  
  expandedurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.URLEntityP.expandedURL)
}
inline std::string* URLEntityP::_internal_mutable_expandedurl() {
  
  return expandedurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* URLEntityP::release_expandedurl() {
  // @@protoc_insertion_point(field_release:proto.URLEntityP.expandedURL)
  
  return expandedurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void URLEntityP::set_allocated_expandedurl(std::string* expandedurl) {
  if (expandedurl != nullptr) {
    
  } else {
    
  }
  expandedurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expandedurl);
  // @@protoc_insertion_point(field_set_allocated:proto.URLEntityP.expandedURL)
}

// string url = 4;
inline void URLEntityP::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& URLEntityP::url() const {
  // @@protoc_insertion_point(field_get:proto.URLEntityP.url)
  return _internal_url();
}
inline void URLEntityP::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.URLEntityP.url)
}
inline std::string* URLEntityP::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.URLEntityP.url)
  return _internal_mutable_url();
}
inline const std::string& URLEntityP::_internal_url() const {
  return url_.GetNoArena();
}
inline void URLEntityP::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void URLEntityP::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.URLEntityP.url)
}
inline void URLEntityP::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.URLEntityP.url)
}
inline void URLEntityP::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.URLEntityP.url)
}
inline std::string* URLEntityP::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* URLEntityP::release_url() {
  // @@protoc_insertion_point(field_release:proto.URLEntityP.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void URLEntityP::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.URLEntityP.url)
}

// -------------------------------------------------------------------

// HashtagEntityP

// repeated int32 indices = 1;
inline int HashtagEntityP::_internal_indices_size() const {
  return indices_.size();
}
inline int HashtagEntityP::indices_size() const {
  return _internal_indices_size();
}
inline void HashtagEntityP::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HashtagEntityP::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HashtagEntityP::indices(int index) const {
  // @@protoc_insertion_point(field_get:proto.HashtagEntityP.indices)
  return _internal_indices(index);
}
inline void HashtagEntityP::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HashtagEntityP.indices)
}
inline void HashtagEntityP::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void HashtagEntityP::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:proto.HashtagEntityP.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HashtagEntityP::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
HashtagEntityP::indices() const {
  // @@protoc_insertion_point(field_list:proto.HashtagEntityP.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HashtagEntityP::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
HashtagEntityP::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:proto.HashtagEntityP.indices)
  return _internal_mutable_indices();
}

// string text = 2;
inline void HashtagEntityP::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HashtagEntityP::text() const {
  // @@protoc_insertion_point(field_get:proto.HashtagEntityP.text)
  return _internal_text();
}
inline void HashtagEntityP::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:proto.HashtagEntityP.text)
}
inline std::string* HashtagEntityP::mutable_text() {
  // @@protoc_insertion_point(field_mutable:proto.HashtagEntityP.text)
  return _internal_mutable_text();
}
inline const std::string& HashtagEntityP::_internal_text() const {
  return text_.GetNoArena();
}
inline void HashtagEntityP::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HashtagEntityP::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HashtagEntityP.text)
}
inline void HashtagEntityP::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HashtagEntityP.text)
}
inline void HashtagEntityP::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HashtagEntityP.text)
}
inline std::string* HashtagEntityP::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HashtagEntityP::release_text() {
  // @@protoc_insertion_point(field_release:proto.HashtagEntityP.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HashtagEntityP::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.HashtagEntityP.text)
}

// -------------------------------------------------------------------

// MediaEntityP

// string displayURL = 1;
inline void MediaEntityP::clear_displayurl() {
  displayurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::displayurl() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.displayURL)
  return _internal_displayurl();
}
inline void MediaEntityP::set_displayurl(const std::string& value) {
  _internal_set_displayurl(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.displayURL)
}
inline std::string* MediaEntityP::mutable_displayurl() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.displayURL)
  return _internal_mutable_displayurl();
}
inline const std::string& MediaEntityP::_internal_displayurl() const {
  return displayurl_.GetNoArena();
}
inline void MediaEntityP::_internal_set_displayurl(const std::string& value) {
  
  displayurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_displayurl(std::string&& value) {
  
  displayurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.displayURL)
}
inline void MediaEntityP::set_displayurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.displayURL)
}
inline void MediaEntityP::set_displayurl(const char* value, size_t size) {
  
  displayurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.displayURL)
}
inline std::string* MediaEntityP::_internal_mutable_displayurl() {
  
  return displayurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_displayurl() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.displayURL)
  
  return displayurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_displayurl(std::string* displayurl) {
  if (displayurl != nullptr) {
    
  } else {
    
  }
  displayurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayurl);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.displayURL)
}

// string expandedURL = 2;
inline void MediaEntityP::clear_expandedurl() {
  expandedurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::expandedurl() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.expandedURL)
  return _internal_expandedurl();
}
inline void MediaEntityP::set_expandedurl(const std::string& value) {
  _internal_set_expandedurl(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.expandedURL)
}
inline std::string* MediaEntityP::mutable_expandedurl() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.expandedURL)
  return _internal_mutable_expandedurl();
}
inline const std::string& MediaEntityP::_internal_expandedurl() const {
  return expandedurl_.GetNoArena();
}
inline void MediaEntityP::_internal_set_expandedurl(const std::string& value) {
  
  expandedurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_expandedurl(std::string&& value) {
  
  expandedurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.expandedURL)
}
inline void MediaEntityP::set_expandedurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expandedurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.expandedURL)
}
inline void MediaEntityP::set_expandedurl(const char* value, size_t size) {
  
  expandedurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.expandedURL)
}
inline std::string* MediaEntityP::_internal_mutable_expandedurl() {
  
  return expandedurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_expandedurl() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.expandedURL)
  
  return expandedurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_expandedurl(std::string* expandedurl) {
  if (expandedurl != nullptr) {
    
  } else {
    
  }
  expandedurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expandedurl);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.expandedURL)
}

// int64 id = 3;
inline void MediaEntityP::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MediaEntityP::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MediaEntityP::id() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.id)
  return _internal_id();
}
inline void MediaEntityP::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void MediaEntityP::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.id)
}

// repeated int32 indices = 4;
inline int MediaEntityP::_internal_indices_size() const {
  return indices_.size();
}
inline int MediaEntityP::indices_size() const {
  return _internal_indices_size();
}
inline void MediaEntityP::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaEntityP::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaEntityP::indices(int index) const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.indices)
  return _internal_indices(index);
}
inline void MediaEntityP::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.indices)
}
inline void MediaEntityP::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void MediaEntityP::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:proto.MediaEntityP.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MediaEntityP::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MediaEntityP::indices() const {
  // @@protoc_insertion_point(field_list:proto.MediaEntityP.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MediaEntityP::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MediaEntityP::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:proto.MediaEntityP.indices)
  return _internal_mutable_indices();
}

// string mediaURL = 5;
inline void MediaEntityP::clear_mediaurl() {
  mediaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::mediaurl() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.mediaURL)
  return _internal_mediaurl();
}
inline void MediaEntityP::set_mediaurl(const std::string& value) {
  _internal_set_mediaurl(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.mediaURL)
}
inline std::string* MediaEntityP::mutable_mediaurl() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.mediaURL)
  return _internal_mutable_mediaurl();
}
inline const std::string& MediaEntityP::_internal_mediaurl() const {
  return mediaurl_.GetNoArena();
}
inline void MediaEntityP::_internal_set_mediaurl(const std::string& value) {
  
  mediaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_mediaurl(std::string&& value) {
  
  mediaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.mediaURL)
}
inline void MediaEntityP::set_mediaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mediaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.mediaURL)
}
inline void MediaEntityP::set_mediaurl(const char* value, size_t size) {
  
  mediaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.mediaURL)
}
inline std::string* MediaEntityP::_internal_mutable_mediaurl() {
  
  return mediaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_mediaurl() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.mediaURL)
  
  return mediaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_mediaurl(std::string* mediaurl) {
  if (mediaurl != nullptr) {
    
  } else {
    
  }
  mediaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mediaurl);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.mediaURL)
}

// string mediaURLHttps = 6;
inline void MediaEntityP::clear_mediaurlhttps() {
  mediaurlhttps_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::mediaurlhttps() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.mediaURLHttps)
  return _internal_mediaurlhttps();
}
inline void MediaEntityP::set_mediaurlhttps(const std::string& value) {
  _internal_set_mediaurlhttps(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.mediaURLHttps)
}
inline std::string* MediaEntityP::mutable_mediaurlhttps() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.mediaURLHttps)
  return _internal_mutable_mediaurlhttps();
}
inline const std::string& MediaEntityP::_internal_mediaurlhttps() const {
  return mediaurlhttps_.GetNoArena();
}
inline void MediaEntityP::_internal_set_mediaurlhttps(const std::string& value) {
  
  mediaurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_mediaurlhttps(std::string&& value) {
  
  mediaurlhttps_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.mediaURLHttps)
}
inline void MediaEntityP::set_mediaurlhttps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mediaurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.mediaURLHttps)
}
inline void MediaEntityP::set_mediaurlhttps(const char* value, size_t size) {
  
  mediaurlhttps_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.mediaURLHttps)
}
inline std::string* MediaEntityP::_internal_mutable_mediaurlhttps() {
  
  return mediaurlhttps_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_mediaurlhttps() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.mediaURLHttps)
  
  return mediaurlhttps_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_mediaurlhttps(std::string* mediaurlhttps) {
  if (mediaurlhttps != nullptr) {
    
  } else {
    
  }
  mediaurlhttps_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mediaurlhttps);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.mediaURLHttps)
}

// .proto.MediaSizesEntityP sizes = 7;
inline bool MediaEntityP::_internal_has_sizes() const {
  return this != internal_default_instance() && sizes_ != nullptr;
}
inline bool MediaEntityP::has_sizes() const {
  return _internal_has_sizes();
}
inline void MediaEntityP::clear_sizes() {
  if (GetArenaNoVirtual() == nullptr && sizes_ != nullptr) {
    delete sizes_;
  }
  sizes_ = nullptr;
}
inline const ::proto::MediaSizesEntityP& MediaEntityP::_internal_sizes() const {
  const ::proto::MediaSizesEntityP* p = sizes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::MediaSizesEntityP*>(
      &::proto::_MediaSizesEntityP_default_instance_);
}
inline const ::proto::MediaSizesEntityP& MediaEntityP::sizes() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.sizes)
  return _internal_sizes();
}
inline ::proto::MediaSizesEntityP* MediaEntityP::release_sizes() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.sizes)
  
  ::proto::MediaSizesEntityP* temp = sizes_;
  sizes_ = nullptr;
  return temp;
}
inline ::proto::MediaSizesEntityP* MediaEntityP::_internal_mutable_sizes() {
  
  if (sizes_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MediaSizesEntityP>(GetArenaNoVirtual());
    sizes_ = p;
  }
  return sizes_;
}
inline ::proto::MediaSizesEntityP* MediaEntityP::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.sizes)
  return _internal_mutable_sizes();
}
inline void MediaEntityP::set_allocated_sizes(::proto::MediaSizesEntityP* sizes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sizes_;
  }
  if (sizes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sizes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizes, submessage_arena);
    }
    
  } else {
    
  }
  sizes_ = sizes;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.sizes)
}

// string type = 8;
inline void MediaEntityP::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::type() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.type)
  return _internal_type();
}
inline void MediaEntityP::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.type)
}
inline std::string* MediaEntityP::mutable_type() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.type)
  return _internal_mutable_type();
}
inline const std::string& MediaEntityP::_internal_type() const {
  return type_.GetNoArena();
}
inline void MediaEntityP::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.type)
}
inline void MediaEntityP::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.type)
}
inline void MediaEntityP::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.type)
}
inline std::string* MediaEntityP::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_type() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.type)
}

// int64 sourceStatusId = 9;
inline void MediaEntityP::clear_sourcestatusid() {
  sourcestatusid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MediaEntityP::_internal_sourcestatusid() const {
  return sourcestatusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MediaEntityP::sourcestatusid() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.sourceStatusId)
  return _internal_sourcestatusid();
}
inline void MediaEntityP::_internal_set_sourcestatusid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sourcestatusid_ = value;
}
inline void MediaEntityP::set_sourcestatusid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sourcestatusid(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.sourceStatusId)
}

// string sourceStatusIdStr = 10;
inline void MediaEntityP::clear_sourcestatusidstr() {
  sourcestatusidstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::sourcestatusidstr() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.sourceStatusIdStr)
  return _internal_sourcestatusidstr();
}
inline void MediaEntityP::set_sourcestatusidstr(const std::string& value) {
  _internal_set_sourcestatusidstr(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.sourceStatusIdStr)
}
inline std::string* MediaEntityP::mutable_sourcestatusidstr() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.sourceStatusIdStr)
  return _internal_mutable_sourcestatusidstr();
}
inline const std::string& MediaEntityP::_internal_sourcestatusidstr() const {
  return sourcestatusidstr_.GetNoArena();
}
inline void MediaEntityP::_internal_set_sourcestatusidstr(const std::string& value) {
  
  sourcestatusidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_sourcestatusidstr(std::string&& value) {
  
  sourcestatusidstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.sourceStatusIdStr)
}
inline void MediaEntityP::set_sourcestatusidstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcestatusidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.sourceStatusIdStr)
}
inline void MediaEntityP::set_sourcestatusidstr(const char* value, size_t size) {
  
  sourcestatusidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.sourceStatusIdStr)
}
inline std::string* MediaEntityP::_internal_mutable_sourcestatusidstr() {
  
  return sourcestatusidstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_sourcestatusidstr() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.sourceStatusIdStr)
  
  return sourcestatusidstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_sourcestatusidstr(std::string* sourcestatusidstr) {
  if (sourcestatusidstr != nullptr) {
    
  } else {
    
  }
  sourcestatusidstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcestatusidstr);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.sourceStatusIdStr)
}

// string url = 11;
inline void MediaEntityP::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MediaEntityP::url() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.url)
  return _internal_url();
}
inline void MediaEntityP::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.MediaEntityP.url)
}
inline std::string* MediaEntityP::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.url)
  return _internal_mutable_url();
}
inline const std::string& MediaEntityP::_internal_url() const {
  return url_.GetNoArena();
}
inline void MediaEntityP::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaEntityP::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MediaEntityP.url)
}
inline void MediaEntityP::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MediaEntityP.url)
}
inline void MediaEntityP::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MediaEntityP.url)
}
inline std::string* MediaEntityP::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaEntityP::release_url() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaEntityP::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.url)
}

// .proto.VideoEntityP videoInfo = 12;
inline bool MediaEntityP::_internal_has_videoinfo() const {
  return this != internal_default_instance() && videoinfo_ != nullptr;
}
inline bool MediaEntityP::has_videoinfo() const {
  return _internal_has_videoinfo();
}
inline void MediaEntityP::clear_videoinfo() {
  if (GetArenaNoVirtual() == nullptr && videoinfo_ != nullptr) {
    delete videoinfo_;
  }
  videoinfo_ = nullptr;
}
inline const ::proto::VideoEntityP& MediaEntityP::_internal_videoinfo() const {
  const ::proto::VideoEntityP* p = videoinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::VideoEntityP*>(
      &::proto::_VideoEntityP_default_instance_);
}
inline const ::proto::VideoEntityP& MediaEntityP::videoinfo() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.videoInfo)
  return _internal_videoinfo();
}
inline ::proto::VideoEntityP* MediaEntityP::release_videoinfo() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.videoInfo)
  
  ::proto::VideoEntityP* temp = videoinfo_;
  videoinfo_ = nullptr;
  return temp;
}
inline ::proto::VideoEntityP* MediaEntityP::_internal_mutable_videoinfo() {
  
  if (videoinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::VideoEntityP>(GetArenaNoVirtual());
    videoinfo_ = p;
  }
  return videoinfo_;
}
inline ::proto::VideoEntityP* MediaEntityP::mutable_videoinfo() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.videoInfo)
  return _internal_mutable_videoinfo();
}
inline void MediaEntityP::set_allocated_videoinfo(::proto::VideoEntityP* videoinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete videoinfo_;
  }
  if (videoinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      videoinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videoinfo, submessage_arena);
    }
    
  } else {
    
  }
  videoinfo_ = videoinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.videoInfo)
}

// .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 13;
inline bool MediaEntityP::_internal_has_additionalmediainfo() const {
  return this != internal_default_instance() && additionalmediainfo_ != nullptr;
}
inline bool MediaEntityP::has_additionalmediainfo() const {
  return _internal_has_additionalmediainfo();
}
inline void MediaEntityP::clear_additionalmediainfo() {
  if (GetArenaNoVirtual() == nullptr && additionalmediainfo_ != nullptr) {
    delete additionalmediainfo_;
  }
  additionalmediainfo_ = nullptr;
}
inline const ::proto::AdditionalMediaInfoEntityP& MediaEntityP::_internal_additionalmediainfo() const {
  const ::proto::AdditionalMediaInfoEntityP* p = additionalmediainfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::AdditionalMediaInfoEntityP*>(
      &::proto::_AdditionalMediaInfoEntityP_default_instance_);
}
inline const ::proto::AdditionalMediaInfoEntityP& MediaEntityP::additionalmediainfo() const {
  // @@protoc_insertion_point(field_get:proto.MediaEntityP.additionalMediaInfo)
  return _internal_additionalmediainfo();
}
inline ::proto::AdditionalMediaInfoEntityP* MediaEntityP::release_additionalmediainfo() {
  // @@protoc_insertion_point(field_release:proto.MediaEntityP.additionalMediaInfo)
  
  ::proto::AdditionalMediaInfoEntityP* temp = additionalmediainfo_;
  additionalmediainfo_ = nullptr;
  return temp;
}
inline ::proto::AdditionalMediaInfoEntityP* MediaEntityP::_internal_mutable_additionalmediainfo() {
  
  if (additionalmediainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::AdditionalMediaInfoEntityP>(GetArenaNoVirtual());
    additionalmediainfo_ = p;
  }
  return additionalmediainfo_;
}
inline ::proto::AdditionalMediaInfoEntityP* MediaEntityP::mutable_additionalmediainfo() {
  // @@protoc_insertion_point(field_mutable:proto.MediaEntityP.additionalMediaInfo)
  return _internal_mutable_additionalmediainfo();
}
inline void MediaEntityP::set_allocated_additionalmediainfo(::proto::AdditionalMediaInfoEntityP* additionalmediainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete additionalmediainfo_;
  }
  if (additionalmediainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      additionalmediainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additionalmediainfo, submessage_arena);
    }
    
  } else {
    
  }
  additionalmediainfo_ = additionalmediainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaEntityP.additionalMediaInfo)
}

// -------------------------------------------------------------------

// UserMentionEntityP

// int64 id = 1;
inline void UserMentionEntityP::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserMentionEntityP::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserMentionEntityP::id() const {
  // @@protoc_insertion_point(field_get:proto.UserMentionEntityP.id)
  return _internal_id();
}
inline void UserMentionEntityP::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UserMentionEntityP::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.UserMentionEntityP.id)
}

// string idStr = 2;
inline void UserMentionEntityP::clear_idstr() {
  idstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserMentionEntityP::idstr() const {
  // @@protoc_insertion_point(field_get:proto.UserMentionEntityP.idStr)
  return _internal_idstr();
}
inline void UserMentionEntityP::set_idstr(const std::string& value) {
  _internal_set_idstr(value);
  // @@protoc_insertion_point(field_set:proto.UserMentionEntityP.idStr)
}
inline std::string* UserMentionEntityP::mutable_idstr() {
  // @@protoc_insertion_point(field_mutable:proto.UserMentionEntityP.idStr)
  return _internal_mutable_idstr();
}
inline const std::string& UserMentionEntityP::_internal_idstr() const {
  return idstr_.GetNoArena();
}
inline void UserMentionEntityP::_internal_set_idstr(const std::string& value) {
  
  idstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserMentionEntityP::set_idstr(std::string&& value) {
  
  idstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserMentionEntityP.idStr)
}
inline void UserMentionEntityP::set_idstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserMentionEntityP.idStr)
}
inline void UserMentionEntityP::set_idstr(const char* value, size_t size) {
  
  idstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserMentionEntityP.idStr)
}
inline std::string* UserMentionEntityP::_internal_mutable_idstr() {
  
  return idstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserMentionEntityP::release_idstr() {
  // @@protoc_insertion_point(field_release:proto.UserMentionEntityP.idStr)
  
  return idstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserMentionEntityP::set_allocated_idstr(std::string* idstr) {
  if (idstr != nullptr) {
    
  } else {
    
  }
  idstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idstr);
  // @@protoc_insertion_point(field_set_allocated:proto.UserMentionEntityP.idStr)
}

// repeated int32 indices = 3;
inline int UserMentionEntityP::_internal_indices_size() const {
  return indices_.size();
}
inline int UserMentionEntityP::indices_size() const {
  return _internal_indices_size();
}
inline void UserMentionEntityP::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserMentionEntityP::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserMentionEntityP::indices(int index) const {
  // @@protoc_insertion_point(field_get:proto.UserMentionEntityP.indices)
  return _internal_indices(index);
}
inline void UserMentionEntityP::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.UserMentionEntityP.indices)
}
inline void UserMentionEntityP::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void UserMentionEntityP::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:proto.UserMentionEntityP.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserMentionEntityP::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserMentionEntityP::indices() const {
  // @@protoc_insertion_point(field_list:proto.UserMentionEntityP.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserMentionEntityP::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserMentionEntityP::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:proto.UserMentionEntityP.indices)
  return _internal_mutable_indices();
}

// string name = 4;
inline void UserMentionEntityP::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserMentionEntityP::name() const {
  // @@protoc_insertion_point(field_get:proto.UserMentionEntityP.name)
  return _internal_name();
}
inline void UserMentionEntityP::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.UserMentionEntityP.name)
}
inline std::string* UserMentionEntityP::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.UserMentionEntityP.name)
  return _internal_mutable_name();
}
inline const std::string& UserMentionEntityP::_internal_name() const {
  return name_.GetNoArena();
}
inline void UserMentionEntityP::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserMentionEntityP::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserMentionEntityP.name)
}
inline void UserMentionEntityP::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserMentionEntityP.name)
}
inline void UserMentionEntityP::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserMentionEntityP.name)
}
inline std::string* UserMentionEntityP::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserMentionEntityP::release_name() {
  // @@protoc_insertion_point(field_release:proto.UserMentionEntityP.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserMentionEntityP::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.UserMentionEntityP.name)
}

// string screenName = 5;
inline void UserMentionEntityP::clear_screenname() {
  screenname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserMentionEntityP::screenname() const {
  // @@protoc_insertion_point(field_get:proto.UserMentionEntityP.screenName)
  return _internal_screenname();
}
inline void UserMentionEntityP::set_screenname(const std::string& value) {
  _internal_set_screenname(value);
  // @@protoc_insertion_point(field_set:proto.UserMentionEntityP.screenName)
}
inline std::string* UserMentionEntityP::mutable_screenname() {
  // @@protoc_insertion_point(field_mutable:proto.UserMentionEntityP.screenName)
  return _internal_mutable_screenname();
}
inline const std::string& UserMentionEntityP::_internal_screenname() const {
  return screenname_.GetNoArena();
}
inline void UserMentionEntityP::_internal_set_screenname(const std::string& value) {
  
  screenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserMentionEntityP::set_screenname(std::string&& value) {
  
  screenname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserMentionEntityP.screenName)
}
inline void UserMentionEntityP::set_screenname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  screenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserMentionEntityP.screenName)
}
inline void UserMentionEntityP::set_screenname(const char* value, size_t size) {
  
  screenname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserMentionEntityP.screenName)
}
inline std::string* UserMentionEntityP::_internal_mutable_screenname() {
  
  return screenname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserMentionEntityP::release_screenname() {
  // @@protoc_insertion_point(field_release:proto.UserMentionEntityP.screenName)
  
  return screenname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserMentionEntityP::set_allocated_screenname(std::string* screenname) {
  if (screenname != nullptr) {
    
  } else {
    
  }
  screenname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), screenname);
  // @@protoc_insertion_point(field_set_allocated:proto.UserMentionEntityP.screenName)
}

// -------------------------------------------------------------------

// SymbolEntityP

// repeated int32 indices = 1;
inline int SymbolEntityP::_internal_indices_size() const {
  return indices_.size();
}
inline int SymbolEntityP::indices_size() const {
  return _internal_indices_size();
}
inline void SymbolEntityP::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SymbolEntityP::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SymbolEntityP::indices(int index) const {
  // @@protoc_insertion_point(field_get:proto.SymbolEntityP.indices)
  return _internal_indices(index);
}
inline void SymbolEntityP::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SymbolEntityP.indices)
}
inline void SymbolEntityP::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void SymbolEntityP::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:proto.SymbolEntityP.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SymbolEntityP::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SymbolEntityP::indices() const {
  // @@protoc_insertion_point(field_list:proto.SymbolEntityP.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SymbolEntityP::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SymbolEntityP::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:proto.SymbolEntityP.indices)
  return _internal_mutable_indices();
}

// string text = 2;
inline void SymbolEntityP::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SymbolEntityP::text() const {
  // @@protoc_insertion_point(field_get:proto.SymbolEntityP.text)
  return _internal_text();
}
inline void SymbolEntityP::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:proto.SymbolEntityP.text)
}
inline std::string* SymbolEntityP::mutable_text() {
  // @@protoc_insertion_point(field_mutable:proto.SymbolEntityP.text)
  return _internal_mutable_text();
}
inline const std::string& SymbolEntityP::_internal_text() const {
  return text_.GetNoArena();
}
inline void SymbolEntityP::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SymbolEntityP::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SymbolEntityP.text)
}
inline void SymbolEntityP::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SymbolEntityP.text)
}
inline void SymbolEntityP::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SymbolEntityP.text)
}
inline std::string* SymbolEntityP::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SymbolEntityP::release_text() {
  // @@protoc_insertion_point(field_release:proto.SymbolEntityP.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SymbolEntityP::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.SymbolEntityP.text)
}

// -------------------------------------------------------------------

// PollEntityP

// repeated .proto.OptionEntityP options = 1;
inline int PollEntityP::_internal_options_size() const {
  return options_.size();
}
inline int PollEntityP::options_size() const {
  return _internal_options_size();
}
inline void PollEntityP::clear_options() {
  options_.Clear();
}
inline ::proto::OptionEntityP* PollEntityP::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PollEntityP.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionEntityP >*
PollEntityP::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:proto.PollEntityP.options)
  return &options_;
}
inline const ::proto::OptionEntityP& PollEntityP::_internal_options(int index) const {
  return options_.Get(index);
}
inline const ::proto::OptionEntityP& PollEntityP::options(int index) const {
  // @@protoc_insertion_point(field_get:proto.PollEntityP.options)
  return _internal_options(index);
}
inline ::proto::OptionEntityP* PollEntityP::_internal_add_options() {
  return options_.Add();
}
inline ::proto::OptionEntityP* PollEntityP::add_options() {
  // @@protoc_insertion_point(field_add:proto.PollEntityP.options)
  return _internal_add_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::OptionEntityP >&
PollEntityP::options() const {
  // @@protoc_insertion_point(field_list:proto.PollEntityP.options)
  return options_;
}

// string endDatetime = 2;
inline void PollEntityP::clear_enddatetime() {
  enddatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PollEntityP::enddatetime() const {
  // @@protoc_insertion_point(field_get:proto.PollEntityP.endDatetime)
  return _internal_enddatetime();
}
inline void PollEntityP::set_enddatetime(const std::string& value) {
  _internal_set_enddatetime(value);
  // @@protoc_insertion_point(field_set:proto.PollEntityP.endDatetime)
}
inline std::string* PollEntityP::mutable_enddatetime() {
  // @@protoc_insertion_point(field_mutable:proto.PollEntityP.endDatetime)
  return _internal_mutable_enddatetime();
}
inline const std::string& PollEntityP::_internal_enddatetime() const {
  return enddatetime_.GetNoArena();
}
inline void PollEntityP::_internal_set_enddatetime(const std::string& value) {
  
  enddatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PollEntityP::set_enddatetime(std::string&& value) {
  
  enddatetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PollEntityP.endDatetime)
}
inline void PollEntityP::set_enddatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enddatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PollEntityP.endDatetime)
}
inline void PollEntityP::set_enddatetime(const char* value, size_t size) {
  
  enddatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PollEntityP.endDatetime)
}
inline std::string* PollEntityP::_internal_mutable_enddatetime() {
  
  return enddatetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PollEntityP::release_enddatetime() {
  // @@protoc_insertion_point(field_release:proto.PollEntityP.endDatetime)
  
  return enddatetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PollEntityP::set_allocated_enddatetime(std::string* enddatetime) {
  if (enddatetime != nullptr) {
    
  } else {
    
  }
  enddatetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddatetime);
  // @@protoc_insertion_point(field_set_allocated:proto.PollEntityP.endDatetime)
}

// string durationMinutes = 3;
inline void PollEntityP::clear_durationminutes() {
  durationminutes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PollEntityP::durationminutes() const {
  // @@protoc_insertion_point(field_get:proto.PollEntityP.durationMinutes)
  return _internal_durationminutes();
}
inline void PollEntityP::set_durationminutes(const std::string& value) {
  _internal_set_durationminutes(value);
  // @@protoc_insertion_point(field_set:proto.PollEntityP.durationMinutes)
}
inline std::string* PollEntityP::mutable_durationminutes() {
  // @@protoc_insertion_point(field_mutable:proto.PollEntityP.durationMinutes)
  return _internal_mutable_durationminutes();
}
inline const std::string& PollEntityP::_internal_durationminutes() const {
  return durationminutes_.GetNoArena();
}
inline void PollEntityP::_internal_set_durationminutes(const std::string& value) {
  
  durationminutes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PollEntityP::set_durationminutes(std::string&& value) {
  
  durationminutes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PollEntityP.durationMinutes)
}
inline void PollEntityP::set_durationminutes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  durationminutes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PollEntityP.durationMinutes)
}
inline void PollEntityP::set_durationminutes(const char* value, size_t size) {
  
  durationminutes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PollEntityP.durationMinutes)
}
inline std::string* PollEntityP::_internal_mutable_durationminutes() {
  
  return durationminutes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PollEntityP::release_durationminutes() {
  // @@protoc_insertion_point(field_release:proto.PollEntityP.durationMinutes)
  
  return durationminutes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PollEntityP::set_allocated_durationminutes(std::string* durationminutes) {
  if (durationminutes != nullptr) {
    
  } else {
    
  }
  durationminutes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), durationminutes);
  // @@protoc_insertion_point(field_set_allocated:proto.PollEntityP.durationMinutes)
}

// -------------------------------------------------------------------

// MediaSizesEntityP

// .proto.SizeEntityP thumb = 1;
inline bool MediaSizesEntityP::_internal_has_thumb() const {
  return this != internal_default_instance() && thumb_ != nullptr;
}
inline bool MediaSizesEntityP::has_thumb() const {
  return _internal_has_thumb();
}
inline void MediaSizesEntityP::clear_thumb() {
  if (GetArenaNoVirtual() == nullptr && thumb_ != nullptr) {
    delete thumb_;
  }
  thumb_ = nullptr;
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::_internal_thumb() const {
  const ::proto::SizeEntityP* p = thumb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::SizeEntityP*>(
      &::proto::_SizeEntityP_default_instance_);
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::thumb() const {
  // @@protoc_insertion_point(field_get:proto.MediaSizesEntityP.thumb)
  return _internal_thumb();
}
inline ::proto::SizeEntityP* MediaSizesEntityP::release_thumb() {
  // @@protoc_insertion_point(field_release:proto.MediaSizesEntityP.thumb)
  
  ::proto::SizeEntityP* temp = thumb_;
  thumb_ = nullptr;
  return temp;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::_internal_mutable_thumb() {
  
  if (thumb_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SizeEntityP>(GetArenaNoVirtual());
    thumb_ = p;
  }
  return thumb_;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::mutable_thumb() {
  // @@protoc_insertion_point(field_mutable:proto.MediaSizesEntityP.thumb)
  return _internal_mutable_thumb();
}
inline void MediaSizesEntityP::set_allocated_thumb(::proto::SizeEntityP* thumb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thumb_;
  }
  if (thumb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thumb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumb, submessage_arena);
    }
    
  } else {
    
  }
  thumb_ = thumb;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaSizesEntityP.thumb)
}

// .proto.SizeEntityP large = 2;
inline bool MediaSizesEntityP::_internal_has_large() const {
  return this != internal_default_instance() && large_ != nullptr;
}
inline bool MediaSizesEntityP::has_large() const {
  return _internal_has_large();
}
inline void MediaSizesEntityP::clear_large() {
  if (GetArenaNoVirtual() == nullptr && large_ != nullptr) {
    delete large_;
  }
  large_ = nullptr;
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::_internal_large() const {
  const ::proto::SizeEntityP* p = large_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::SizeEntityP*>(
      &::proto::_SizeEntityP_default_instance_);
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::large() const {
  // @@protoc_insertion_point(field_get:proto.MediaSizesEntityP.large)
  return _internal_large();
}
inline ::proto::SizeEntityP* MediaSizesEntityP::release_large() {
  // @@protoc_insertion_point(field_release:proto.MediaSizesEntityP.large)
  
  ::proto::SizeEntityP* temp = large_;
  large_ = nullptr;
  return temp;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::_internal_mutable_large() {
  
  if (large_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SizeEntityP>(GetArenaNoVirtual());
    large_ = p;
  }
  return large_;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::mutable_large() {
  // @@protoc_insertion_point(field_mutable:proto.MediaSizesEntityP.large)
  return _internal_mutable_large();
}
inline void MediaSizesEntityP::set_allocated_large(::proto::SizeEntityP* large) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete large_;
  }
  if (large) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large, submessage_arena);
    }
    
  } else {
    
  }
  large_ = large;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaSizesEntityP.large)
}

// .proto.SizeEntityP medium = 3;
inline bool MediaSizesEntityP::_internal_has_medium() const {
  return this != internal_default_instance() && medium_ != nullptr;
}
inline bool MediaSizesEntityP::has_medium() const {
  return _internal_has_medium();
}
inline void MediaSizesEntityP::clear_medium() {
  if (GetArenaNoVirtual() == nullptr && medium_ != nullptr) {
    delete medium_;
  }
  medium_ = nullptr;
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::_internal_medium() const {
  const ::proto::SizeEntityP* p = medium_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::SizeEntityP*>(
      &::proto::_SizeEntityP_default_instance_);
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::medium() const {
  // @@protoc_insertion_point(field_get:proto.MediaSizesEntityP.medium)
  return _internal_medium();
}
inline ::proto::SizeEntityP* MediaSizesEntityP::release_medium() {
  // @@protoc_insertion_point(field_release:proto.MediaSizesEntityP.medium)
  
  ::proto::SizeEntityP* temp = medium_;
  medium_ = nullptr;
  return temp;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::_internal_mutable_medium() {
  
  if (medium_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SizeEntityP>(GetArenaNoVirtual());
    medium_ = p;
  }
  return medium_;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::mutable_medium() {
  // @@protoc_insertion_point(field_mutable:proto.MediaSizesEntityP.medium)
  return _internal_mutable_medium();
}
inline void MediaSizesEntityP::set_allocated_medium(::proto::SizeEntityP* medium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete medium_;
  }
  if (medium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      medium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medium, submessage_arena);
    }
    
  } else {
    
  }
  medium_ = medium;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaSizesEntityP.medium)
}

// .proto.SizeEntityP small = 4;
inline bool MediaSizesEntityP::_internal_has_small() const {
  return this != internal_default_instance() && small_ != nullptr;
}
inline bool MediaSizesEntityP::has_small() const {
  return _internal_has_small();
}
inline void MediaSizesEntityP::clear_small() {
  if (GetArenaNoVirtual() == nullptr && small_ != nullptr) {
    delete small_;
  }
  small_ = nullptr;
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::_internal_small() const {
  const ::proto::SizeEntityP* p = small_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::SizeEntityP*>(
      &::proto::_SizeEntityP_default_instance_);
}
inline const ::proto::SizeEntityP& MediaSizesEntityP::small() const {
  // @@protoc_insertion_point(field_get:proto.MediaSizesEntityP.small)
  return _internal_small();
}
inline ::proto::SizeEntityP* MediaSizesEntityP::release_small() {
  // @@protoc_insertion_point(field_release:proto.MediaSizesEntityP.small)
  
  ::proto::SizeEntityP* temp = small_;
  small_ = nullptr;
  return temp;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::_internal_mutable_small() {
  
  if (small_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SizeEntityP>(GetArenaNoVirtual());
    small_ = p;
  }
  return small_;
}
inline ::proto::SizeEntityP* MediaSizesEntityP::mutable_small() {
  // @@protoc_insertion_point(field_mutable:proto.MediaSizesEntityP.small)
  return _internal_mutable_small();
}
inline void MediaSizesEntityP::set_allocated_small(::proto::SizeEntityP* small) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete small_;
  }
  if (small) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      small = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, small, submessage_arena);
    }
    
  } else {
    
  }
  small_ = small;
  // @@protoc_insertion_point(field_set_allocated:proto.MediaSizesEntityP.small)
}

// -------------------------------------------------------------------

// SizeEntityP

// int32 width = 1;
inline void SizeEntityP::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SizeEntityP::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SizeEntityP::width() const {
  // @@protoc_insertion_point(field_get:proto.SizeEntityP.width)
  return _internal_width();
}
inline void SizeEntityP::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void SizeEntityP::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto.SizeEntityP.width)
}

// int32 height = 2;
inline void SizeEntityP::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SizeEntityP::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SizeEntityP::height() const {
  // @@protoc_insertion_point(field_get:proto.SizeEntityP.height)
  return _internal_height();
}
inline void SizeEntityP::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void SizeEntityP::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto.SizeEntityP.height)
}

// string resize = 3;
inline void SizeEntityP::clear_resize() {
  resize_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SizeEntityP::resize() const {
  // @@protoc_insertion_point(field_get:proto.SizeEntityP.resize)
  return _internal_resize();
}
inline void SizeEntityP::set_resize(const std::string& value) {
  _internal_set_resize(value);
  // @@protoc_insertion_point(field_set:proto.SizeEntityP.resize)
}
inline std::string* SizeEntityP::mutable_resize() {
  // @@protoc_insertion_point(field_mutable:proto.SizeEntityP.resize)
  return _internal_mutable_resize();
}
inline const std::string& SizeEntityP::_internal_resize() const {
  return resize_.GetNoArena();
}
inline void SizeEntityP::_internal_set_resize(const std::string& value) {
  
  resize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SizeEntityP::set_resize(std::string&& value) {
  
  resize_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SizeEntityP.resize)
}
inline void SizeEntityP::set_resize(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SizeEntityP.resize)
}
inline void SizeEntityP::set_resize(const char* value, size_t size) {
  
  resize_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SizeEntityP.resize)
}
inline std::string* SizeEntityP::_internal_mutable_resize() {
  
  return resize_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SizeEntityP::release_resize() {
  // @@protoc_insertion_point(field_release:proto.SizeEntityP.resize)
  
  return resize_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SizeEntityP::set_allocated_resize(std::string* resize) {
  if (resize != nullptr) {
    
  } else {
    
  }
  resize_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resize);
  // @@protoc_insertion_point(field_set_allocated:proto.SizeEntityP.resize)
}

// -------------------------------------------------------------------

// VariantEntityP

// int64 bitrate = 1;
inline void VariantEntityP::clear_bitrate() {
  bitrate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VariantEntityP::_internal_bitrate() const {
  return bitrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VariantEntityP::bitrate() const {
  // @@protoc_insertion_point(field_get:proto.VariantEntityP.bitrate)
  return _internal_bitrate();
}
inline void VariantEntityP::_internal_set_bitrate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bitrate_ = value;
}
inline void VariantEntityP::set_bitrate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:proto.VariantEntityP.bitrate)
}

// string contentType = 2;
inline void VariantEntityP::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantEntityP::contenttype() const {
  // @@protoc_insertion_point(field_get:proto.VariantEntityP.contentType)
  return _internal_contenttype();
}
inline void VariantEntityP::set_contenttype(const std::string& value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:proto.VariantEntityP.contentType)
}
inline std::string* VariantEntityP::mutable_contenttype() {
  // @@protoc_insertion_point(field_mutable:proto.VariantEntityP.contentType)
  return _internal_mutable_contenttype();
}
inline const std::string& VariantEntityP::_internal_contenttype() const {
  return contenttype_.GetNoArena();
}
inline void VariantEntityP::_internal_set_contenttype(const std::string& value) {
  
  contenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VariantEntityP::set_contenttype(std::string&& value) {
  
  contenttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.VariantEntityP.contentType)
}
inline void VariantEntityP::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.VariantEntityP.contentType)
}
inline void VariantEntityP::set_contenttype(const char* value, size_t size) {
  
  contenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.VariantEntityP.contentType)
}
inline std::string* VariantEntityP::_internal_mutable_contenttype() {
  
  return contenttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantEntityP::release_contenttype() {
  // @@protoc_insertion_point(field_release:proto.VariantEntityP.contentType)
  
  return contenttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantEntityP::set_allocated_contenttype(std::string* contenttype) {
  if (contenttype != nullptr) {
    
  } else {
    
  }
  contenttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:proto.VariantEntityP.contentType)
}

// string url = 3;
inline void VariantEntityP::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantEntityP::url() const {
  // @@protoc_insertion_point(field_get:proto.VariantEntityP.url)
  return _internal_url();
}
inline void VariantEntityP::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.VariantEntityP.url)
}
inline std::string* VariantEntityP::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.VariantEntityP.url)
  return _internal_mutable_url();
}
inline const std::string& VariantEntityP::_internal_url() const {
  return url_.GetNoArena();
}
inline void VariantEntityP::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VariantEntityP::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.VariantEntityP.url)
}
inline void VariantEntityP::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.VariantEntityP.url)
}
inline void VariantEntityP::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.VariantEntityP.url)
}
inline std::string* VariantEntityP::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantEntityP::release_url() {
  // @@protoc_insertion_point(field_release:proto.VariantEntityP.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantEntityP::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.VariantEntityP.url)
}

// -------------------------------------------------------------------

// VideoEntityP

// repeated int32 aspectRatio = 1;
inline int VideoEntityP::_internal_aspectratio_size() const {
  return aspectratio_.size();
}
inline int VideoEntityP::aspectratio_size() const {
  return _internal_aspectratio_size();
}
inline void VideoEntityP::clear_aspectratio() {
  aspectratio_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEntityP::_internal_aspectratio(int index) const {
  return aspectratio_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEntityP::aspectratio(int index) const {
  // @@protoc_insertion_point(field_get:proto.VideoEntityP.aspectRatio)
  return _internal_aspectratio(index);
}
inline void VideoEntityP::set_aspectratio(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  aspectratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.VideoEntityP.aspectRatio)
}
inline void VideoEntityP::_internal_add_aspectratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  aspectratio_.Add(value);
}
inline void VideoEntityP::add_aspectratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_aspectratio(value);
  // @@protoc_insertion_point(field_add:proto.VideoEntityP.aspectRatio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VideoEntityP::_internal_aspectratio() const {
  return aspectratio_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VideoEntityP::aspectratio() const {
  // @@protoc_insertion_point(field_list:proto.VideoEntityP.aspectRatio)
  return _internal_aspectratio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VideoEntityP::_internal_mutable_aspectratio() {
  return &aspectratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VideoEntityP::mutable_aspectratio() {
  // @@protoc_insertion_point(field_mutable_list:proto.VideoEntityP.aspectRatio)
  return _internal_mutable_aspectratio();
}

// int32 durationMillis = 2;
inline void VideoEntityP::clear_durationmillis() {
  durationmillis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEntityP::_internal_durationmillis() const {
  return durationmillis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoEntityP::durationmillis() const {
  // @@protoc_insertion_point(field_get:proto.VideoEntityP.durationMillis)
  return _internal_durationmillis();
}
inline void VideoEntityP::_internal_set_durationmillis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  durationmillis_ = value;
}
inline void VideoEntityP::set_durationmillis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_durationmillis(value);
  // @@protoc_insertion_point(field_set:proto.VideoEntityP.durationMillis)
}

// repeated .proto.VariantEntityP variants = 3;
inline int VideoEntityP::_internal_variants_size() const {
  return variants_.size();
}
inline int VideoEntityP::variants_size() const {
  return _internal_variants_size();
}
inline void VideoEntityP::clear_variants() {
  variants_.Clear();
}
inline ::proto::VariantEntityP* VideoEntityP::mutable_variants(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VideoEntityP.variants)
  return variants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::VariantEntityP >*
VideoEntityP::mutable_variants() {
  // @@protoc_insertion_point(field_mutable_list:proto.VideoEntityP.variants)
  return &variants_;
}
inline const ::proto::VariantEntityP& VideoEntityP::_internal_variants(int index) const {
  return variants_.Get(index);
}
inline const ::proto::VariantEntityP& VideoEntityP::variants(int index) const {
  // @@protoc_insertion_point(field_get:proto.VideoEntityP.variants)
  return _internal_variants(index);
}
inline ::proto::VariantEntityP* VideoEntityP::_internal_add_variants() {
  return variants_.Add();
}
inline ::proto::VariantEntityP* VideoEntityP::add_variants() {
  // @@protoc_insertion_point(field_add:proto.VideoEntityP.variants)
  return _internal_add_variants();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::VariantEntityP >&
VideoEntityP::variants() const {
  // @@protoc_insertion_point(field_list:proto.VideoEntityP.variants)
  return variants_;
}

// -------------------------------------------------------------------

// AdditionalMediaInfoEntityP

// string title = 1;
inline void AdditionalMediaInfoEntityP::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdditionalMediaInfoEntityP::title() const {
  // @@protoc_insertion_point(field_get:proto.AdditionalMediaInfoEntityP.title)
  return _internal_title();
}
inline void AdditionalMediaInfoEntityP::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:proto.AdditionalMediaInfoEntityP.title)
}
inline std::string* AdditionalMediaInfoEntityP::mutable_title() {
  // @@protoc_insertion_point(field_mutable:proto.AdditionalMediaInfoEntityP.title)
  return _internal_mutable_title();
}
inline const std::string& AdditionalMediaInfoEntityP::_internal_title() const {
  return title_.GetNoArena();
}
inline void AdditionalMediaInfoEntityP::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AdditionalMediaInfoEntityP::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AdditionalMediaInfoEntityP.title)
}
inline void AdditionalMediaInfoEntityP::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AdditionalMediaInfoEntityP.title)
}
inline void AdditionalMediaInfoEntityP::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AdditionalMediaInfoEntityP.title)
}
inline std::string* AdditionalMediaInfoEntityP::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdditionalMediaInfoEntityP::release_title() {
  // @@protoc_insertion_point(field_release:proto.AdditionalMediaInfoEntityP.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdditionalMediaInfoEntityP::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.AdditionalMediaInfoEntityP.title)
}

// string description = 2;
inline void AdditionalMediaInfoEntityP::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdditionalMediaInfoEntityP::description() const {
  // @@protoc_insertion_point(field_get:proto.AdditionalMediaInfoEntityP.description)
  return _internal_description();
}
inline void AdditionalMediaInfoEntityP::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:proto.AdditionalMediaInfoEntityP.description)
}
inline std::string* AdditionalMediaInfoEntityP::mutable_description() {
  // @@protoc_insertion_point(field_mutable:proto.AdditionalMediaInfoEntityP.description)
  return _internal_mutable_description();
}
inline const std::string& AdditionalMediaInfoEntityP::_internal_description() const {
  return description_.GetNoArena();
}
inline void AdditionalMediaInfoEntityP::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AdditionalMediaInfoEntityP::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AdditionalMediaInfoEntityP.description)
}
inline void AdditionalMediaInfoEntityP::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AdditionalMediaInfoEntityP.description)
}
inline void AdditionalMediaInfoEntityP::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AdditionalMediaInfoEntityP.description)
}
inline std::string* AdditionalMediaInfoEntityP::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdditionalMediaInfoEntityP::release_description() {
  // @@protoc_insertion_point(field_release:proto.AdditionalMediaInfoEntityP.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdditionalMediaInfoEntityP::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.AdditionalMediaInfoEntityP.description)
}

// bool embeddable = 3;
inline void AdditionalMediaInfoEntityP::clear_embeddable() {
  embeddable_ = false;
}
inline bool AdditionalMediaInfoEntityP::_internal_embeddable() const {
  return embeddable_;
}
inline bool AdditionalMediaInfoEntityP::embeddable() const {
  // @@protoc_insertion_point(field_get:proto.AdditionalMediaInfoEntityP.embeddable)
  return _internal_embeddable();
}
inline void AdditionalMediaInfoEntityP::_internal_set_embeddable(bool value) {
  
  embeddable_ = value;
}
inline void AdditionalMediaInfoEntityP::set_embeddable(bool value) {
  _internal_set_embeddable(value);
  // @@protoc_insertion_point(field_set:proto.AdditionalMediaInfoEntityP.embeddable)
}

// bool monetizable = 4;
inline void AdditionalMediaInfoEntityP::clear_monetizable() {
  monetizable_ = false;
}
inline bool AdditionalMediaInfoEntityP::_internal_monetizable() const {
  return monetizable_;
}
inline bool AdditionalMediaInfoEntityP::monetizable() const {
  // @@protoc_insertion_point(field_get:proto.AdditionalMediaInfoEntityP.monetizable)
  return _internal_monetizable();
}
inline void AdditionalMediaInfoEntityP::_internal_set_monetizable(bool value) {
  
  monetizable_ = value;
}
inline void AdditionalMediaInfoEntityP::set_monetizable(bool value) {
  _internal_set_monetizable(value);
  // @@protoc_insertion_point(field_set:proto.AdditionalMediaInfoEntityP.monetizable)
}

// -------------------------------------------------------------------

// OptionEntityP

// int32 position = 1;
inline void OptionEntityP::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionEntityP::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionEntityP::position() const {
  // @@protoc_insertion_point(field_get:proto.OptionEntityP.position)
  return _internal_position();
}
inline void OptionEntityP::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void OptionEntityP::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:proto.OptionEntityP.position)
}

// string text = 2;
inline void OptionEntityP::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OptionEntityP::text() const {
  // @@protoc_insertion_point(field_get:proto.OptionEntityP.text)
  return _internal_text();
}
inline void OptionEntityP::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:proto.OptionEntityP.text)
}
inline std::string* OptionEntityP::mutable_text() {
  // @@protoc_insertion_point(field_mutable:proto.OptionEntityP.text)
  return _internal_mutable_text();
}
inline const std::string& OptionEntityP::_internal_text() const {
  return text_.GetNoArena();
}
inline void OptionEntityP::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OptionEntityP::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.OptionEntityP.text)
}
inline void OptionEntityP::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.OptionEntityP.text)
}
inline void OptionEntityP::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.OptionEntityP.text)
}
inline std::string* OptionEntityP::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OptionEntityP::release_text() {
  // @@protoc_insertion_point(field_release:proto.OptionEntityP.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OptionEntityP::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.OptionEntityP.text)
}

// -------------------------------------------------------------------

// MatchingRulesEntityP

// string tag = 1;
inline void MatchingRulesEntityP::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchingRulesEntityP::tag() const {
  // @@protoc_insertion_point(field_get:proto.MatchingRulesEntityP.tag)
  return _internal_tag();
}
inline void MatchingRulesEntityP::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:proto.MatchingRulesEntityP.tag)
}
inline std::string* MatchingRulesEntityP::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:proto.MatchingRulesEntityP.tag)
  return _internal_mutable_tag();
}
inline const std::string& MatchingRulesEntityP::_internal_tag() const {
  return tag_.GetNoArena();
}
inline void MatchingRulesEntityP::_internal_set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MatchingRulesEntityP::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MatchingRulesEntityP.tag)
}
inline void MatchingRulesEntityP::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MatchingRulesEntityP.tag)
}
inline void MatchingRulesEntityP::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MatchingRulesEntityP.tag)
}
inline std::string* MatchingRulesEntityP::_internal_mutable_tag() {
  
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchingRulesEntityP::release_tag() {
  // @@protoc_insertion_point(field_release:proto.MatchingRulesEntityP.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRulesEntityP::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.MatchingRulesEntityP.tag)
}

// int64 id = 2;
inline void MatchingRulesEntityP::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchingRulesEntityP::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchingRulesEntityP::id() const {
  // @@protoc_insertion_point(field_get:proto.MatchingRulesEntityP.id)
  return _internal_id();
}
inline void MatchingRulesEntityP::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void MatchingRulesEntityP::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.MatchingRulesEntityP.id)
}

// string idStr = 3;
inline void MatchingRulesEntityP::clear_idstr() {
  idstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchingRulesEntityP::idstr() const {
  // @@protoc_insertion_point(field_get:proto.MatchingRulesEntityP.idStr)
  return _internal_idstr();
}
inline void MatchingRulesEntityP::set_idstr(const std::string& value) {
  _internal_set_idstr(value);
  // @@protoc_insertion_point(field_set:proto.MatchingRulesEntityP.idStr)
}
inline std::string* MatchingRulesEntityP::mutable_idstr() {
  // @@protoc_insertion_point(field_mutable:proto.MatchingRulesEntityP.idStr)
  return _internal_mutable_idstr();
}
inline const std::string& MatchingRulesEntityP::_internal_idstr() const {
  return idstr_.GetNoArena();
}
inline void MatchingRulesEntityP::_internal_set_idstr(const std::string& value) {
  
  idstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MatchingRulesEntityP::set_idstr(std::string&& value) {
  
  idstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MatchingRulesEntityP.idStr)
}
inline void MatchingRulesEntityP::set_idstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MatchingRulesEntityP.idStr)
}
inline void MatchingRulesEntityP::set_idstr(const char* value, size_t size) {
  
  idstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MatchingRulesEntityP.idStr)
}
inline std::string* MatchingRulesEntityP::_internal_mutable_idstr() {
  
  return idstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchingRulesEntityP::release_idstr() {
  // @@protoc_insertion_point(field_release:proto.MatchingRulesEntityP.idStr)
  
  return idstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRulesEntityP::set_allocated_idstr(std::string* idstr) {
  if (idstr != nullptr) {
    
  } else {
    
  }
  idstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idstr);
  // @@protoc_insertion_point(field_set_allocated:proto.MatchingRulesEntityP.idStr)
}

// -------------------------------------------------------------------

// MapFieldEntry

// string key = 1;
inline void MapFieldEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapFieldEntry::key() const {
  // @@protoc_insertion_point(field_get:proto.MapFieldEntry.key)
  return _internal_key();
}
inline void MapFieldEntry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:proto.MapFieldEntry.key)
}
inline std::string* MapFieldEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:proto.MapFieldEntry.key)
  return _internal_mutable_key();
}
inline const std::string& MapFieldEntry::_internal_key() const {
  return key_.GetNoArena();
}
inline void MapFieldEntry::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapFieldEntry::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MapFieldEntry.key)
}
inline void MapFieldEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MapFieldEntry.key)
}
inline void MapFieldEntry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MapFieldEntry.key)
}
inline std::string* MapFieldEntry::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapFieldEntry::release_key() {
  // @@protoc_insertion_point(field_release:proto.MapFieldEntry.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapFieldEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.MapFieldEntry.key)
}

// bool value = 2;
inline void MapFieldEntry::clear_value() {
  value_ = false;
}
inline bool MapFieldEntry::_internal_value() const {
  return value_;
}
inline bool MapFieldEntry::value() const {
  // @@protoc_insertion_point(field_get:proto.MapFieldEntry.value)
  return _internal_value();
}
inline void MapFieldEntry::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void MapFieldEntry::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.MapFieldEntry.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TweetStatusP_2eproto
