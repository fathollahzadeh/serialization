// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMPLEXOBJECT12_COMPLEXOBJECTFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_COMPLEXOBJECT12_COMPLEXOBJECTFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

#include "ComplexObject13FBS.h"

namespace complexobjectflatbuffers {

struct ComplexObject12FBS;
struct ComplexObject12FBSBuilder;
struct ComplexObject12FBST;

struct ComplexObject12FBST : public flatbuffers::NativeTable {
  typedef ComplexObject12FBS TableType;
  std::string var_string{};
  std::unique_ptr<complexobjectflatbuffers::ComplexObject13FBST> complexobject{};
  ComplexObject12FBST() = default;
  ComplexObject12FBST(const ComplexObject12FBST &o);
  ComplexObject12FBST(ComplexObject12FBST&&) FLATBUFFERS_NOEXCEPT = default;
  ComplexObject12FBST &operator=(ComplexObject12FBST o) FLATBUFFERS_NOEXCEPT;
};

struct ComplexObject12FBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ComplexObject12FBST NativeTableType;
  typedef ComplexObject12FBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VAR_STRING = 4,
    VT_COMPLEXOBJECT = 6
  };
  const flatbuffers::String *var_string() const {
    return GetPointer<const flatbuffers::String *>(VT_VAR_STRING);
  }
  flatbuffers::String *mutable_var_string() {
    return GetPointer<flatbuffers::String *>(VT_VAR_STRING);
  }
  const complexobjectflatbuffers::ComplexObject13FBS *complexobject() const {
    return GetPointer<const complexobjectflatbuffers::ComplexObject13FBS *>(VT_COMPLEXOBJECT);
  }
  complexobjectflatbuffers::ComplexObject13FBS *mutable_complexobject() {
    return GetPointer<complexobjectflatbuffers::ComplexObject13FBS *>(VT_COMPLEXOBJECT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VAR_STRING) &&
           verifier.VerifyString(var_string()) &&
           VerifyOffset(verifier, VT_COMPLEXOBJECT) &&
           verifier.VerifyTable(complexobject()) &&
           verifier.EndTable();
  }
  ComplexObject12FBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ComplexObject12FBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ComplexObject12FBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ComplexObject12FBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ComplexObject12FBSBuilder {
  typedef ComplexObject12FBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_var_string(flatbuffers::Offset<flatbuffers::String> var_string) {
    fbb_.AddOffset(ComplexObject12FBS::VT_VAR_STRING, var_string);
  }
  void add_complexobject(flatbuffers::Offset<complexobjectflatbuffers::ComplexObject13FBS> complexobject) {
    fbb_.AddOffset(ComplexObject12FBS::VT_COMPLEXOBJECT, complexobject);
  }
  explicit ComplexObject12FBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ComplexObject12FBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ComplexObject12FBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<ComplexObject12FBS> CreateComplexObject12FBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> var_string = 0,
    flatbuffers::Offset<complexobjectflatbuffers::ComplexObject13FBS> complexobject = 0) {
  ComplexObject12FBSBuilder builder_(_fbb);
  builder_.add_complexobject(complexobject);
  builder_.add_var_string(var_string);
  return builder_.Finish();
}

inline flatbuffers::Offset<ComplexObject12FBS> CreateComplexObject12FBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *var_string = nullptr,
    flatbuffers::Offset<complexobjectflatbuffers::ComplexObject13FBS> complexobject = 0) {
  auto var_string__ = var_string ? _fbb.CreateString(var_string) : 0;
  return complexobjectflatbuffers::CreateComplexObject12FBS(
      _fbb,
      var_string__,
      complexobject);
}

flatbuffers::Offset<ComplexObject12FBS> CreateComplexObject12FBS(flatbuffers::FlatBufferBuilder &_fbb, const ComplexObject12FBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ComplexObject12FBST::ComplexObject12FBST(const ComplexObject12FBST &o)
      : var_string(o.var_string),
        complexobject((o.complexobject) ? new complexobjectflatbuffers::ComplexObject13FBST(*o.complexobject) : nullptr) {
}

inline ComplexObject12FBST &ComplexObject12FBST::operator=(ComplexObject12FBST o) FLATBUFFERS_NOEXCEPT {
  std::swap(var_string, o.var_string);
  std::swap(complexobject, o.complexobject);
  return *this;
}

inline ComplexObject12FBST *ComplexObject12FBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ComplexObject12FBST>(new ComplexObject12FBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ComplexObject12FBS::UnPackTo(ComplexObject12FBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = var_string(); if (_e) _o->var_string = _e->str(); }
  { auto _e = complexobject(); if (_e) { if(_o->complexobject) { _e->UnPackTo(_o->complexobject.get(), _resolver); } else { _o->complexobject = std::unique_ptr<complexobjectflatbuffers::ComplexObject13FBST>(_e->UnPack(_resolver)); } } else if (_o->complexobject) { _o->complexobject.reset(); } }
}

inline flatbuffers::Offset<ComplexObject12FBS> ComplexObject12FBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ComplexObject12FBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateComplexObject12FBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ComplexObject12FBS> CreateComplexObject12FBS(flatbuffers::FlatBufferBuilder &_fbb, const ComplexObject12FBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ComplexObject12FBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _var_string = _o->var_string.empty() ? 0 : _fbb.CreateString(_o->var_string);
  auto _complexobject = _o->complexobject ? CreateComplexObject13FBS(_fbb, _o->complexobject.get(), _rehasher) : 0;
  return complexobjectflatbuffers::CreateComplexObject12FBS(
      _fbb,
      _var_string,
      _complexobject);
}

inline const complexobjectflatbuffers::ComplexObject12FBS *GetComplexObject12FBS(const void *buf) {
  return flatbuffers::GetRoot<complexobjectflatbuffers::ComplexObject12FBS>(buf);
}

inline const complexobjectflatbuffers::ComplexObject12FBS *GetSizePrefixedComplexObject12FBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<complexobjectflatbuffers::ComplexObject12FBS>(buf);
}

inline ComplexObject12FBS *GetMutableComplexObject12FBS(void *buf) {
  return flatbuffers::GetMutableRoot<ComplexObject12FBS>(buf);
}

inline complexobjectflatbuffers::ComplexObject12FBS *GetMutableSizePrefixedComplexObject12FBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<complexobjectflatbuffers::ComplexObject12FBS>(buf);
}

inline bool VerifyComplexObject12FBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<complexobjectflatbuffers::ComplexObject12FBS>(nullptr);
}

inline bool VerifySizePrefixedComplexObject12FBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<complexobjectflatbuffers::ComplexObject12FBS>(nullptr);
}

inline void FinishComplexObject12FBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<complexobjectflatbuffers::ComplexObject12FBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedComplexObject12FBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<complexobjectflatbuffers::ComplexObject12FBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<complexobjectflatbuffers::ComplexObject12FBST> UnPackComplexObject12FBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<complexobjectflatbuffers::ComplexObject12FBST>(GetComplexObject12FBS(buf)->UnPack(res));
}

inline std::unique_ptr<complexobjectflatbuffers::ComplexObject12FBST> UnPackSizePrefixedComplexObject12FBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<complexobjectflatbuffers::ComplexObject12FBST>(GetSizePrefixedComplexObject12FBS(buf)->UnPack(res));
}

}  // namespace complexobjectflatbuffers

#endif  // FLATBUFFERS_GENERATED_COMPLEXOBJECT12_COMPLEXOBJECTFLATBUFFERS_H_
