// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLEOBJECT_COMPLEXOBJECTFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_SIMPLEOBJECT_COMPLEXOBJECTFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace complexobjectflatbuffers {

struct SimpleObjectFBS;
struct SimpleObjectFBSBuilder;
struct SimpleObjectFBST;

struct SimpleObjectFBST : public flatbuffers::NativeTable {
  typedef SimpleObjectFBS TableType;
  std::string var_string{};
};

struct SimpleObjectFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SimpleObjectFBST NativeTableType;
  typedef SimpleObjectFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VAR_STRING = 4
  };
  const flatbuffers::String *var_string() const {
    return GetPointer<const flatbuffers::String *>(VT_VAR_STRING);
  }
  flatbuffers::String *mutable_var_string() {
    return GetPointer<flatbuffers::String *>(VT_VAR_STRING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VAR_STRING) &&
           verifier.VerifyString(var_string()) &&
           verifier.EndTable();
  }
  SimpleObjectFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SimpleObjectFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SimpleObjectFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SimpleObjectFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SimpleObjectFBSBuilder {
  typedef SimpleObjectFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_var_string(flatbuffers::Offset<flatbuffers::String> var_string) {
    fbb_.AddOffset(SimpleObjectFBS::VT_VAR_STRING, var_string);
  }
  explicit SimpleObjectFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SimpleObjectFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimpleObjectFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimpleObjectFBS> CreateSimpleObjectFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> var_string = 0) {
  SimpleObjectFBSBuilder builder_(_fbb);
  builder_.add_var_string(var_string);
  return builder_.Finish();
}

inline flatbuffers::Offset<SimpleObjectFBS> CreateSimpleObjectFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *var_string = nullptr) {
  auto var_string__ = var_string ? _fbb.CreateString(var_string) : 0;
  return complexobjectflatbuffers::CreateSimpleObjectFBS(
      _fbb,
      var_string__);
}

flatbuffers::Offset<SimpleObjectFBS> CreateSimpleObjectFBS(flatbuffers::FlatBufferBuilder &_fbb, const SimpleObjectFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SimpleObjectFBST *SimpleObjectFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SimpleObjectFBST>(new SimpleObjectFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SimpleObjectFBS::UnPackTo(SimpleObjectFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = var_string(); if (_e) _o->var_string = _e->str(); }
}

inline flatbuffers::Offset<SimpleObjectFBS> SimpleObjectFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SimpleObjectFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSimpleObjectFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SimpleObjectFBS> CreateSimpleObjectFBS(flatbuffers::FlatBufferBuilder &_fbb, const SimpleObjectFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SimpleObjectFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _var_string = _o->var_string.empty() ? 0 : _fbb.CreateString(_o->var_string);
  return complexobjectflatbuffers::CreateSimpleObjectFBS(
      _fbb,
      _var_string);
}

inline const complexobjectflatbuffers::SimpleObjectFBS *GetSimpleObjectFBS(const void *buf) {
  return flatbuffers::GetRoot<complexobjectflatbuffers::SimpleObjectFBS>(buf);
}

inline const complexobjectflatbuffers::SimpleObjectFBS *GetSizePrefixedSimpleObjectFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<complexobjectflatbuffers::SimpleObjectFBS>(buf);
}

inline SimpleObjectFBS *GetMutableSimpleObjectFBS(void *buf) {
  return flatbuffers::GetMutableRoot<SimpleObjectFBS>(buf);
}

inline complexobjectflatbuffers::SimpleObjectFBS *GetMutableSizePrefixedSimpleObjectFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<complexobjectflatbuffers::SimpleObjectFBS>(buf);
}

inline bool VerifySimpleObjectFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<complexobjectflatbuffers::SimpleObjectFBS>(nullptr);
}

inline bool VerifySizePrefixedSimpleObjectFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<complexobjectflatbuffers::SimpleObjectFBS>(nullptr);
}

inline void FinishSimpleObjectFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<complexobjectflatbuffers::SimpleObjectFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSimpleObjectFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<complexobjectflatbuffers::SimpleObjectFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<complexobjectflatbuffers::SimpleObjectFBST> UnPackSimpleObjectFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<complexobjectflatbuffers::SimpleObjectFBST>(GetSimpleObjectFBS(buf)->UnPack(res));
}

inline std::unique_ptr<complexobjectflatbuffers::SimpleObjectFBST> UnPackSizePrefixedSimpleObjectFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<complexobjectflatbuffers::SimpleObjectFBST>(GetSizePrefixedSimpleObjectFBS(buf)->UnPack(res));
}

}  // namespace complexobjectflatbuffers

#endif  // FLATBUFFERS_GENERATED_SIMPLEOBJECT_COMPLEXOBJECTFLATBUFFERS_H_
