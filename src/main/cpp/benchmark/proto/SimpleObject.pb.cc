// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleObject.proto

#include "SimpleObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR SimpleObject::SimpleObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string6_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string7_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string8_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string9_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string10_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string11_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string12_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string13_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string14_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string15_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string16_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int325_)*/0
  , /*decltype(_impl_.var_int326_)*/0
  , /*decltype(_impl_.var_int327_)*/0
  , /*decltype(_impl_.var_int328_)*/0
  , /*decltype(_impl_.var_int329_)*/0
  , /*decltype(_impl_.var_int3210_)*/0
  , /*decltype(_impl_.var_int3211_)*/0
  , /*decltype(_impl_.var_int3212_)*/0
  , /*decltype(_impl_.var_int3213_)*/0
  , /*decltype(_impl_.var_int3214_)*/0
  , /*decltype(_impl_.var_int3215_)*/0
  , /*decltype(_impl_.var_int3216_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_int645_)*/int64_t{0}
  , /*decltype(_impl_.var_int646_)*/int64_t{0}
  , /*decltype(_impl_.var_int647_)*/int64_t{0}
  , /*decltype(_impl_.var_int648_)*/int64_t{0}
  , /*decltype(_impl_.var_int649_)*/int64_t{0}
  , /*decltype(_impl_.var_int6410_)*/int64_t{0}
  , /*decltype(_impl_.var_int6411_)*/int64_t{0}
  , /*decltype(_impl_.var_int6412_)*/int64_t{0}
  , /*decltype(_impl_.var_int6413_)*/int64_t{0}
  , /*decltype(_impl_.var_int6414_)*/int64_t{0}
  , /*decltype(_impl_.var_int6415_)*/int64_t{0}
  , /*decltype(_impl_.var_int6416_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_float5_)*/0
  , /*decltype(_impl_.var_float6_)*/0
  , /*decltype(_impl_.var_float7_)*/0
  , /*decltype(_impl_.var_float8_)*/0
  , /*decltype(_impl_.var_float9_)*/0
  , /*decltype(_impl_.var_float10_)*/0
  , /*decltype(_impl_.var_float11_)*/0
  , /*decltype(_impl_.var_float12_)*/0
  , /*decltype(_impl_.var_float13_)*/0
  , /*decltype(_impl_.var_float14_)*/0
  , /*decltype(_impl_.var_float15_)*/0
  , /*decltype(_impl_.var_float16_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_double5_)*/0
  , /*decltype(_impl_.var_double6_)*/0
  , /*decltype(_impl_.var_double7_)*/0
  , /*decltype(_impl_.var_double8_)*/0
  , /*decltype(_impl_.var_double9_)*/0
  , /*decltype(_impl_.var_double10_)*/0
  , /*decltype(_impl_.var_double11_)*/0
  , /*decltype(_impl_.var_double12_)*/0
  , /*decltype(_impl_.var_double13_)*/0
  , /*decltype(_impl_.var_double14_)*/0
  , /*decltype(_impl_.var_double15_)*/0
  , /*decltype(_impl_.var_double16_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_.var_bool5_)*/false
  , /*decltype(_impl_.var_bool6_)*/false
  , /*decltype(_impl_.var_bool7_)*/false
  , /*decltype(_impl_.var_bool8_)*/false
  , /*decltype(_impl_.var_bool9_)*/false
  , /*decltype(_impl_.var_bool10_)*/false
  , /*decltype(_impl_.var_bool11_)*/false
  , /*decltype(_impl_.var_bool12_)*/false
  , /*decltype(_impl_.var_bool13_)*/false
  , /*decltype(_impl_.var_bool14_)*/false
  , /*decltype(_impl_.var_bool15_)*/false
  , /*decltype(_impl_.var_bool16_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleObjectDefaultTypeInternal() {}
  union {
    SimpleObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleObjectDefaultTypeInternal _SimpleObject_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_SimpleObject_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_SimpleObject_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SimpleObject_2eproto = nullptr;

const uint32_t TableStruct_SimpleObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int325_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int326_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int327_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int328_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int329_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3210_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3211_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3212_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3213_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3214_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3215_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int3216_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int645_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int646_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int647_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int648_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int649_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6410_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6411_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6412_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6413_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6414_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6415_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_int6416_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float5_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float6_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float7_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float8_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float9_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float10_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float11_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float12_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float13_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float14_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float15_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_float16_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double5_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double6_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double7_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double8_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double9_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double10_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double11_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double12_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double13_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double14_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double15_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_double16_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool5_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool6_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool7_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool8_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool9_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool10_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool11_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool12_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool13_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool14_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool15_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_bool16_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string4_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string5_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string6_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string7_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string8_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string9_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string10_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string11_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string12_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string13_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string14_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string15_),
  PROTOBUF_FIELD_OFFSET(::proto::SimpleObject, _impl_.var_string16_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::SimpleObject)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_SimpleObject_default_instance_._instance,
};

const char descriptor_table_protodef_SimpleObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022SimpleObject.proto\022\005proto\"\310\017\n\014SimpleOb"
  "ject\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int322\030\002"
  " \001(\005\022\022\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_int324\030\004"
  " \001(\005\022\022\n\nvar_int325\030\005 \001(\005\022\022\n\nvar_int326\030\006"
  " \001(\005\022\022\n\nvar_int327\030\007 \001(\005\022\022\n\nvar_int328\030\010"
  " \001(\005\022\022\n\nvar_int329\030\t \001(\005\022\023\n\013var_int3210\030"
  "\n \001(\005\022\023\n\013var_int3211\030\013 \001(\005\022\023\n\013var_int321"
  "2\030\014 \001(\005\022\023\n\013var_int3213\030\r \001(\005\022\023\n\013var_int3"
  "214\030\016 \001(\005\022\023\n\013var_int3215\030\017 \001(\005\022\023\n\013var_in"
  "t3216\030\020 \001(\005\022\022\n\nvar_int641\030\021 \001(\003\022\022\n\nvar_i"
  "nt642\030\022 \001(\003\022\022\n\nvar_int643\030\023 \001(\003\022\022\n\nvar_i"
  "nt644\030\024 \001(\003\022\022\n\nvar_int645\030\025 \001(\003\022\022\n\nvar_i"
  "nt646\030\026 \001(\003\022\022\n\nvar_int647\030\027 \001(\003\022\022\n\nvar_i"
  "nt648\030\030 \001(\003\022\022\n\nvar_int649\030\031 \001(\003\022\023\n\013var_i"
  "nt6410\030\032 \001(\003\022\023\n\013var_int6411\030\033 \001(\003\022\023\n\013var"
  "_int6412\030\034 \001(\003\022\023\n\013var_int6413\030\035 \001(\003\022\023\n\013v"
  "ar_int6414\030\036 \001(\003\022\023\n\013var_int6415\030\037 \001(\003\022\023\n"
  "\013var_int6416\030  \001(\003\022\022\n\nvar_float1\030! \001(\002\022\022"
  "\n\nvar_float2\030\" \001(\002\022\022\n\nvar_float3\030# \001(\002\022\022"
  "\n\nvar_float4\030$ \001(\002\022\022\n\nvar_float5\030% \001(\002\022\022"
  "\n\nvar_float6\030& \001(\002\022\022\n\nvar_float7\030\' \001(\002\022\022"
  "\n\nvar_float8\030( \001(\002\022\022\n\nvar_float9\030) \001(\002\022\023"
  "\n\013var_float10\030* \001(\002\022\023\n\013var_float11\030+ \001(\002"
  "\022\023\n\013var_float12\030, \001(\002\022\023\n\013var_float13\030- \001"
  "(\002\022\023\n\013var_float14\030. \001(\002\022\023\n\013var_float15\030/"
  " \001(\002\022\023\n\013var_float16\0300 \001(\002\022\023\n\013var_double1"
  "\0301 \001(\001\022\023\n\013var_double2\0302 \001(\001\022\023\n\013var_doubl"
  "e3\0303 \001(\001\022\023\n\013var_double4\0304 \001(\001\022\023\n\013var_dou"
  "ble5\0305 \001(\001\022\023\n\013var_double6\0306 \001(\001\022\023\n\013var_d"
  "ouble7\0307 \001(\001\022\023\n\013var_double8\0308 \001(\001\022\023\n\013var"
  "_double9\0309 \001(\001\022\024\n\014var_double10\030: \001(\001\022\024\n\014"
  "var_double11\030; \001(\001\022\024\n\014var_double12\030< \001(\001"
  "\022\024\n\014var_double13\030= \001(\001\022\024\n\014var_double14\030>"
  " \001(\001\022\024\n\014var_double15\030\? \001(\001\022\024\n\014var_double"
  "16\030@ \001(\001\022\021\n\tvar_bool1\030A \001(\010\022\021\n\tvar_bool2"
  "\030B \001(\010\022\021\n\tvar_bool3\030C \001(\010\022\021\n\tvar_bool4\030D"
  " \001(\010\022\021\n\tvar_bool5\030E \001(\010\022\021\n\tvar_bool6\030F \001"
  "(\010\022\021\n\tvar_bool7\030G \001(\010\022\021\n\tvar_bool8\030H \001(\010"
  "\022\021\n\tvar_bool9\030I \001(\010\022\022\n\nvar_bool10\030J \001(\010\022"
  "\022\n\nvar_bool11\030K \001(\010\022\022\n\nvar_bool12\030L \001(\010\022"
  "\022\n\nvar_bool13\030M \001(\010\022\022\n\nvar_bool14\030N \001(\010\022"
  "\022\n\nvar_bool15\030O \001(\010\022\022\n\nvar_bool16\030P \001(\010\022"
  "\023\n\013var_string1\030Q \001(\t\022\023\n\013var_string2\030R \001("
  "\t\022\023\n\013var_string3\030S \001(\t\022\023\n\013var_string4\030T "
  "\001(\t\022\023\n\013var_string5\030U \001(\t\022\023\n\013var_string6\030"
  "V \001(\t\022\023\n\013var_string7\030W \001(\t\022\023\n\013var_string"
  "8\030X \001(\t\022\023\n\013var_string9\030Y \001(\t\022\024\n\014var_stri"
  "ng10\030Z \001(\t\022\024\n\014var_string11\030[ \001(\t\022\024\n\014var_"
  "string12\030\\ \001(\t\022\024\n\014var_string13\030] \001(\t\022\024\n\014"
  "var_string14\030^ \001(\t\022\024\n\014var_string15\030_ \001(\t"
  "\022\024\n\014var_string16\030` \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SimpleObject_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SimpleObject_2eproto = {
    false, false, 2030, descriptor_table_protodef_SimpleObject_2eproto,
    "SimpleObject.proto",
    &descriptor_table_SimpleObject_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_SimpleObject_2eproto::offsets,
    file_level_metadata_SimpleObject_2eproto, file_level_enum_descriptors_SimpleObject_2eproto,
    file_level_service_descriptors_SimpleObject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SimpleObject_2eproto_getter() {
  return &descriptor_table_SimpleObject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SimpleObject_2eproto(&descriptor_table_SimpleObject_2eproto);
namespace proto {

// ===================================================================

class SimpleObject::_Internal {
 public:
};

SimpleObject::SimpleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SimpleObject)
}
SimpleObject::SimpleObject(const SimpleObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_string5_){}
    , decltype(_impl_.var_string6_){}
    , decltype(_impl_.var_string7_){}
    , decltype(_impl_.var_string8_){}
    , decltype(_impl_.var_string9_){}
    , decltype(_impl_.var_string10_){}
    , decltype(_impl_.var_string11_){}
    , decltype(_impl_.var_string12_){}
    , decltype(_impl_.var_string13_){}
    , decltype(_impl_.var_string14_){}
    , decltype(_impl_.var_string15_){}
    , decltype(_impl_.var_string16_){}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int325_){}
    , decltype(_impl_.var_int326_){}
    , decltype(_impl_.var_int327_){}
    , decltype(_impl_.var_int328_){}
    , decltype(_impl_.var_int329_){}
    , decltype(_impl_.var_int3210_){}
    , decltype(_impl_.var_int3211_){}
    , decltype(_impl_.var_int3212_){}
    , decltype(_impl_.var_int3213_){}
    , decltype(_impl_.var_int3214_){}
    , decltype(_impl_.var_int3215_){}
    , decltype(_impl_.var_int3216_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_int645_){}
    , decltype(_impl_.var_int646_){}
    , decltype(_impl_.var_int647_){}
    , decltype(_impl_.var_int648_){}
    , decltype(_impl_.var_int649_){}
    , decltype(_impl_.var_int6410_){}
    , decltype(_impl_.var_int6411_){}
    , decltype(_impl_.var_int6412_){}
    , decltype(_impl_.var_int6413_){}
    , decltype(_impl_.var_int6414_){}
    , decltype(_impl_.var_int6415_){}
    , decltype(_impl_.var_int6416_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_float5_){}
    , decltype(_impl_.var_float6_){}
    , decltype(_impl_.var_float7_){}
    , decltype(_impl_.var_float8_){}
    , decltype(_impl_.var_float9_){}
    , decltype(_impl_.var_float10_){}
    , decltype(_impl_.var_float11_){}
    , decltype(_impl_.var_float12_){}
    , decltype(_impl_.var_float13_){}
    , decltype(_impl_.var_float14_){}
    , decltype(_impl_.var_float15_){}
    , decltype(_impl_.var_float16_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_double5_){}
    , decltype(_impl_.var_double6_){}
    , decltype(_impl_.var_double7_){}
    , decltype(_impl_.var_double8_){}
    , decltype(_impl_.var_double9_){}
    , decltype(_impl_.var_double10_){}
    , decltype(_impl_.var_double11_){}
    , decltype(_impl_.var_double12_){}
    , decltype(_impl_.var_double13_){}
    , decltype(_impl_.var_double14_){}
    , decltype(_impl_.var_double15_){}
    , decltype(_impl_.var_double16_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , decltype(_impl_.var_bool5_){}
    , decltype(_impl_.var_bool6_){}
    , decltype(_impl_.var_bool7_){}
    , decltype(_impl_.var_bool8_){}
    , decltype(_impl_.var_bool9_){}
    , decltype(_impl_.var_bool10_){}
    , decltype(_impl_.var_bool11_){}
    , decltype(_impl_.var_bool12_){}
    , decltype(_impl_.var_bool13_){}
    , decltype(_impl_.var_bool14_){}
    , decltype(_impl_.var_bool15_){}
    , decltype(_impl_.var_bool16_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string5().empty()) {
    _this->_impl_.var_string5_.Set(from._internal_var_string5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string6().empty()) {
    _this->_impl_.var_string6_.Set(from._internal_var_string6(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string7().empty()) {
    _this->_impl_.var_string7_.Set(from._internal_var_string7(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string8().empty()) {
    _this->_impl_.var_string8_.Set(from._internal_var_string8(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string9_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string9_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string9().empty()) {
    _this->_impl_.var_string9_.Set(from._internal_var_string9(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string10_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string10().empty()) {
    _this->_impl_.var_string10_.Set(from._internal_var_string10(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string11_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string11_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string11().empty()) {
    _this->_impl_.var_string11_.Set(from._internal_var_string11(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string12_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string12_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string12().empty()) {
    _this->_impl_.var_string12_.Set(from._internal_var_string12(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string13_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string13_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string13().empty()) {
    _this->_impl_.var_string13_.Set(from._internal_var_string13(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string14_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string14_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string14().empty()) {
    _this->_impl_.var_string14_.Set(from._internal_var_string14(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string15_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string15_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string15().empty()) {
    _this->_impl_.var_string15_.Set(from._internal_var_string15(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string16_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string16_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string16().empty()) {
    _this->_impl_.var_string16_.Set(from._internal_var_string16(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool16_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool16_));
  // @@protoc_insertion_point(copy_constructor:proto.SimpleObject)
}

inline void SimpleObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_string5_){}
    , decltype(_impl_.var_string6_){}
    , decltype(_impl_.var_string7_){}
    , decltype(_impl_.var_string8_){}
    , decltype(_impl_.var_string9_){}
    , decltype(_impl_.var_string10_){}
    , decltype(_impl_.var_string11_){}
    , decltype(_impl_.var_string12_){}
    , decltype(_impl_.var_string13_){}
    , decltype(_impl_.var_string14_){}
    , decltype(_impl_.var_string15_){}
    , decltype(_impl_.var_string16_){}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int325_){0}
    , decltype(_impl_.var_int326_){0}
    , decltype(_impl_.var_int327_){0}
    , decltype(_impl_.var_int328_){0}
    , decltype(_impl_.var_int329_){0}
    , decltype(_impl_.var_int3210_){0}
    , decltype(_impl_.var_int3211_){0}
    , decltype(_impl_.var_int3212_){0}
    , decltype(_impl_.var_int3213_){0}
    , decltype(_impl_.var_int3214_){0}
    , decltype(_impl_.var_int3215_){0}
    , decltype(_impl_.var_int3216_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_int645_){int64_t{0}}
    , decltype(_impl_.var_int646_){int64_t{0}}
    , decltype(_impl_.var_int647_){int64_t{0}}
    , decltype(_impl_.var_int648_){int64_t{0}}
    , decltype(_impl_.var_int649_){int64_t{0}}
    , decltype(_impl_.var_int6410_){int64_t{0}}
    , decltype(_impl_.var_int6411_){int64_t{0}}
    , decltype(_impl_.var_int6412_){int64_t{0}}
    , decltype(_impl_.var_int6413_){int64_t{0}}
    , decltype(_impl_.var_int6414_){int64_t{0}}
    , decltype(_impl_.var_int6415_){int64_t{0}}
    , decltype(_impl_.var_int6416_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_float5_){0}
    , decltype(_impl_.var_float6_){0}
    , decltype(_impl_.var_float7_){0}
    , decltype(_impl_.var_float8_){0}
    , decltype(_impl_.var_float9_){0}
    , decltype(_impl_.var_float10_){0}
    , decltype(_impl_.var_float11_){0}
    , decltype(_impl_.var_float12_){0}
    , decltype(_impl_.var_float13_){0}
    , decltype(_impl_.var_float14_){0}
    , decltype(_impl_.var_float15_){0}
    , decltype(_impl_.var_float16_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_double5_){0}
    , decltype(_impl_.var_double6_){0}
    , decltype(_impl_.var_double7_){0}
    , decltype(_impl_.var_double8_){0}
    , decltype(_impl_.var_double9_){0}
    , decltype(_impl_.var_double10_){0}
    , decltype(_impl_.var_double11_){0}
    , decltype(_impl_.var_double12_){0}
    , decltype(_impl_.var_double13_){0}
    , decltype(_impl_.var_double14_){0}
    , decltype(_impl_.var_double15_){0}
    , decltype(_impl_.var_double16_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , decltype(_impl_.var_bool5_){false}
    , decltype(_impl_.var_bool6_){false}
    , decltype(_impl_.var_bool7_){false}
    , decltype(_impl_.var_bool8_){false}
    , decltype(_impl_.var_bool9_){false}
    , decltype(_impl_.var_bool10_){false}
    , decltype(_impl_.var_bool11_){false}
    , decltype(_impl_.var_bool12_){false}
    , decltype(_impl_.var_bool13_){false}
    , decltype(_impl_.var_bool14_){false}
    , decltype(_impl_.var_bool15_){false}
    , decltype(_impl_.var_bool16_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string9_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string9_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string10_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string11_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string11_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string12_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string12_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string13_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string13_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string14_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string14_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string15_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string15_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string16_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string16_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleObject::~SimpleObject() {
  // @@protoc_insertion_point(destructor:proto.SimpleObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
  _impl_.var_string5_.Destroy();
  _impl_.var_string6_.Destroy();
  _impl_.var_string7_.Destroy();
  _impl_.var_string8_.Destroy();
  _impl_.var_string9_.Destroy();
  _impl_.var_string10_.Destroy();
  _impl_.var_string11_.Destroy();
  _impl_.var_string12_.Destroy();
  _impl_.var_string13_.Destroy();
  _impl_.var_string14_.Destroy();
  _impl_.var_string15_.Destroy();
  _impl_.var_string16_.Destroy();
}

void SimpleObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SimpleObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  _impl_.var_string5_.ClearToEmpty();
  _impl_.var_string6_.ClearToEmpty();
  _impl_.var_string7_.ClearToEmpty();
  _impl_.var_string8_.ClearToEmpty();
  _impl_.var_string9_.ClearToEmpty();
  _impl_.var_string10_.ClearToEmpty();
  _impl_.var_string11_.ClearToEmpty();
  _impl_.var_string12_.ClearToEmpty();
  _impl_.var_string13_.ClearToEmpty();
  _impl_.var_string14_.ClearToEmpty();
  _impl_.var_string15_.ClearToEmpty();
  _impl_.var_string16_.ClearToEmpty();
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool16_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int325 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int325_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int326 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int326_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int327 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int327_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int328 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int328_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int329 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_int329_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3210 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_int3210_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3211 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.var_int3211_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3212 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.var_int3212_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3213 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.var_int3213_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3214 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.var_int3214_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3215 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.var_int3215_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int3216 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.var_int3216_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int645 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.var_int645_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int646 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.var_int646_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int647 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.var_int647_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int648 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.var_int648_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int649 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.var_int649_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6410 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.var_int6410_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6411 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.var_int6411_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6412 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.var_int6412_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6413 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.var_int6413_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6414 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.var_int6414_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6415 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.var_int6415_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int6416 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.var_int6416_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float5 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float6 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float7 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.var_float7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float8 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.var_float8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float9 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.var_float9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float10 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.var_float10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float11 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.var_float11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float12 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.var_float12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float13 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.var_float13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float14 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.var_float14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float15 = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.var_float15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float16 = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.var_float16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double5 = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.var_double5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double6 = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.var_double6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double7 = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.var_double7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double8 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.var_double8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double9 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.var_double9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double10 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.var_double10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double11 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.var_double11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double12 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.var_double12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double13 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.var_double13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double14 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.var_double14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double15 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.var_double15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double16 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.var_double16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool5 = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_bool5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool6 = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_bool6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool7 = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_bool7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool8 = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_bool8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool9 = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool10 = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool11 = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.var_bool11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool12 = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.var_bool12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool13 = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.var_bool13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool14 = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.var_bool14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool15 = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.var_bool15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool16 = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.var_bool16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string4"));
        } else
          goto handle_unusual;
        continue;
      // string var_string5 = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_var_string5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string5"));
        } else
          goto handle_unusual;
        continue;
      // string var_string6 = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_var_string6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string6"));
        } else
          goto handle_unusual;
        continue;
      // string var_string7 = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_var_string7();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string7"));
        } else
          goto handle_unusual;
        continue;
      // string var_string8 = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_var_string8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string8"));
        } else
          goto handle_unusual;
        continue;
      // string var_string9 = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_var_string9();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string9"));
        } else
          goto handle_unusual;
        continue;
      // string var_string10 = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_var_string10();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string10"));
        } else
          goto handle_unusual;
        continue;
      // string var_string11 = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_var_string11();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string11"));
        } else
          goto handle_unusual;
        continue;
      // string var_string12 = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_var_string12();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string12"));
        } else
          goto handle_unusual;
        continue;
      // string var_string13 = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_var_string13();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string13"));
        } else
          goto handle_unusual;
        continue;
      // string var_string14 = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_var_string14();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string14"));
        } else
          goto handle_unusual;
        continue;
      // string var_string15 = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_var_string15();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string15"));
        } else
          goto handle_unusual;
        continue;
      // string var_string16 = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_var_string16();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SimpleObject.var_string16"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SimpleObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int32 var_int325 = 5;
  if (this->_internal_var_int325() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_int325(), target);
  }

  // int32 var_int326 = 6;
  if (this->_internal_var_int326() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_int326(), target);
  }

  // int32 var_int327 = 7;
  if (this->_internal_var_int327() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_var_int327(), target);
  }

  // int32 var_int328 = 8;
  if (this->_internal_var_int328() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_var_int328(), target);
  }

  // int32 var_int329 = 9;
  if (this->_internal_var_int329() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_var_int329(), target);
  }

  // int32 var_int3210 = 10;
  if (this->_internal_var_int3210() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_var_int3210(), target);
  }

  // int32 var_int3211 = 11;
  if (this->_internal_var_int3211() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_var_int3211(), target);
  }

  // int32 var_int3212 = 12;
  if (this->_internal_var_int3212() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_var_int3212(), target);
  }

  // int32 var_int3213 = 13;
  if (this->_internal_var_int3213() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_var_int3213(), target);
  }

  // int32 var_int3214 = 14;
  if (this->_internal_var_int3214() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_var_int3214(), target);
  }

  // int32 var_int3215 = 15;
  if (this->_internal_var_int3215() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_var_int3215(), target);
  }

  // int32 var_int3216 = 16;
  if (this->_internal_var_int3216() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_var_int3216(), target);
  }

  // int64 var_int641 = 17;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 18;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(18, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 19;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 20;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(20, this->_internal_var_int644(), target);
  }

  // int64 var_int645 = 21;
  if (this->_internal_var_int645() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_var_int645(), target);
  }

  // int64 var_int646 = 22;
  if (this->_internal_var_int646() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_var_int646(), target);
  }

  // int64 var_int647 = 23;
  if (this->_internal_var_int647() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_var_int647(), target);
  }

  // int64 var_int648 = 24;
  if (this->_internal_var_int648() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(24, this->_internal_var_int648(), target);
  }

  // int64 var_int649 = 25;
  if (this->_internal_var_int649() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(25, this->_internal_var_int649(), target);
  }

  // int64 var_int6410 = 26;
  if (this->_internal_var_int6410() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_var_int6410(), target);
  }

  // int64 var_int6411 = 27;
  if (this->_internal_var_int6411() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_var_int6411(), target);
  }

  // int64 var_int6412 = 28;
  if (this->_internal_var_int6412() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_var_int6412(), target);
  }

  // int64 var_int6413 = 29;
  if (this->_internal_var_int6413() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_var_int6413(), target);
  }

  // int64 var_int6414 = 30;
  if (this->_internal_var_int6414() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(30, this->_internal_var_int6414(), target);
  }

  // int64 var_int6415 = 31;
  if (this->_internal_var_int6415() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_var_int6415(), target);
  }

  // int64 var_int6416 = 32;
  if (this->_internal_var_int6416() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_var_int6416(), target);
  }

  // float var_float1 = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_var_float1(), target);
  }

  // float var_float2 = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_var_float2(), target);
  }

  // float var_float3 = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_var_float3(), target);
  }

  // float var_float4 = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_var_float4(), target);
  }

  // float var_float5 = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = this->_internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_var_float5(), target);
  }

  // float var_float6 = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = this->_internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_var_float6(), target);
  }

  // float var_float7 = 39;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = this->_internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(39, this->_internal_var_float7(), target);
  }

  // float var_float8 = 40;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = this->_internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(40, this->_internal_var_float8(), target);
  }

  // float var_float9 = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float9 = this->_internal_var_float9();
  uint32_t raw_var_float9;
  memcpy(&raw_var_float9, &tmp_var_float9, sizeof(tmp_var_float9));
  if (raw_var_float9 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_var_float9(), target);
  }

  // float var_float10 = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float10 = this->_internal_var_float10();
  uint32_t raw_var_float10;
  memcpy(&raw_var_float10, &tmp_var_float10, sizeof(tmp_var_float10));
  if (raw_var_float10 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_var_float10(), target);
  }

  // float var_float11 = 43;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float11 = this->_internal_var_float11();
  uint32_t raw_var_float11;
  memcpy(&raw_var_float11, &tmp_var_float11, sizeof(tmp_var_float11));
  if (raw_var_float11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(43, this->_internal_var_float11(), target);
  }

  // float var_float12 = 44;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float12 = this->_internal_var_float12();
  uint32_t raw_var_float12;
  memcpy(&raw_var_float12, &tmp_var_float12, sizeof(tmp_var_float12));
  if (raw_var_float12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(44, this->_internal_var_float12(), target);
  }

  // float var_float13 = 45;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float13 = this->_internal_var_float13();
  uint32_t raw_var_float13;
  memcpy(&raw_var_float13, &tmp_var_float13, sizeof(tmp_var_float13));
  if (raw_var_float13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(45, this->_internal_var_float13(), target);
  }

  // float var_float14 = 46;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float14 = this->_internal_var_float14();
  uint32_t raw_var_float14;
  memcpy(&raw_var_float14, &tmp_var_float14, sizeof(tmp_var_float14));
  if (raw_var_float14 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(46, this->_internal_var_float14(), target);
  }

  // float var_float15 = 47;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float15 = this->_internal_var_float15();
  uint32_t raw_var_float15;
  memcpy(&raw_var_float15, &tmp_var_float15, sizeof(tmp_var_float15));
  if (raw_var_float15 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(47, this->_internal_var_float15(), target);
  }

  // float var_float16 = 48;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float16 = this->_internal_var_float16();
  uint32_t raw_var_float16;
  memcpy(&raw_var_float16, &tmp_var_float16, sizeof(tmp_var_float16));
  if (raw_var_float16 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(48, this->_internal_var_float16(), target);
  }

  // double var_double1 = 49;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(49, this->_internal_var_double1(), target);
  }

  // double var_double2 = 50;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(50, this->_internal_var_double2(), target);
  }

  // double var_double3 = 51;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(51, this->_internal_var_double3(), target);
  }

  // double var_double4 = 52;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(52, this->_internal_var_double4(), target);
  }

  // double var_double5 = 53;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = this->_internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(53, this->_internal_var_double5(), target);
  }

  // double var_double6 = 54;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = this->_internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(54, this->_internal_var_double6(), target);
  }

  // double var_double7 = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = this->_internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(55, this->_internal_var_double7(), target);
  }

  // double var_double8 = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = this->_internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(56, this->_internal_var_double8(), target);
  }

  // double var_double9 = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double9 = this->_internal_var_double9();
  uint64_t raw_var_double9;
  memcpy(&raw_var_double9, &tmp_var_double9, sizeof(tmp_var_double9));
  if (raw_var_double9 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(57, this->_internal_var_double9(), target);
  }

  // double var_double10 = 58;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double10 = this->_internal_var_double10();
  uint64_t raw_var_double10;
  memcpy(&raw_var_double10, &tmp_var_double10, sizeof(tmp_var_double10));
  if (raw_var_double10 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(58, this->_internal_var_double10(), target);
  }

  // double var_double11 = 59;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double11 = this->_internal_var_double11();
  uint64_t raw_var_double11;
  memcpy(&raw_var_double11, &tmp_var_double11, sizeof(tmp_var_double11));
  if (raw_var_double11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(59, this->_internal_var_double11(), target);
  }

  // double var_double12 = 60;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double12 = this->_internal_var_double12();
  uint64_t raw_var_double12;
  memcpy(&raw_var_double12, &tmp_var_double12, sizeof(tmp_var_double12));
  if (raw_var_double12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(60, this->_internal_var_double12(), target);
  }

  // double var_double13 = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double13 = this->_internal_var_double13();
  uint64_t raw_var_double13;
  memcpy(&raw_var_double13, &tmp_var_double13, sizeof(tmp_var_double13));
  if (raw_var_double13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(61, this->_internal_var_double13(), target);
  }

  // double var_double14 = 62;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double14 = this->_internal_var_double14();
  uint64_t raw_var_double14;
  memcpy(&raw_var_double14, &tmp_var_double14, sizeof(tmp_var_double14));
  if (raw_var_double14 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(62, this->_internal_var_double14(), target);
  }

  // double var_double15 = 63;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double15 = this->_internal_var_double15();
  uint64_t raw_var_double15;
  memcpy(&raw_var_double15, &tmp_var_double15, sizeof(tmp_var_double15));
  if (raw_var_double15 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(63, this->_internal_var_double15(), target);
  }

  // double var_double16 = 64;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double16 = this->_internal_var_double16();
  uint64_t raw_var_double16;
  memcpy(&raw_var_double16, &tmp_var_double16, sizeof(tmp_var_double16));
  if (raw_var_double16 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(64, this->_internal_var_double16(), target);
  }

  // bool var_bool1 = 65;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 66;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(66, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 67;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 68;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(68, this->_internal_var_bool4(), target);
  }

  // bool var_bool5 = 69;
  if (this->_internal_var_bool5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(69, this->_internal_var_bool5(), target);
  }

  // bool var_bool6 = 70;
  if (this->_internal_var_bool6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(70, this->_internal_var_bool6(), target);
  }

  // bool var_bool7 = 71;
  if (this->_internal_var_bool7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(71, this->_internal_var_bool7(), target);
  }

  // bool var_bool8 = 72;
  if (this->_internal_var_bool8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(72, this->_internal_var_bool8(), target);
  }

  // bool var_bool9 = 73;
  if (this->_internal_var_bool9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_var_bool9(), target);
  }

  // bool var_bool10 = 74;
  if (this->_internal_var_bool10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(74, this->_internal_var_bool10(), target);
  }

  // bool var_bool11 = 75;
  if (this->_internal_var_bool11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(75, this->_internal_var_bool11(), target);
  }

  // bool var_bool12 = 76;
  if (this->_internal_var_bool12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(76, this->_internal_var_bool12(), target);
  }

  // bool var_bool13 = 77;
  if (this->_internal_var_bool13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(77, this->_internal_var_bool13(), target);
  }

  // bool var_bool14 = 78;
  if (this->_internal_var_bool14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(78, this->_internal_var_bool14(), target);
  }

  // bool var_bool15 = 79;
  if (this->_internal_var_bool15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(79, this->_internal_var_bool15(), target);
  }

  // bool var_bool16 = 80;
  if (this->_internal_var_bool16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(80, this->_internal_var_bool16(), target);
  }

  // string var_string1 = 81;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string1");
    target = stream->WriteStringMaybeAliased(
        81, this->_internal_var_string1(), target);
  }

  // string var_string2 = 82;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string2");
    target = stream->WriteStringMaybeAliased(
        82, this->_internal_var_string2(), target);
  }

  // string var_string3 = 83;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string3");
    target = stream->WriteStringMaybeAliased(
        83, this->_internal_var_string3(), target);
  }

  // string var_string4 = 84;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string4");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_var_string4(), target);
  }

  // string var_string5 = 85;
  if (!this->_internal_var_string5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string5().data(), static_cast<int>(this->_internal_var_string5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string5");
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_var_string5(), target);
  }

  // string var_string6 = 86;
  if (!this->_internal_var_string6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string6().data(), static_cast<int>(this->_internal_var_string6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string6");
    target = stream->WriteStringMaybeAliased(
        86, this->_internal_var_string6(), target);
  }

  // string var_string7 = 87;
  if (!this->_internal_var_string7().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string7().data(), static_cast<int>(this->_internal_var_string7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string7");
    target = stream->WriteStringMaybeAliased(
        87, this->_internal_var_string7(), target);
  }

  // string var_string8 = 88;
  if (!this->_internal_var_string8().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string8().data(), static_cast<int>(this->_internal_var_string8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string8");
    target = stream->WriteStringMaybeAliased(
        88, this->_internal_var_string8(), target);
  }

  // string var_string9 = 89;
  if (!this->_internal_var_string9().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string9().data(), static_cast<int>(this->_internal_var_string9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string9");
    target = stream->WriteStringMaybeAliased(
        89, this->_internal_var_string9(), target);
  }

  // string var_string10 = 90;
  if (!this->_internal_var_string10().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string10().data(), static_cast<int>(this->_internal_var_string10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string10");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_var_string10(), target);
  }

  // string var_string11 = 91;
  if (!this->_internal_var_string11().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string11().data(), static_cast<int>(this->_internal_var_string11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string11");
    target = stream->WriteStringMaybeAliased(
        91, this->_internal_var_string11(), target);
  }

  // string var_string12 = 92;
  if (!this->_internal_var_string12().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string12().data(), static_cast<int>(this->_internal_var_string12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string12");
    target = stream->WriteStringMaybeAliased(
        92, this->_internal_var_string12(), target);
  }

  // string var_string13 = 93;
  if (!this->_internal_var_string13().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string13().data(), static_cast<int>(this->_internal_var_string13().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string13");
    target = stream->WriteStringMaybeAliased(
        93, this->_internal_var_string13(), target);
  }

  // string var_string14 = 94;
  if (!this->_internal_var_string14().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string14().data(), static_cast<int>(this->_internal_var_string14().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string14");
    target = stream->WriteStringMaybeAliased(
        94, this->_internal_var_string14(), target);
  }

  // string var_string15 = 95;
  if (!this->_internal_var_string15().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string15().data(), static_cast<int>(this->_internal_var_string15().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string15");
    target = stream->WriteStringMaybeAliased(
        95, this->_internal_var_string15(), target);
  }

  // string var_string16 = 96;
  if (!this->_internal_var_string16().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string16().data(), static_cast<int>(this->_internal_var_string16().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SimpleObject.var_string16");
    target = stream->WriteStringMaybeAliased(
        96, this->_internal_var_string16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SimpleObject)
  return target;
}

size_t SimpleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SimpleObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 81;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 82;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 83;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 84;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // string var_string5 = 85;
  if (!this->_internal_var_string5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string5());
  }

  // string var_string6 = 86;
  if (!this->_internal_var_string6().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string6());
  }

  // string var_string7 = 87;
  if (!this->_internal_var_string7().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string7());
  }

  // string var_string8 = 88;
  if (!this->_internal_var_string8().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string8());
  }

  // string var_string9 = 89;
  if (!this->_internal_var_string9().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string9());
  }

  // string var_string10 = 90;
  if (!this->_internal_var_string10().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string10());
  }

  // string var_string11 = 91;
  if (!this->_internal_var_string11().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string11());
  }

  // string var_string12 = 92;
  if (!this->_internal_var_string12().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string12());
  }

  // string var_string13 = 93;
  if (!this->_internal_var_string13().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string13());
  }

  // string var_string14 = 94;
  if (!this->_internal_var_string14().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string14());
  }

  // string var_string15 = 95;
  if (!this->_internal_var_string15().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string15());
  }

  // string var_string16 = 96;
  if (!this->_internal_var_string16().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string16());
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int32 var_int325 = 5;
  if (this->_internal_var_int325() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int325());
  }

  // int32 var_int326 = 6;
  if (this->_internal_var_int326() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int326());
  }

  // int32 var_int327 = 7;
  if (this->_internal_var_int327() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int327());
  }

  // int32 var_int328 = 8;
  if (this->_internal_var_int328() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int328());
  }

  // int32 var_int329 = 9;
  if (this->_internal_var_int329() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int329());
  }

  // int32 var_int3210 = 10;
  if (this->_internal_var_int3210() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int3210());
  }

  // int32 var_int3211 = 11;
  if (this->_internal_var_int3211() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int3211());
  }

  // int32 var_int3212 = 12;
  if (this->_internal_var_int3212() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int3212());
  }

  // int32 var_int3213 = 13;
  if (this->_internal_var_int3213() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int3213());
  }

  // int32 var_int3214 = 14;
  if (this->_internal_var_int3214() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int3214());
  }

  // int32 var_int3215 = 15;
  if (this->_internal_var_int3215() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int3215());
  }

  // int32 var_int3216 = 16;
  if (this->_internal_var_int3216() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_var_int3216());
  }

  // int64 var_int641 = 17;
  if (this->_internal_var_int641() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int641());
  }

  // int64 var_int642 = 18;
  if (this->_internal_var_int642() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int642());
  }

  // int64 var_int643 = 19;
  if (this->_internal_var_int643() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int643());
  }

  // int64 var_int644 = 20;
  if (this->_internal_var_int644() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int644());
  }

  // int64 var_int645 = 21;
  if (this->_internal_var_int645() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int645());
  }

  // int64 var_int646 = 22;
  if (this->_internal_var_int646() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int646());
  }

  // int64 var_int647 = 23;
  if (this->_internal_var_int647() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int647());
  }

  // int64 var_int648 = 24;
  if (this->_internal_var_int648() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int648());
  }

  // int64 var_int649 = 25;
  if (this->_internal_var_int649() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int649());
  }

  // int64 var_int6410 = 26;
  if (this->_internal_var_int6410() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6410());
  }

  // int64 var_int6411 = 27;
  if (this->_internal_var_int6411() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6411());
  }

  // int64 var_int6412 = 28;
  if (this->_internal_var_int6412() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6412());
  }

  // int64 var_int6413 = 29;
  if (this->_internal_var_int6413() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6413());
  }

  // int64 var_int6414 = 30;
  if (this->_internal_var_int6414() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6414());
  }

  // int64 var_int6415 = 31;
  if (this->_internal_var_int6415() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6415());
  }

  // int64 var_int6416 = 32;
  if (this->_internal_var_int6416() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int6416());
  }

  // float var_float1 = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 2 + 4;
  }

  // float var_float2 = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 2 + 4;
  }

  // float var_float3 = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 2 + 4;
  }

  // float var_float4 = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 2 + 4;
  }

  // float var_float5 = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = this->_internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    total_size += 2 + 4;
  }

  // float var_float6 = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = this->_internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    total_size += 2 + 4;
  }

  // float var_float7 = 39;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = this->_internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    total_size += 2 + 4;
  }

  // float var_float8 = 40;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = this->_internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    total_size += 2 + 4;
  }

  // float var_float9 = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float9 = this->_internal_var_float9();
  uint32_t raw_var_float9;
  memcpy(&raw_var_float9, &tmp_var_float9, sizeof(tmp_var_float9));
  if (raw_var_float9 != 0) {
    total_size += 2 + 4;
  }

  // float var_float10 = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float10 = this->_internal_var_float10();
  uint32_t raw_var_float10;
  memcpy(&raw_var_float10, &tmp_var_float10, sizeof(tmp_var_float10));
  if (raw_var_float10 != 0) {
    total_size += 2 + 4;
  }

  // float var_float11 = 43;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float11 = this->_internal_var_float11();
  uint32_t raw_var_float11;
  memcpy(&raw_var_float11, &tmp_var_float11, sizeof(tmp_var_float11));
  if (raw_var_float11 != 0) {
    total_size += 2 + 4;
  }

  // float var_float12 = 44;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float12 = this->_internal_var_float12();
  uint32_t raw_var_float12;
  memcpy(&raw_var_float12, &tmp_var_float12, sizeof(tmp_var_float12));
  if (raw_var_float12 != 0) {
    total_size += 2 + 4;
  }

  // float var_float13 = 45;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float13 = this->_internal_var_float13();
  uint32_t raw_var_float13;
  memcpy(&raw_var_float13, &tmp_var_float13, sizeof(tmp_var_float13));
  if (raw_var_float13 != 0) {
    total_size += 2 + 4;
  }

  // float var_float14 = 46;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float14 = this->_internal_var_float14();
  uint32_t raw_var_float14;
  memcpy(&raw_var_float14, &tmp_var_float14, sizeof(tmp_var_float14));
  if (raw_var_float14 != 0) {
    total_size += 2 + 4;
  }

  // float var_float15 = 47;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float15 = this->_internal_var_float15();
  uint32_t raw_var_float15;
  memcpy(&raw_var_float15, &tmp_var_float15, sizeof(tmp_var_float15));
  if (raw_var_float15 != 0) {
    total_size += 2 + 4;
  }

  // float var_float16 = 48;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float16 = this->_internal_var_float16();
  uint32_t raw_var_float16;
  memcpy(&raw_var_float16, &tmp_var_float16, sizeof(tmp_var_float16));
  if (raw_var_float16 != 0) {
    total_size += 2 + 4;
  }

  // double var_double1 = 49;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 2 + 8;
  }

  // double var_double2 = 50;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 2 + 8;
  }

  // double var_double3 = 51;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 2 + 8;
  }

  // double var_double4 = 52;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // double var_double5 = 53;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = this->_internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    total_size += 2 + 8;
  }

  // double var_double6 = 54;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = this->_internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    total_size += 2 + 8;
  }

  // double var_double7 = 55;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = this->_internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    total_size += 2 + 8;
  }

  // double var_double8 = 56;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = this->_internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    total_size += 2 + 8;
  }

  // double var_double9 = 57;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double9 = this->_internal_var_double9();
  uint64_t raw_var_double9;
  memcpy(&raw_var_double9, &tmp_var_double9, sizeof(tmp_var_double9));
  if (raw_var_double9 != 0) {
    total_size += 2 + 8;
  }

  // double var_double10 = 58;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double10 = this->_internal_var_double10();
  uint64_t raw_var_double10;
  memcpy(&raw_var_double10, &tmp_var_double10, sizeof(tmp_var_double10));
  if (raw_var_double10 != 0) {
    total_size += 2 + 8;
  }

  // double var_double11 = 59;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double11 = this->_internal_var_double11();
  uint64_t raw_var_double11;
  memcpy(&raw_var_double11, &tmp_var_double11, sizeof(tmp_var_double11));
  if (raw_var_double11 != 0) {
    total_size += 2 + 8;
  }

  // double var_double12 = 60;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double12 = this->_internal_var_double12();
  uint64_t raw_var_double12;
  memcpy(&raw_var_double12, &tmp_var_double12, sizeof(tmp_var_double12));
  if (raw_var_double12 != 0) {
    total_size += 2 + 8;
  }

  // double var_double13 = 61;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double13 = this->_internal_var_double13();
  uint64_t raw_var_double13;
  memcpy(&raw_var_double13, &tmp_var_double13, sizeof(tmp_var_double13));
  if (raw_var_double13 != 0) {
    total_size += 2 + 8;
  }

  // double var_double14 = 62;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double14 = this->_internal_var_double14();
  uint64_t raw_var_double14;
  memcpy(&raw_var_double14, &tmp_var_double14, sizeof(tmp_var_double14));
  if (raw_var_double14 != 0) {
    total_size += 2 + 8;
  }

  // double var_double15 = 63;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double15 = this->_internal_var_double15();
  uint64_t raw_var_double15;
  memcpy(&raw_var_double15, &tmp_var_double15, sizeof(tmp_var_double15));
  if (raw_var_double15 != 0) {
    total_size += 2 + 8;
  }

  // double var_double16 = 64;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double16 = this->_internal_var_double16();
  uint64_t raw_var_double16;
  memcpy(&raw_var_double16, &tmp_var_double16, sizeof(tmp_var_double16));
  if (raw_var_double16 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 65;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 66;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 67;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 68;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool5 = 69;
  if (this->_internal_var_bool5() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool6 = 70;
  if (this->_internal_var_bool6() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool7 = 71;
  if (this->_internal_var_bool7() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool8 = 72;
  if (this->_internal_var_bool8() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool9 = 73;
  if (this->_internal_var_bool9() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool10 = 74;
  if (this->_internal_var_bool10() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool11 = 75;
  if (this->_internal_var_bool11() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool12 = 76;
  if (this->_internal_var_bool12() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool13 = 77;
  if (this->_internal_var_bool13() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool14 = 78;
  if (this->_internal_var_bool14() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool15 = 79;
  if (this->_internal_var_bool15() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool16 = 80;
  if (this->_internal_var_bool16() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleObject::GetClassData() const { return &_class_data_; }


void SimpleObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleObject*>(&to_msg);
  auto& from = static_cast<const SimpleObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SimpleObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (!from._internal_var_string5().empty()) {
    _this->_internal_set_var_string5(from._internal_var_string5());
  }
  if (!from._internal_var_string6().empty()) {
    _this->_internal_set_var_string6(from._internal_var_string6());
  }
  if (!from._internal_var_string7().empty()) {
    _this->_internal_set_var_string7(from._internal_var_string7());
  }
  if (!from._internal_var_string8().empty()) {
    _this->_internal_set_var_string8(from._internal_var_string8());
  }
  if (!from._internal_var_string9().empty()) {
    _this->_internal_set_var_string9(from._internal_var_string9());
  }
  if (!from._internal_var_string10().empty()) {
    _this->_internal_set_var_string10(from._internal_var_string10());
  }
  if (!from._internal_var_string11().empty()) {
    _this->_internal_set_var_string11(from._internal_var_string11());
  }
  if (!from._internal_var_string12().empty()) {
    _this->_internal_set_var_string12(from._internal_var_string12());
  }
  if (!from._internal_var_string13().empty()) {
    _this->_internal_set_var_string13(from._internal_var_string13());
  }
  if (!from._internal_var_string14().empty()) {
    _this->_internal_set_var_string14(from._internal_var_string14());
  }
  if (!from._internal_var_string15().empty()) {
    _this->_internal_set_var_string15(from._internal_var_string15());
  }
  if (!from._internal_var_string16().empty()) {
    _this->_internal_set_var_string16(from._internal_var_string16());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int325() != 0) {
    _this->_internal_set_var_int325(from._internal_var_int325());
  }
  if (from._internal_var_int326() != 0) {
    _this->_internal_set_var_int326(from._internal_var_int326());
  }
  if (from._internal_var_int327() != 0) {
    _this->_internal_set_var_int327(from._internal_var_int327());
  }
  if (from._internal_var_int328() != 0) {
    _this->_internal_set_var_int328(from._internal_var_int328());
  }
  if (from._internal_var_int329() != 0) {
    _this->_internal_set_var_int329(from._internal_var_int329());
  }
  if (from._internal_var_int3210() != 0) {
    _this->_internal_set_var_int3210(from._internal_var_int3210());
  }
  if (from._internal_var_int3211() != 0) {
    _this->_internal_set_var_int3211(from._internal_var_int3211());
  }
  if (from._internal_var_int3212() != 0) {
    _this->_internal_set_var_int3212(from._internal_var_int3212());
  }
  if (from._internal_var_int3213() != 0) {
    _this->_internal_set_var_int3213(from._internal_var_int3213());
  }
  if (from._internal_var_int3214() != 0) {
    _this->_internal_set_var_int3214(from._internal_var_int3214());
  }
  if (from._internal_var_int3215() != 0) {
    _this->_internal_set_var_int3215(from._internal_var_int3215());
  }
  if (from._internal_var_int3216() != 0) {
    _this->_internal_set_var_int3216(from._internal_var_int3216());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  if (from._internal_var_int645() != 0) {
    _this->_internal_set_var_int645(from._internal_var_int645());
  }
  if (from._internal_var_int646() != 0) {
    _this->_internal_set_var_int646(from._internal_var_int646());
  }
  if (from._internal_var_int647() != 0) {
    _this->_internal_set_var_int647(from._internal_var_int647());
  }
  if (from._internal_var_int648() != 0) {
    _this->_internal_set_var_int648(from._internal_var_int648());
  }
  if (from._internal_var_int649() != 0) {
    _this->_internal_set_var_int649(from._internal_var_int649());
  }
  if (from._internal_var_int6410() != 0) {
    _this->_internal_set_var_int6410(from._internal_var_int6410());
  }
  if (from._internal_var_int6411() != 0) {
    _this->_internal_set_var_int6411(from._internal_var_int6411());
  }
  if (from._internal_var_int6412() != 0) {
    _this->_internal_set_var_int6412(from._internal_var_int6412());
  }
  if (from._internal_var_int6413() != 0) {
    _this->_internal_set_var_int6413(from._internal_var_int6413());
  }
  if (from._internal_var_int6414() != 0) {
    _this->_internal_set_var_int6414(from._internal_var_int6414());
  }
  if (from._internal_var_int6415() != 0) {
    _this->_internal_set_var_int6415(from._internal_var_int6415());
  }
  if (from._internal_var_int6416() != 0) {
    _this->_internal_set_var_int6416(from._internal_var_int6416());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = from._internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    _this->_internal_set_var_float5(from._internal_var_float5());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = from._internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    _this->_internal_set_var_float6(from._internal_var_float6());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = from._internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    _this->_internal_set_var_float7(from._internal_var_float7());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = from._internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    _this->_internal_set_var_float8(from._internal_var_float8());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float9 = from._internal_var_float9();
  uint32_t raw_var_float9;
  memcpy(&raw_var_float9, &tmp_var_float9, sizeof(tmp_var_float9));
  if (raw_var_float9 != 0) {
    _this->_internal_set_var_float9(from._internal_var_float9());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float10 = from._internal_var_float10();
  uint32_t raw_var_float10;
  memcpy(&raw_var_float10, &tmp_var_float10, sizeof(tmp_var_float10));
  if (raw_var_float10 != 0) {
    _this->_internal_set_var_float10(from._internal_var_float10());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float11 = from._internal_var_float11();
  uint32_t raw_var_float11;
  memcpy(&raw_var_float11, &tmp_var_float11, sizeof(tmp_var_float11));
  if (raw_var_float11 != 0) {
    _this->_internal_set_var_float11(from._internal_var_float11());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float12 = from._internal_var_float12();
  uint32_t raw_var_float12;
  memcpy(&raw_var_float12, &tmp_var_float12, sizeof(tmp_var_float12));
  if (raw_var_float12 != 0) {
    _this->_internal_set_var_float12(from._internal_var_float12());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float13 = from._internal_var_float13();
  uint32_t raw_var_float13;
  memcpy(&raw_var_float13, &tmp_var_float13, sizeof(tmp_var_float13));
  if (raw_var_float13 != 0) {
    _this->_internal_set_var_float13(from._internal_var_float13());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float14 = from._internal_var_float14();
  uint32_t raw_var_float14;
  memcpy(&raw_var_float14, &tmp_var_float14, sizeof(tmp_var_float14));
  if (raw_var_float14 != 0) {
    _this->_internal_set_var_float14(from._internal_var_float14());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float15 = from._internal_var_float15();
  uint32_t raw_var_float15;
  memcpy(&raw_var_float15, &tmp_var_float15, sizeof(tmp_var_float15));
  if (raw_var_float15 != 0) {
    _this->_internal_set_var_float15(from._internal_var_float15());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float16 = from._internal_var_float16();
  uint32_t raw_var_float16;
  memcpy(&raw_var_float16, &tmp_var_float16, sizeof(tmp_var_float16));
  if (raw_var_float16 != 0) {
    _this->_internal_set_var_float16(from._internal_var_float16());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = from._internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    _this->_internal_set_var_double5(from._internal_var_double5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = from._internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    _this->_internal_set_var_double6(from._internal_var_double6());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = from._internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    _this->_internal_set_var_double7(from._internal_var_double7());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = from._internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    _this->_internal_set_var_double8(from._internal_var_double8());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double9 = from._internal_var_double9();
  uint64_t raw_var_double9;
  memcpy(&raw_var_double9, &tmp_var_double9, sizeof(tmp_var_double9));
  if (raw_var_double9 != 0) {
    _this->_internal_set_var_double9(from._internal_var_double9());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double10 = from._internal_var_double10();
  uint64_t raw_var_double10;
  memcpy(&raw_var_double10, &tmp_var_double10, sizeof(tmp_var_double10));
  if (raw_var_double10 != 0) {
    _this->_internal_set_var_double10(from._internal_var_double10());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double11 = from._internal_var_double11();
  uint64_t raw_var_double11;
  memcpy(&raw_var_double11, &tmp_var_double11, sizeof(tmp_var_double11));
  if (raw_var_double11 != 0) {
    _this->_internal_set_var_double11(from._internal_var_double11());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double12 = from._internal_var_double12();
  uint64_t raw_var_double12;
  memcpy(&raw_var_double12, &tmp_var_double12, sizeof(tmp_var_double12));
  if (raw_var_double12 != 0) {
    _this->_internal_set_var_double12(from._internal_var_double12());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double13 = from._internal_var_double13();
  uint64_t raw_var_double13;
  memcpy(&raw_var_double13, &tmp_var_double13, sizeof(tmp_var_double13));
  if (raw_var_double13 != 0) {
    _this->_internal_set_var_double13(from._internal_var_double13());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double14 = from._internal_var_double14();
  uint64_t raw_var_double14;
  memcpy(&raw_var_double14, &tmp_var_double14, sizeof(tmp_var_double14));
  if (raw_var_double14 != 0) {
    _this->_internal_set_var_double14(from._internal_var_double14());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double15 = from._internal_var_double15();
  uint64_t raw_var_double15;
  memcpy(&raw_var_double15, &tmp_var_double15, sizeof(tmp_var_double15));
  if (raw_var_double15 != 0) {
    _this->_internal_set_var_double15(from._internal_var_double15());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double16 = from._internal_var_double16();
  uint64_t raw_var_double16;
  memcpy(&raw_var_double16, &tmp_var_double16, sizeof(tmp_var_double16));
  if (raw_var_double16 != 0) {
    _this->_internal_set_var_double16(from._internal_var_double16());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  if (from._internal_var_bool5() != 0) {
    _this->_internal_set_var_bool5(from._internal_var_bool5());
  }
  if (from._internal_var_bool6() != 0) {
    _this->_internal_set_var_bool6(from._internal_var_bool6());
  }
  if (from._internal_var_bool7() != 0) {
    _this->_internal_set_var_bool7(from._internal_var_bool7());
  }
  if (from._internal_var_bool8() != 0) {
    _this->_internal_set_var_bool8(from._internal_var_bool8());
  }
  if (from._internal_var_bool9() != 0) {
    _this->_internal_set_var_bool9(from._internal_var_bool9());
  }
  if (from._internal_var_bool10() != 0) {
    _this->_internal_set_var_bool10(from._internal_var_bool10());
  }
  if (from._internal_var_bool11() != 0) {
    _this->_internal_set_var_bool11(from._internal_var_bool11());
  }
  if (from._internal_var_bool12() != 0) {
    _this->_internal_set_var_bool12(from._internal_var_bool12());
  }
  if (from._internal_var_bool13() != 0) {
    _this->_internal_set_var_bool13(from._internal_var_bool13());
  }
  if (from._internal_var_bool14() != 0) {
    _this->_internal_set_var_bool14(from._internal_var_bool14());
  }
  if (from._internal_var_bool15() != 0) {
    _this->_internal_set_var_bool15(from._internal_var_bool15());
  }
  if (from._internal_var_bool16() != 0) {
    _this->_internal_set_var_bool16(from._internal_var_bool16());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleObject::CopyFrom(const SimpleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SimpleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleObject::IsInitialized() const {
  return true;
}

void SimpleObject::InternalSwap(SimpleObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string5_, lhs_arena,
      &other->_impl_.var_string5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string6_, lhs_arena,
      &other->_impl_.var_string6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string7_, lhs_arena,
      &other->_impl_.var_string7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string8_, lhs_arena,
      &other->_impl_.var_string8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string9_, lhs_arena,
      &other->_impl_.var_string9_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string10_, lhs_arena,
      &other->_impl_.var_string10_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string11_, lhs_arena,
      &other->_impl_.var_string11_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string12_, lhs_arena,
      &other->_impl_.var_string12_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string13_, lhs_arena,
      &other->_impl_.var_string13_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string14_, lhs_arena,
      &other->_impl_.var_string14_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string15_, lhs_arena,
      &other->_impl_.var_string15_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string16_, lhs_arena,
      &other->_impl_.var_string16_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleObject, _impl_.var_bool16_)
      + sizeof(SimpleObject::_impl_.var_bool16_)
      - PROTOBUF_FIELD_OFFSET(SimpleObject, _impl_.var_int321_)>(
          reinterpret_cast<char*>(&_impl_.var_int321_),
          reinterpret_cast<char*>(&other->_impl_.var_int321_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SimpleObject_2eproto_getter, &descriptor_table_SimpleObject_2eproto_once,
      file_level_metadata_SimpleObject_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::SimpleObject*
Arena::CreateMaybeMessage< ::proto::SimpleObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SimpleObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
