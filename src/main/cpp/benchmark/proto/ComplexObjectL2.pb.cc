// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComplexObjectL2.proto

#include "ComplexObjectL2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ComplexObjectL2::ComplexObjectL2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl21_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL2DefaultTypeInternal() {}
  union {
    ComplexObjectL2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL2DefaultTypeInternal _ComplexObjectL2_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL21::ComplexObjectL21(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl22_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL21DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL21DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL21DefaultTypeInternal() {}
  union {
    ComplexObjectL21 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL21DefaultTypeInternal _ComplexObjectL21_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL22::ComplexObjectL22(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl23_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL22DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL22DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL22DefaultTypeInternal() {}
  union {
    ComplexObjectL22 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL22DefaultTypeInternal _ComplexObjectL22_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL23::ComplexObjectL23(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL23DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL23DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL23DefaultTypeInternal() {}
  union {
    ComplexObjectL23 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL23DefaultTypeInternal _ComplexObjectL23_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_ComplexObjectL2_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ComplexObjectL2_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ComplexObjectL2_2eproto = nullptr;

const uint32_t TableStruct_ComplexObjectL2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.var_string4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL2, _impl_.complexobjectl21_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.var_string4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL21, _impl_.complexobjectl22_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.var_string4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL22, _impl_.complexobjectl23_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL23, _impl_.var_string4_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ComplexObjectL2)},
  { 31, -1, -1, sizeof(::proto::ComplexObjectL21)},
  { 62, -1, -1, sizeof(::proto::ComplexObjectL22)},
  { 93, -1, -1, sizeof(::proto::ComplexObjectL23)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ComplexObjectL2_default_instance_._instance,
  &::proto::_ComplexObjectL21_default_instance_._instance,
  &::proto::_ComplexObjectL22_default_instance_._instance,
  &::proto::_ComplexObjectL23_default_instance_._instance,
};

const char descriptor_table_protodef_ComplexObjectL2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ComplexObjectL2.proto\022\005proto\"\250\004\n\017Compl"
  "exObjectL2\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_in"
  "t322\030\002 \001(\005\022\022\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_in"
  "t324\030\004 \001(\005\022\022\n\nvar_int641\030\005 \001(\003\022\022\n\nvar_in"
  "t642\030\006 \001(\003\022\022\n\nvar_int643\030\007 \001(\003\022\022\n\nvar_in"
  "t644\030\010 \001(\003\022\022\n\nvar_float1\030\t \001(\002\022\022\n\nvar_fl"
  "oat2\030\n \001(\002\022\022\n\nvar_float3\030\013 \001(\002\022\022\n\nvar_fl"
  "oat4\030\014 \001(\002\022\023\n\013var_double1\030\r \001(\001\022\023\n\013var_d"
  "ouble2\030\016 \001(\001\022\023\n\013var_double3\030\017 \001(\001\022\023\n\013var"
  "_double4\030\020 \001(\001\022\021\n\tvar_bool1\030\021 \001(\010\022\021\n\tvar"
  "_bool2\030\022 \001(\010\022\021\n\tvar_bool3\030\023 \001(\010\022\021\n\tvar_b"
  "ool4\030\024 \001(\010\022\023\n\013var_string1\030\025 \001(\t\022\023\n\013var_s"
  "tring2\030\026 \001(\t\022\023\n\013var_string3\030\027 \001(\t\022\023\n\013var"
  "_string4\030\030 \001(\t\0221\n\020complexObjectL21\030\031 \001(\013"
  "2\027.proto.ComplexObjectL21\"\251\004\n\020ComplexObj"
  "ectL21\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int322"
  "\030\002 \001(\005\022\022\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_int324"
  "\030\004 \001(\005\022\022\n\nvar_int641\030\005 \001(\003\022\022\n\nvar_int642"
  "\030\006 \001(\003\022\022\n\nvar_int643\030\007 \001(\003\022\022\n\nvar_int644"
  "\030\010 \001(\003\022\022\n\nvar_float1\030\t \001(\002\022\022\n\nvar_float2"
  "\030\n \001(\002\022\022\n\nvar_float3\030\013 \001(\002\022\022\n\nvar_float4"
  "\030\014 \001(\002\022\023\n\013var_double1\030\r \001(\001\022\023\n\013var_doubl"
  "e2\030\016 \001(\001\022\023\n\013var_double3\030\017 \001(\001\022\023\n\013var_dou"
  "ble4\030\020 \001(\001\022\021\n\tvar_bool1\030\021 \001(\010\022\021\n\tvar_boo"
  "l2\030\022 \001(\010\022\021\n\tvar_bool3\030\023 \001(\010\022\021\n\tvar_bool4"
  "\030\024 \001(\010\022\023\n\013var_string1\030\025 \001(\t\022\023\n\013var_strin"
  "g2\030\026 \001(\t\022\023\n\013var_string3\030\027 \001(\t\022\023\n\013var_str"
  "ing4\030\030 \001(\t\0221\n\020complexObjectL22\030\031 \001(\0132\027.p"
  "roto.ComplexObjectL22\"\251\004\n\020ComplexObjectL"
  "22\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int322\030\002 \001"
  "(\005\022\022\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_int324\030\004 \001"
  "(\005\022\022\n\nvar_int641\030\005 \001(\003\022\022\n\nvar_int642\030\006 \001"
  "(\003\022\022\n\nvar_int643\030\007 \001(\003\022\022\n\nvar_int644\030\010 \001"
  "(\003\022\022\n\nvar_float1\030\t \001(\002\022\022\n\nvar_float2\030\n \001"
  "(\002\022\022\n\nvar_float3\030\013 \001(\002\022\022\n\nvar_float4\030\014 \001"
  "(\002\022\023\n\013var_double1\030\r \001(\001\022\023\n\013var_double2\030\016"
  " \001(\001\022\023\n\013var_double3\030\017 \001(\001\022\023\n\013var_double4"
  "\030\020 \001(\001\022\021\n\tvar_bool1\030\021 \001(\010\022\021\n\tvar_bool2\030\022"
  " \001(\010\022\021\n\tvar_bool3\030\023 \001(\010\022\021\n\tvar_bool4\030\024 \001"
  "(\010\022\023\n\013var_string1\030\025 \001(\t\022\023\n\013var_string2\030\026"
  " \001(\t\022\023\n\013var_string3\030\027 \001(\t\022\023\n\013var_string4"
  "\030\030 \001(\t\0221\n\020complexObjectL23\030\031 \001(\0132\027.proto"
  ".ComplexObjectL23\"\366\003\n\020ComplexObjectL23\022\022"
  "\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int322\030\002 \001(\005\022\022"
  "\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_int324\030\004 \001(\005\022\022"
  "\n\nvar_int641\030\005 \001(\003\022\022\n\nvar_int642\030\006 \001(\003\022\022"
  "\n\nvar_int643\030\007 \001(\003\022\022\n\nvar_int644\030\010 \001(\003\022\022"
  "\n\nvar_float1\030\t \001(\002\022\022\n\nvar_float2\030\n \001(\002\022\022"
  "\n\nvar_float3\030\013 \001(\002\022\022\n\nvar_float4\030\014 \001(\002\022\023"
  "\n\013var_double1\030\r \001(\001\022\023\n\013var_double2\030\016 \001(\001"
  "\022\023\n\013var_double3\030\017 \001(\001\022\023\n\013var_double4\030\020 \001"
  "(\001\022\021\n\tvar_bool1\030\021 \001(\010\022\021\n\tvar_bool2\030\022 \001(\010"
  "\022\021\n\tvar_bool3\030\023 \001(\010\022\021\n\tvar_bool4\030\024 \001(\010\022\023"
  "\n\013var_string1\030\025 \001(\t\022\023\n\013var_string2\030\026 \001(\t"
  "\022\023\n\013var_string3\030\027 \001(\t\022\023\n\013var_string4\030\030 \001"
  "(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ComplexObjectL2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ComplexObjectL2_2eproto = {
    false, false, 2210, descriptor_table_protodef_ComplexObjectL2_2eproto,
    "ComplexObjectL2.proto",
    &descriptor_table_ComplexObjectL2_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_ComplexObjectL2_2eproto::offsets,
    file_level_metadata_ComplexObjectL2_2eproto, file_level_enum_descriptors_ComplexObjectL2_2eproto,
    file_level_service_descriptors_ComplexObjectL2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ComplexObjectL2_2eproto_getter() {
  return &descriptor_table_ComplexObjectL2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ComplexObjectL2_2eproto(&descriptor_table_ComplexObjectL2_2eproto);
namespace proto {

// ===================================================================

class ComplexObjectL2::_Internal {
 public:
  static const ::proto::ComplexObjectL21& complexobjectl21(const ComplexObjectL2* msg);
};

const ::proto::ComplexObjectL21&
ComplexObjectL2::_Internal::complexobjectl21(const ComplexObjectL2* msg) {
  return *msg->_impl_.complexobjectl21_;
}
ComplexObjectL2::ComplexObjectL2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL2)
}
ComplexObjectL2::ComplexObjectL2(const ComplexObjectL2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.complexobjectl21_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl21()) {
    _this->_impl_.complexobjectl21_ = new ::proto::ComplexObjectL21(*from._impl_.complexobjectl21_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool4_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL2)
}

inline void ComplexObjectL2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.complexobjectl21_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL2::~ComplexObjectL2() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl21_;
}

void ComplexObjectL2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl21_ != nullptr) {
    delete _impl_.complexobjectl21_;
  }
  _impl_.complexobjectl21_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool4_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL2.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL2.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL2.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL2.var_string4"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL21 complexObjectL21 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl21(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_var_int644(), target);
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_var_float1(), target);
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_var_float2(), target);
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_var_float3(), target);
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_var_float4(), target);
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_var_double1(), target);
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_var_double2(), target);
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_var_double3(), target);
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_var_double4(), target);
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_var_bool4(), target);
  }

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL2.var_string1");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_var_string1(), target);
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL2.var_string2");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_var_string2(), target);
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL2.var_string3");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_var_string3(), target);
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL2.var_string4");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_var_string4(), target);
  }

  // .proto.ComplexObjectL21 complexObjectL21 = 25;
  if (this->_internal_has_complexobjectl21()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::complexobjectl21(this),
        _Internal::complexobjectl21(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL2)
  return target;
}

size_t ComplexObjectL2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // .proto.ComplexObjectL21 complexObjectL21 = 25;
  if (this->_internal_has_complexobjectl21()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl21_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int643());
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int644());
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 1 + 4;
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 1 + 8;
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL2::GetClassData() const { return &_class_data_; }


void ComplexObjectL2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL2*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (from._internal_has_complexobjectl21()) {
    _this->_internal_mutable_complexobjectl21()->::proto::ComplexObjectL21::MergeFrom(
        from._internal_complexobjectl21());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL2::CopyFrom(const ComplexObjectL2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL2::IsInitialized() const {
  return true;
}

void ComplexObjectL2::InternalSwap(ComplexObjectL2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL2, _impl_.var_bool4_)
      + sizeof(ComplexObjectL2::_impl_.var_bool4_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL2, _impl_.complexobjectl21_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl21_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl21_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL2_2eproto_getter, &descriptor_table_ComplexObjectL2_2eproto_once,
      file_level_metadata_ComplexObjectL2_2eproto[0]);
}

// ===================================================================

class ComplexObjectL21::_Internal {
 public:
  static const ::proto::ComplexObjectL22& complexobjectl22(const ComplexObjectL21* msg);
};

const ::proto::ComplexObjectL22&
ComplexObjectL21::_Internal::complexobjectl22(const ComplexObjectL21* msg) {
  return *msg->_impl_.complexobjectl22_;
}
ComplexObjectL21::ComplexObjectL21(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL21)
}
ComplexObjectL21::ComplexObjectL21(const ComplexObjectL21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL21* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.complexobjectl22_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl22()) {
    _this->_impl_.complexobjectl22_ = new ::proto::ComplexObjectL22(*from._impl_.complexobjectl22_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool4_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL21)
}

inline void ComplexObjectL21::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.complexobjectl22_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL21::~ComplexObjectL21() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL21)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL21::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl22_;
}

void ComplexObjectL21::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL21::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL21)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl22_ != nullptr) {
    delete _impl_.complexobjectl22_;
  }
  _impl_.complexobjectl22_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool4_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL21::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL21.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL21.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL21.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL21.var_string4"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL22 complexObjectL22 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl22(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL21::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL21)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_var_int644(), target);
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_var_float1(), target);
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_var_float2(), target);
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_var_float3(), target);
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_var_float4(), target);
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_var_double1(), target);
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_var_double2(), target);
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_var_double3(), target);
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_var_double4(), target);
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_var_bool4(), target);
  }

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL21.var_string1");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_var_string1(), target);
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL21.var_string2");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_var_string2(), target);
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL21.var_string3");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_var_string3(), target);
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL21.var_string4");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_var_string4(), target);
  }

  // .proto.ComplexObjectL22 complexObjectL22 = 25;
  if (this->_internal_has_complexobjectl22()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::complexobjectl22(this),
        _Internal::complexobjectl22(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL21)
  return target;
}

size_t ComplexObjectL21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL21)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // .proto.ComplexObjectL22 complexObjectL22 = 25;
  if (this->_internal_has_complexobjectl22()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl22_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int643());
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int644());
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 1 + 4;
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 1 + 8;
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL21::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL21::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL21::GetClassData() const { return &_class_data_; }


void ComplexObjectL21::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL21*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL21&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL21)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (from._internal_has_complexobjectl22()) {
    _this->_internal_mutable_complexobjectl22()->::proto::ComplexObjectL22::MergeFrom(
        from._internal_complexobjectl22());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL21::CopyFrom(const ComplexObjectL21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL21::IsInitialized() const {
  return true;
}

void ComplexObjectL21::InternalSwap(ComplexObjectL21* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL21, _impl_.var_bool4_)
      + sizeof(ComplexObjectL21::_impl_.var_bool4_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL21, _impl_.complexobjectl22_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl22_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl22_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL21::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL2_2eproto_getter, &descriptor_table_ComplexObjectL2_2eproto_once,
      file_level_metadata_ComplexObjectL2_2eproto[1]);
}

// ===================================================================

class ComplexObjectL22::_Internal {
 public:
  static const ::proto::ComplexObjectL23& complexobjectl23(const ComplexObjectL22* msg);
};

const ::proto::ComplexObjectL23&
ComplexObjectL22::_Internal::complexobjectl23(const ComplexObjectL22* msg) {
  return *msg->_impl_.complexobjectl23_;
}
ComplexObjectL22::ComplexObjectL22(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL22)
}
ComplexObjectL22::ComplexObjectL22(const ComplexObjectL22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL22* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.complexobjectl23_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl23()) {
    _this->_impl_.complexobjectl23_ = new ::proto::ComplexObjectL23(*from._impl_.complexobjectl23_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool4_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL22)
}

inline void ComplexObjectL22::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.complexobjectl23_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL22::~ComplexObjectL22() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL22)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL22::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl23_;
}

void ComplexObjectL22::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL22::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL22)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl23_ != nullptr) {
    delete _impl_.complexobjectl23_;
  }
  _impl_.complexobjectl23_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool4_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL22::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL22.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL22.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL22.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL22.var_string4"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL23 complexObjectL23 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl23(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL22::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL22)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_var_int644(), target);
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_var_float1(), target);
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_var_float2(), target);
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_var_float3(), target);
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_var_float4(), target);
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_var_double1(), target);
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_var_double2(), target);
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_var_double3(), target);
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_var_double4(), target);
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_var_bool4(), target);
  }

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL22.var_string1");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_var_string1(), target);
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL22.var_string2");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_var_string2(), target);
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL22.var_string3");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_var_string3(), target);
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL22.var_string4");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_var_string4(), target);
  }

  // .proto.ComplexObjectL23 complexObjectL23 = 25;
  if (this->_internal_has_complexobjectl23()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::complexobjectl23(this),
        _Internal::complexobjectl23(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL22)
  return target;
}

size_t ComplexObjectL22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL22)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // .proto.ComplexObjectL23 complexObjectL23 = 25;
  if (this->_internal_has_complexobjectl23()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl23_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int643());
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int644());
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 1 + 4;
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 1 + 8;
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL22::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL22::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL22::GetClassData() const { return &_class_data_; }


void ComplexObjectL22::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL22*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL22&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL22)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (from._internal_has_complexobjectl23()) {
    _this->_internal_mutable_complexobjectl23()->::proto::ComplexObjectL23::MergeFrom(
        from._internal_complexobjectl23());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL22::CopyFrom(const ComplexObjectL22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL22::IsInitialized() const {
  return true;
}

void ComplexObjectL22::InternalSwap(ComplexObjectL22* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL22, _impl_.var_bool4_)
      + sizeof(ComplexObjectL22::_impl_.var_bool4_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL22, _impl_.complexobjectl23_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl23_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl23_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL22::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL2_2eproto_getter, &descriptor_table_ComplexObjectL2_2eproto_once,
      file_level_metadata_ComplexObjectL2_2eproto[2]);
}

// ===================================================================

class ComplexObjectL23::_Internal {
 public:
};

ComplexObjectL23::ComplexObjectL23(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL23)
}
ComplexObjectL23::ComplexObjectL23(const ComplexObjectL23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL23* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool4_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL23)
}

inline void ComplexObjectL23::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL23::~ComplexObjectL23() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL23)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL23::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
}

void ComplexObjectL23::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL23::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL23)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool4_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL23::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL23.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL23.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL23.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL23.var_string4"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL23::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL23)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_var_int644(), target);
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_var_float1(), target);
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_var_float2(), target);
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_var_float3(), target);
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_var_float4(), target);
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_var_double1(), target);
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_var_double2(), target);
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_var_double3(), target);
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_var_double4(), target);
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_var_bool4(), target);
  }

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL23.var_string1");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_var_string1(), target);
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL23.var_string2");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_var_string2(), target);
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL23.var_string3");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_var_string3(), target);
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL23.var_string4");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_var_string4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL23)
  return target;
}

size_t ComplexObjectL23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL23)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 21;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 22;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 23;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 24;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int64 var_int641 = 5;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 6;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // int64 var_int643 = 7;
  if (this->_internal_var_int643() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int643());
  }

  // int64 var_int644 = 8;
  if (this->_internal_var_int644() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int644());
  }

  // float var_float1 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // float var_float3 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 1 + 4;
  }

  // float var_float4 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // double var_double3 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 1 + 8;
  }

  // double var_double4 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 17;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 18;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 19;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 20;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL23::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL23::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL23::GetClassData() const { return &_class_data_; }


void ComplexObjectL23::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL23*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL23&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL23)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL23::CopyFrom(const ComplexObjectL23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL23::IsInitialized() const {
  return true;
}

void ComplexObjectL23::InternalSwap(ComplexObjectL23* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL23, _impl_.var_bool4_)
      + sizeof(ComplexObjectL23::_impl_.var_bool4_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL23, _impl_.var_int321_)>(
          reinterpret_cast<char*>(&_impl_.var_int321_),
          reinterpret_cast<char*>(&other->_impl_.var_int321_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL23::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL2_2eproto_getter, &descriptor_table_ComplexObjectL2_2eproto_once,
      file_level_metadata_ComplexObjectL2_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL2*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL21*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL21 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL21 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL22*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL22 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL23*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL23 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
