// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComplexObjectL3.proto

#include "ComplexObjectL3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ComplexObjectL3::ComplexObjectL3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl31_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL3DefaultTypeInternal() {}
  union {
    ComplexObjectL3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL3DefaultTypeInternal _ComplexObjectL3_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL31::ComplexObjectL31(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl32_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL31DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL31DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL31DefaultTypeInternal() {}
  union {
    ComplexObjectL31 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL31DefaultTypeInternal _ComplexObjectL31_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL32::ComplexObjectL32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl33_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL32DefaultTypeInternal() {}
  union {
    ComplexObjectL32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL32DefaultTypeInternal _ComplexObjectL32_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL33::ComplexObjectL33(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl34_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL33DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL33DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL33DefaultTypeInternal() {}
  union {
    ComplexObjectL33 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL33DefaultTypeInternal _ComplexObjectL33_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL34::ComplexObjectL34(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl35_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL34DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL34DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL34DefaultTypeInternal() {}
  union {
    ComplexObjectL34 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL34DefaultTypeInternal _ComplexObjectL34_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL35::ComplexObjectL35(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl36_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL35DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL35DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL35DefaultTypeInternal() {}
  union {
    ComplexObjectL35 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL35DefaultTypeInternal _ComplexObjectL35_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL36::ComplexObjectL36(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl37_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL36DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL36DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL36DefaultTypeInternal() {}
  union {
    ComplexObjectL36 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL36DefaultTypeInternal _ComplexObjectL36_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL37::ComplexObjectL37(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL37DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL37DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL37DefaultTypeInternal() {}
  union {
    ComplexObjectL37 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL37DefaultTypeInternal _ComplexObjectL37_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_ComplexObjectL3_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ComplexObjectL3_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ComplexObjectL3_2eproto = nullptr;

const uint32_t TableStruct_ComplexObjectL3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL3, _impl_.complexobjectl31_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL31, _impl_.complexobjectl32_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL32, _impl_.complexobjectl33_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL33, _impl_.complexobjectl34_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL34, _impl_.complexobjectl35_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL35, _impl_.complexobjectl36_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL36, _impl_.complexobjectl37_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL37, _impl_.var_string2_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ComplexObjectL3)},
  { 19, -1, -1, sizeof(::proto::ComplexObjectL31)},
  { 38, -1, -1, sizeof(::proto::ComplexObjectL32)},
  { 57, -1, -1, sizeof(::proto::ComplexObjectL33)},
  { 76, -1, -1, sizeof(::proto::ComplexObjectL34)},
  { 95, -1, -1, sizeof(::proto::ComplexObjectL35)},
  { 114, -1, -1, sizeof(::proto::ComplexObjectL36)},
  { 133, -1, -1, sizeof(::proto::ComplexObjectL37)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ComplexObjectL3_default_instance_._instance,
  &::proto::_ComplexObjectL31_default_instance_._instance,
  &::proto::_ComplexObjectL32_default_instance_._instance,
  &::proto::_ComplexObjectL33_default_instance_._instance,
  &::proto::_ComplexObjectL34_default_instance_._instance,
  &::proto::_ComplexObjectL35_default_instance_._instance,
  &::proto::_ComplexObjectL36_default_instance_._instance,
  &::proto::_ComplexObjectL37_default_instance_._instance,
};

const char descriptor_table_protodef_ComplexObjectL3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ComplexObjectL3.proto\022\005proto\"\266\002\n\017Compl"
  "exObjectL3\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_in"
  "t322\030\002 \001(\005\022\022\n\nvar_int641\030\003 \001(\003\022\022\n\nvar_in"
  "t642\030\004 \001(\003\022\022\n\nvar_float1\030\005 \001(\002\022\022\n\nvar_fl"
  "oat2\030\006 \001(\002\022\023\n\013var_double1\030\007 \001(\001\022\023\n\013var_d"
  "ouble2\030\010 \001(\001\022\021\n\tvar_bool1\030\t \001(\010\022\021\n\tvar_b"
  "ool2\030\n \001(\010\022\023\n\013var_string1\030\013 \001(\t\022\023\n\013var_s"
  "tring2\030\014 \001(\t\0221\n\020complexObjectL31\030\r \001(\0132\027"
  ".proto.ComplexObjectL31\"\267\002\n\020ComplexObjec"
  "tL31\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int322\030\002"
  " \001(\005\022\022\n\nvar_int641\030\003 \001(\003\022\022\n\nvar_int642\030\004"
  " \001(\003\022\022\n\nvar_float1\030\005 \001(\002\022\022\n\nvar_float2\030\006"
  " \001(\002\022\023\n\013var_double1\030\007 \001(\001\022\023\n\013var_double2"
  "\030\010 \001(\001\022\021\n\tvar_bool1\030\t \001(\010\022\021\n\tvar_bool2\030\n"
  " \001(\010\022\023\n\013var_string1\030\013 \001(\t\022\023\n\013var_string2"
  "\030\014 \001(\t\0221\n\020complexObjectL32\030\r \001(\0132\027.proto"
  ".ComplexObjectL32\"\267\002\n\020ComplexObjectL32\022\022"
  "\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int322\030\002 \001(\005\022\022"
  "\n\nvar_int641\030\003 \001(\003\022\022\n\nvar_int642\030\004 \001(\003\022\022"
  "\n\nvar_float1\030\005 \001(\002\022\022\n\nvar_float2\030\006 \001(\002\022\023"
  "\n\013var_double1\030\007 \001(\001\022\023\n\013var_double2\030\010 \001(\001"
  "\022\021\n\tvar_bool1\030\t \001(\010\022\021\n\tvar_bool2\030\n \001(\010\022\023"
  "\n\013var_string1\030\013 \001(\t\022\023\n\013var_string2\030\014 \001(\t"
  "\0221\n\020complexObjectL33\030\r \001(\0132\027.proto.Compl"
  "exObjectL33\"\267\002\n\020ComplexObjectL33\022\022\n\nvar_"
  "int321\030\001 \001(\005\022\022\n\nvar_int322\030\002 \001(\005\022\022\n\nvar_"
  "int641\030\003 \001(\003\022\022\n\nvar_int642\030\004 \001(\003\022\022\n\nvar_"
  "float1\030\005 \001(\002\022\022\n\nvar_float2\030\006 \001(\002\022\023\n\013var_"
  "double1\030\007 \001(\001\022\023\n\013var_double2\030\010 \001(\001\022\021\n\tva"
  "r_bool1\030\t \001(\010\022\021\n\tvar_bool2\030\n \001(\010\022\023\n\013var_"
  "string1\030\013 \001(\t\022\023\n\013var_string2\030\014 \001(\t\0221\n\020co"
  "mplexObjectL34\030\r \001(\0132\027.proto.ComplexObje"
  "ctL34\"\267\002\n\020ComplexObjectL34\022\022\n\nvar_int321"
  "\030\001 \001(\005\022\022\n\nvar_int322\030\002 \001(\005\022\022\n\nvar_int641"
  "\030\003 \001(\003\022\022\n\nvar_int642\030\004 \001(\003\022\022\n\nvar_float1"
  "\030\005 \001(\002\022\022\n\nvar_float2\030\006 \001(\002\022\023\n\013var_double"
  "1\030\007 \001(\001\022\023\n\013var_double2\030\010 \001(\001\022\021\n\tvar_bool"
  "1\030\t \001(\010\022\021\n\tvar_bool2\030\n \001(\010\022\023\n\013var_string"
  "1\030\013 \001(\t\022\023\n\013var_string2\030\014 \001(\t\0221\n\020complexO"
  "bjectL35\030\r \001(\0132\027.proto.ComplexObjectL35\""
  "\267\002\n\020ComplexObjectL35\022\022\n\nvar_int321\030\001 \001(\005"
  "\022\022\n\nvar_int322\030\002 \001(\005\022\022\n\nvar_int641\030\003 \001(\003"
  "\022\022\n\nvar_int642\030\004 \001(\003\022\022\n\nvar_float1\030\005 \001(\002"
  "\022\022\n\nvar_float2\030\006 \001(\002\022\023\n\013var_double1\030\007 \001("
  "\001\022\023\n\013var_double2\030\010 \001(\001\022\021\n\tvar_bool1\030\t \001("
  "\010\022\021\n\tvar_bool2\030\n \001(\010\022\023\n\013var_string1\030\013 \001("
  "\t\022\023\n\013var_string2\030\014 \001(\t\0221\n\020complexObjectL"
  "36\030\r \001(\0132\027.proto.ComplexObjectL36\"\267\002\n\020Co"
  "mplexObjectL36\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nva"
  "r_int322\030\002 \001(\005\022\022\n\nvar_int641\030\003 \001(\003\022\022\n\nva"
  "r_int642\030\004 \001(\003\022\022\n\nvar_float1\030\005 \001(\002\022\022\n\nva"
  "r_float2\030\006 \001(\002\022\023\n\013var_double1\030\007 \001(\001\022\023\n\013v"
  "ar_double2\030\010 \001(\001\022\021\n\tvar_bool1\030\t \001(\010\022\021\n\tv"
  "ar_bool2\030\n \001(\010\022\023\n\013var_string1\030\013 \001(\t\022\023\n\013v"
  "ar_string2\030\014 \001(\t\0221\n\020complexObjectL37\030\r \001"
  "(\0132\027.proto.ComplexObjectL37\"\204\002\n\020ComplexO"
  "bjectL37\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_int3"
  "22\030\002 \001(\005\022\022\n\nvar_int641\030\003 \001(\003\022\022\n\nvar_int6"
  "42\030\004 \001(\003\022\022\n\nvar_float1\030\005 \001(\002\022\022\n\nvar_floa"
  "t2\030\006 \001(\002\022\023\n\013var_double1\030\007 \001(\001\022\023\n\013var_dou"
  "ble2\030\010 \001(\001\022\021\n\tvar_bool1\030\t \001(\010\022\021\n\tvar_boo"
  "l2\030\n \001(\010\022\023\n\013var_string1\030\013 \001(\t\022\023\n\013var_str"
  "ing2\030\014 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ComplexObjectL3_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ComplexObjectL3_2eproto = {
    false, false, 2498, descriptor_table_protodef_ComplexObjectL3_2eproto,
    "ComplexObjectL3.proto",
    &descriptor_table_ComplexObjectL3_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_ComplexObjectL3_2eproto::offsets,
    file_level_metadata_ComplexObjectL3_2eproto, file_level_enum_descriptors_ComplexObjectL3_2eproto,
    file_level_service_descriptors_ComplexObjectL3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ComplexObjectL3_2eproto_getter() {
  return &descriptor_table_ComplexObjectL3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ComplexObjectL3_2eproto(&descriptor_table_ComplexObjectL3_2eproto);
namespace proto {

// ===================================================================

class ComplexObjectL3::_Internal {
 public:
  static const ::proto::ComplexObjectL31& complexobjectl31(const ComplexObjectL3* msg);
};

const ::proto::ComplexObjectL31&
ComplexObjectL3::_Internal::complexobjectl31(const ComplexObjectL3* msg) {
  return *msg->_impl_.complexobjectl31_;
}
ComplexObjectL3::ComplexObjectL3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL3)
}
ComplexObjectL3::ComplexObjectL3(const ComplexObjectL3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl31_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl31()) {
    _this->_impl_.complexobjectl31_ = new ::proto::ComplexObjectL31(*from._impl_.complexobjectl31_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL3)
}

inline void ComplexObjectL3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl31_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL3::~ComplexObjectL3() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl31_;
}

void ComplexObjectL3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL3::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl31_ != nullptr) {
    delete _impl_.complexobjectl31_;
  }
  _impl_.complexobjectl31_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL3.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL3.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL31 complexObjectL31 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl31(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL3.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL3.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL31 complexObjectL31 = 13;
  if (this->_internal_has_complexobjectl31()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl31(this),
        _Internal::complexobjectl31(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL3)
  return target;
}

size_t ComplexObjectL3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL31 complexObjectL31 = 13;
  if (this->_internal_has_complexobjectl31()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl31_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL3::GetClassData() const { return &_class_data_; }


void ComplexObjectL3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL3*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl31()) {
    _this->_internal_mutable_complexobjectl31()->::proto::ComplexObjectL31::MergeFrom(
        from._internal_complexobjectl31());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL3::CopyFrom(const ComplexObjectL3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL3::IsInitialized() const {
  return true;
}

void ComplexObjectL3::InternalSwap(ComplexObjectL3* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL3, _impl_.var_bool2_)
      + sizeof(ComplexObjectL3::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL3, _impl_.complexobjectl31_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl31_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl31_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[0]);
}

// ===================================================================

class ComplexObjectL31::_Internal {
 public:
  static const ::proto::ComplexObjectL32& complexobjectl32(const ComplexObjectL31* msg);
};

const ::proto::ComplexObjectL32&
ComplexObjectL31::_Internal::complexobjectl32(const ComplexObjectL31* msg) {
  return *msg->_impl_.complexobjectl32_;
}
ComplexObjectL31::ComplexObjectL31(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL31)
}
ComplexObjectL31::ComplexObjectL31(const ComplexObjectL31& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL31* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl32_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl32()) {
    _this->_impl_.complexobjectl32_ = new ::proto::ComplexObjectL32(*from._impl_.complexobjectl32_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL31)
}

inline void ComplexObjectL31::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl32_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL31::~ComplexObjectL31() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL31)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL31::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl32_;
}

void ComplexObjectL31::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL31::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL31)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl32_ != nullptr) {
    delete _impl_.complexobjectl32_;
  }
  _impl_.complexobjectl32_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL31::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL31.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL31.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL32 complexObjectL32 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl32(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL31::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL31)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL31.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL31.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL32 complexObjectL32 = 13;
  if (this->_internal_has_complexobjectl32()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl32(this),
        _Internal::complexobjectl32(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL31)
  return target;
}

size_t ComplexObjectL31::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL31)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL32 complexObjectL32 = 13;
  if (this->_internal_has_complexobjectl32()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl32_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL31::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL31::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL31::GetClassData() const { return &_class_data_; }


void ComplexObjectL31::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL31*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL31&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL31)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl32()) {
    _this->_internal_mutable_complexobjectl32()->::proto::ComplexObjectL32::MergeFrom(
        from._internal_complexobjectl32());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL31::CopyFrom(const ComplexObjectL31& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL31::IsInitialized() const {
  return true;
}

void ComplexObjectL31::InternalSwap(ComplexObjectL31* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL31, _impl_.var_bool2_)
      + sizeof(ComplexObjectL31::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL31, _impl_.complexobjectl32_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl32_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl32_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL31::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[1]);
}

// ===================================================================

class ComplexObjectL32::_Internal {
 public:
  static const ::proto::ComplexObjectL33& complexobjectl33(const ComplexObjectL32* msg);
};

const ::proto::ComplexObjectL33&
ComplexObjectL32::_Internal::complexobjectl33(const ComplexObjectL32* msg) {
  return *msg->_impl_.complexobjectl33_;
}
ComplexObjectL32::ComplexObjectL32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL32)
}
ComplexObjectL32::ComplexObjectL32(const ComplexObjectL32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl33_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl33()) {
    _this->_impl_.complexobjectl33_ = new ::proto::ComplexObjectL33(*from._impl_.complexobjectl33_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL32)
}

inline void ComplexObjectL32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl33_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL32::~ComplexObjectL32() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl33_;
}

void ComplexObjectL32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL32::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl33_ != nullptr) {
    delete _impl_.complexobjectl33_;
  }
  _impl_.complexobjectl33_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL32.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL32.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL33 complexObjectL33 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl33(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL32.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL32.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL33 complexObjectL33 = 13;
  if (this->_internal_has_complexobjectl33()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl33(this),
        _Internal::complexobjectl33(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL32)
  return target;
}

size_t ComplexObjectL32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL33 complexObjectL33 = 13;
  if (this->_internal_has_complexobjectl33()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl33_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL32::GetClassData() const { return &_class_data_; }


void ComplexObjectL32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL32*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl33()) {
    _this->_internal_mutable_complexobjectl33()->::proto::ComplexObjectL33::MergeFrom(
        from._internal_complexobjectl33());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL32::CopyFrom(const ComplexObjectL32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL32::IsInitialized() const {
  return true;
}

void ComplexObjectL32::InternalSwap(ComplexObjectL32* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL32, _impl_.var_bool2_)
      + sizeof(ComplexObjectL32::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL32, _impl_.complexobjectl33_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl33_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl33_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[2]);
}

// ===================================================================

class ComplexObjectL33::_Internal {
 public:
  static const ::proto::ComplexObjectL34& complexobjectl34(const ComplexObjectL33* msg);
};

const ::proto::ComplexObjectL34&
ComplexObjectL33::_Internal::complexobjectl34(const ComplexObjectL33* msg) {
  return *msg->_impl_.complexobjectl34_;
}
ComplexObjectL33::ComplexObjectL33(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL33)
}
ComplexObjectL33::ComplexObjectL33(const ComplexObjectL33& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL33* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl34_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl34()) {
    _this->_impl_.complexobjectl34_ = new ::proto::ComplexObjectL34(*from._impl_.complexobjectl34_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL33)
}

inline void ComplexObjectL33::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl34_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL33::~ComplexObjectL33() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL33)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL33::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl34_;
}

void ComplexObjectL33::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL33::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL33)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl34_ != nullptr) {
    delete _impl_.complexobjectl34_;
  }
  _impl_.complexobjectl34_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL33::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL33.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL33.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL34 complexObjectL34 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl34(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL33::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL33)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL33.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL33.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL34 complexObjectL34 = 13;
  if (this->_internal_has_complexobjectl34()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl34(this),
        _Internal::complexobjectl34(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL33)
  return target;
}

size_t ComplexObjectL33::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL33)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL34 complexObjectL34 = 13;
  if (this->_internal_has_complexobjectl34()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl34_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL33::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL33::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL33::GetClassData() const { return &_class_data_; }


void ComplexObjectL33::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL33*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL33&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL33)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl34()) {
    _this->_internal_mutable_complexobjectl34()->::proto::ComplexObjectL34::MergeFrom(
        from._internal_complexobjectl34());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL33::CopyFrom(const ComplexObjectL33& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL33::IsInitialized() const {
  return true;
}

void ComplexObjectL33::InternalSwap(ComplexObjectL33* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL33, _impl_.var_bool2_)
      + sizeof(ComplexObjectL33::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL33, _impl_.complexobjectl34_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl34_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl34_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL33::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[3]);
}

// ===================================================================

class ComplexObjectL34::_Internal {
 public:
  static const ::proto::ComplexObjectL35& complexobjectl35(const ComplexObjectL34* msg);
};

const ::proto::ComplexObjectL35&
ComplexObjectL34::_Internal::complexobjectl35(const ComplexObjectL34* msg) {
  return *msg->_impl_.complexobjectl35_;
}
ComplexObjectL34::ComplexObjectL34(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL34)
}
ComplexObjectL34::ComplexObjectL34(const ComplexObjectL34& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL34* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl35_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl35()) {
    _this->_impl_.complexobjectl35_ = new ::proto::ComplexObjectL35(*from._impl_.complexobjectl35_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL34)
}

inline void ComplexObjectL34::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl35_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL34::~ComplexObjectL34() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL34)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL34::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl35_;
}

void ComplexObjectL34::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL34::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL34)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl35_ != nullptr) {
    delete _impl_.complexobjectl35_;
  }
  _impl_.complexobjectl35_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL34::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL34.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL34.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL35 complexObjectL35 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl35(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL34::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL34)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL34.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL34.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL35 complexObjectL35 = 13;
  if (this->_internal_has_complexobjectl35()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl35(this),
        _Internal::complexobjectl35(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL34)
  return target;
}

size_t ComplexObjectL34::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL34)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL35 complexObjectL35 = 13;
  if (this->_internal_has_complexobjectl35()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl35_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL34::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL34::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL34::GetClassData() const { return &_class_data_; }


void ComplexObjectL34::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL34*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL34&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL34)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl35()) {
    _this->_internal_mutable_complexobjectl35()->::proto::ComplexObjectL35::MergeFrom(
        from._internal_complexobjectl35());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL34::CopyFrom(const ComplexObjectL34& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL34::IsInitialized() const {
  return true;
}

void ComplexObjectL34::InternalSwap(ComplexObjectL34* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL34, _impl_.var_bool2_)
      + sizeof(ComplexObjectL34::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL34, _impl_.complexobjectl35_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl35_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl35_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL34::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[4]);
}

// ===================================================================

class ComplexObjectL35::_Internal {
 public:
  static const ::proto::ComplexObjectL36& complexobjectl36(const ComplexObjectL35* msg);
};

const ::proto::ComplexObjectL36&
ComplexObjectL35::_Internal::complexobjectl36(const ComplexObjectL35* msg) {
  return *msg->_impl_.complexobjectl36_;
}
ComplexObjectL35::ComplexObjectL35(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL35)
}
ComplexObjectL35::ComplexObjectL35(const ComplexObjectL35& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL35* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl36_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl36()) {
    _this->_impl_.complexobjectl36_ = new ::proto::ComplexObjectL36(*from._impl_.complexobjectl36_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL35)
}

inline void ComplexObjectL35::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl36_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL35::~ComplexObjectL35() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL35)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL35::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl36_;
}

void ComplexObjectL35::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL35::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL35)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl36_ != nullptr) {
    delete _impl_.complexobjectl36_;
  }
  _impl_.complexobjectl36_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL35::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL35.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL35.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL36 complexObjectL36 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl36(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL35::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL35)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL35.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL35.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL36 complexObjectL36 = 13;
  if (this->_internal_has_complexobjectl36()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl36(this),
        _Internal::complexobjectl36(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL35)
  return target;
}

size_t ComplexObjectL35::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL35)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL36 complexObjectL36 = 13;
  if (this->_internal_has_complexobjectl36()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl36_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL35::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL35::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL35::GetClassData() const { return &_class_data_; }


void ComplexObjectL35::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL35*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL35&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL35)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl36()) {
    _this->_internal_mutable_complexobjectl36()->::proto::ComplexObjectL36::MergeFrom(
        from._internal_complexobjectl36());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL35::CopyFrom(const ComplexObjectL35& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL35::IsInitialized() const {
  return true;
}

void ComplexObjectL35::InternalSwap(ComplexObjectL35* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL35, _impl_.var_bool2_)
      + sizeof(ComplexObjectL35::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL35, _impl_.complexobjectl36_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl36_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl36_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL35::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[5]);
}

// ===================================================================

class ComplexObjectL36::_Internal {
 public:
  static const ::proto::ComplexObjectL37& complexobjectl37(const ComplexObjectL36* msg);
};

const ::proto::ComplexObjectL37&
ComplexObjectL36::_Internal::complexobjectl37(const ComplexObjectL36* msg) {
  return *msg->_impl_.complexobjectl37_;
}
ComplexObjectL36::ComplexObjectL36(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL36)
}
ComplexObjectL36::ComplexObjectL36(const ComplexObjectL36& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL36* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl37_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl37()) {
    _this->_impl_.complexobjectl37_ = new ::proto::ComplexObjectL37(*from._impl_.complexobjectl37_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL36)
}

inline void ComplexObjectL36::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.complexobjectl37_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL36::~ComplexObjectL36() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL36)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL36::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl37_;
}

void ComplexObjectL36::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL36::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL36)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl37_ != nullptr) {
    delete _impl_.complexobjectl37_;
  }
  _impl_.complexobjectl37_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL36::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL36.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL36.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL37 complexObjectL37 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl37(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL36::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL36)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL36.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL36.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  // .proto.ComplexObjectL37 complexObjectL37 = 13;
  if (this->_internal_has_complexobjectl37()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::complexobjectl37(this),
        _Internal::complexobjectl37(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL36)
  return target;
}

size_t ComplexObjectL36::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL36)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // .proto.ComplexObjectL37 complexObjectL37 = 13;
  if (this->_internal_has_complexobjectl37()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl37_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL36::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL36::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL36::GetClassData() const { return &_class_data_; }


void ComplexObjectL36::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL36*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL36&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL36)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_has_complexobjectl37()) {
    _this->_internal_mutable_complexobjectl37()->::proto::ComplexObjectL37::MergeFrom(
        from._internal_complexobjectl37());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL36::CopyFrom(const ComplexObjectL36& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL36::IsInitialized() const {
  return true;
}

void ComplexObjectL36::InternalSwap(ComplexObjectL36* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL36, _impl_.var_bool2_)
      + sizeof(ComplexObjectL36::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL36, _impl_.complexobjectl37_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl37_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl37_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL36::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[6]);
}

// ===================================================================

class ComplexObjectL37::_Internal {
 public:
};

ComplexObjectL37::ComplexObjectL37(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL37)
}
ComplexObjectL37::ComplexObjectL37(const ComplexObjectL37& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL37* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool2_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL37)
}

inline void ComplexObjectL37::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL37::~ComplexObjectL37() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL37)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL37::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
}

void ComplexObjectL37::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL37::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL37)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool2_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL37::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL37.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL37.var_string2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL37::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL37)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_int642(), target);
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_var_float1(), target);
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_var_float2(), target);
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_var_double1(), target);
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_var_double2(), target);
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_var_bool2(), target);
  }

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL37.var_string1");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_var_string1(), target);
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL37.var_string2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_var_string2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL37)
  return target;
}

size_t ComplexObjectL37::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL37)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 11;
  if (!this->_internal_var_string1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 12;
  if (!this->_internal_var_string2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int64 var_int641 = 3;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 4;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // float var_float1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 1 + 4;
  }

  // float var_float2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 1 + 4;
  }

  // double var_double1 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 1 + 8;
  }

  // double var_double2 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 1 + 8;
  }

  // bool var_bool1 = 9;
  if (this->_internal_var_bool1() != 0) {
    total_size += 1 + 1;
  }

  // bool var_bool2 = 10;
  if (this->_internal_var_bool2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL37::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL37::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL37::GetClassData() const { return &_class_data_; }


void ComplexObjectL37::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL37*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL37&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL37)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL37::CopyFrom(const ComplexObjectL37& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL37::IsInitialized() const {
  return true;
}

void ComplexObjectL37::InternalSwap(ComplexObjectL37* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL37, _impl_.var_bool2_)
      + sizeof(ComplexObjectL37::_impl_.var_bool2_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL37, _impl_.var_int321_)>(
          reinterpret_cast<char*>(&_impl_.var_int321_),
          reinterpret_cast<char*>(&other->_impl_.var_int321_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL37::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL3_2eproto_getter, &descriptor_table_ComplexObjectL3_2eproto_once,
      file_level_metadata_ComplexObjectL3_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL3*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL3 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL31*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL31 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL31 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL32*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL32 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL33*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL33 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL33 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL34*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL34 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL34 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL35*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL35 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL35 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL36*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL36 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL36 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL37*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL37 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL37 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
