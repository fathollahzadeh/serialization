// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComplexObjectL1.proto

#include "ComplexObjectL1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ComplexObjectL1::ComplexObjectL1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string6_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string7_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string8_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.complexobjectl11_)*/nullptr
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int325_)*/0
  , /*decltype(_impl_.var_int326_)*/0
  , /*decltype(_impl_.var_int327_)*/0
  , /*decltype(_impl_.var_int328_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_int645_)*/int64_t{0}
  , /*decltype(_impl_.var_int646_)*/int64_t{0}
  , /*decltype(_impl_.var_int647_)*/int64_t{0}
  , /*decltype(_impl_.var_int648_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_float5_)*/0
  , /*decltype(_impl_.var_float6_)*/0
  , /*decltype(_impl_.var_float7_)*/0
  , /*decltype(_impl_.var_float8_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_double5_)*/0
  , /*decltype(_impl_.var_double6_)*/0
  , /*decltype(_impl_.var_double7_)*/0
  , /*decltype(_impl_.var_double8_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_.var_bool5_)*/false
  , /*decltype(_impl_.var_bool6_)*/false
  , /*decltype(_impl_.var_bool7_)*/false
  , /*decltype(_impl_.var_bool8_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL1DefaultTypeInternal() {}
  union {
    ComplexObjectL1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL1DefaultTypeInternal _ComplexObjectL1_default_instance_;
PROTOBUF_CONSTEXPR ComplexObjectL11::ComplexObjectL11(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_string1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string6_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string7_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_string8_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_int321_)*/0
  , /*decltype(_impl_.var_int322_)*/0
  , /*decltype(_impl_.var_int323_)*/0
  , /*decltype(_impl_.var_int324_)*/0
  , /*decltype(_impl_.var_int325_)*/0
  , /*decltype(_impl_.var_int326_)*/0
  , /*decltype(_impl_.var_int327_)*/0
  , /*decltype(_impl_.var_int328_)*/0
  , /*decltype(_impl_.var_int641_)*/int64_t{0}
  , /*decltype(_impl_.var_int642_)*/int64_t{0}
  , /*decltype(_impl_.var_int643_)*/int64_t{0}
  , /*decltype(_impl_.var_int644_)*/int64_t{0}
  , /*decltype(_impl_.var_int645_)*/int64_t{0}
  , /*decltype(_impl_.var_int646_)*/int64_t{0}
  , /*decltype(_impl_.var_int647_)*/int64_t{0}
  , /*decltype(_impl_.var_int648_)*/int64_t{0}
  , /*decltype(_impl_.var_float1_)*/0
  , /*decltype(_impl_.var_float2_)*/0
  , /*decltype(_impl_.var_float3_)*/0
  , /*decltype(_impl_.var_float4_)*/0
  , /*decltype(_impl_.var_float5_)*/0
  , /*decltype(_impl_.var_float6_)*/0
  , /*decltype(_impl_.var_float7_)*/0
  , /*decltype(_impl_.var_float8_)*/0
  , /*decltype(_impl_.var_double1_)*/0
  , /*decltype(_impl_.var_double2_)*/0
  , /*decltype(_impl_.var_double3_)*/0
  , /*decltype(_impl_.var_double4_)*/0
  , /*decltype(_impl_.var_double5_)*/0
  , /*decltype(_impl_.var_double6_)*/0
  , /*decltype(_impl_.var_double7_)*/0
  , /*decltype(_impl_.var_double8_)*/0
  , /*decltype(_impl_.var_bool1_)*/false
  , /*decltype(_impl_.var_bool2_)*/false
  , /*decltype(_impl_.var_bool3_)*/false
  , /*decltype(_impl_.var_bool4_)*/false
  , /*decltype(_impl_.var_bool5_)*/false
  , /*decltype(_impl_.var_bool6_)*/false
  , /*decltype(_impl_.var_bool7_)*/false
  , /*decltype(_impl_.var_bool8_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexObjectL11DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexObjectL11DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexObjectL11DefaultTypeInternal() {}
  union {
    ComplexObjectL11 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexObjectL11DefaultTypeInternal _ComplexObjectL11_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_ComplexObjectL1_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ComplexObjectL1_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ComplexObjectL1_2eproto = nullptr;

const uint32_t TableStruct_ComplexObjectL1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int325_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int326_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int327_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int328_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int645_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int646_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int647_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_int648_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_float8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_double8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_bool8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.var_string8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL1, _impl_.complexobjectl11_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int321_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int322_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int323_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int324_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int325_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int326_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int327_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int328_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int641_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int642_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int643_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int644_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int645_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int646_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int647_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_int648_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_float8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_double8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_bool8_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string1_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string2_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string3_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string4_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string5_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string6_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string7_),
  PROTOBUF_FIELD_OFFSET(::proto::ComplexObjectL11, _impl_.var_string8_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ComplexObjectL1)},
  { 55, -1, -1, sizeof(::proto::ComplexObjectL11)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_ComplexObjectL1_default_instance_._instance,
  &::proto::_ComplexObjectL11_default_instance_._instance,
};

const char descriptor_table_protodef_ComplexObjectL1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ComplexObjectL1.proto\022\005proto\"\214\010\n\017Compl"
  "exObjectL1\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_in"
  "t322\030\002 \001(\005\022\022\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_in"
  "t324\030\004 \001(\005\022\022\n\nvar_int325\030\005 \001(\005\022\022\n\nvar_in"
  "t326\030\006 \001(\005\022\022\n\nvar_int327\030\007 \001(\005\022\022\n\nvar_in"
  "t328\030\010 \001(\005\022\022\n\nvar_int641\030\t \001(\003\022\022\n\nvar_in"
  "t642\030\n \001(\003\022\022\n\nvar_int643\030\013 \001(\003\022\022\n\nvar_in"
  "t644\030\014 \001(\003\022\022\n\nvar_int645\030\r \001(\003\022\022\n\nvar_in"
  "t646\030\016 \001(\003\022\022\n\nvar_int647\030\017 \001(\003\022\022\n\nvar_in"
  "t648\030\020 \001(\003\022\022\n\nvar_float1\030\021 \001(\002\022\022\n\nvar_fl"
  "oat2\030\022 \001(\002\022\022\n\nvar_float3\030\023 \001(\002\022\022\n\nvar_fl"
  "oat4\030\024 \001(\002\022\022\n\nvar_float5\030\025 \001(\002\022\022\n\nvar_fl"
  "oat6\030\026 \001(\002\022\022\n\nvar_float7\030\027 \001(\002\022\022\n\nvar_fl"
  "oat8\030\030 \001(\002\022\023\n\013var_double1\030\031 \001(\001\022\023\n\013var_d"
  "ouble2\030\032 \001(\001\022\023\n\013var_double3\030\033 \001(\001\022\023\n\013var"
  "_double4\030\034 \001(\001\022\023\n\013var_double5\030\035 \001(\001\022\023\n\013v"
  "ar_double6\030\036 \001(\001\022\023\n\013var_double7\030\037 \001(\001\022\023\n"
  "\013var_double8\030  \001(\001\022\021\n\tvar_bool1\030! \001(\010\022\021\n"
  "\tvar_bool2\030\" \001(\010\022\021\n\tvar_bool3\030# \001(\010\022\021\n\tv"
  "ar_bool4\030$ \001(\010\022\021\n\tvar_bool5\030% \001(\010\022\021\n\tvar"
  "_bool6\030& \001(\010\022\021\n\tvar_bool7\030\' \001(\010\022\021\n\tvar_b"
  "ool8\030( \001(\010\022\023\n\013var_string1\030) \001(\t\022\023\n\013var_s"
  "tring2\030* \001(\t\022\023\n\013var_string3\030+ \001(\t\022\023\n\013var"
  "_string4\030, \001(\t\022\023\n\013var_string5\030- \001(\t\022\023\n\013v"
  "ar_string6\030. \001(\t\022\023\n\013var_string7\030/ \001(\t\022\023\n"
  "\013var_string8\0300 \001(\t\0221\n\020complexObjectL11\0301"
  " \001(\0132\027.proto.ComplexObjectL11\"\332\007\n\020Comple"
  "xObjectL11\022\022\n\nvar_int321\030\001 \001(\005\022\022\n\nvar_in"
  "t322\030\002 \001(\005\022\022\n\nvar_int323\030\003 \001(\005\022\022\n\nvar_in"
  "t324\030\004 \001(\005\022\022\n\nvar_int325\030\005 \001(\005\022\022\n\nvar_in"
  "t326\030\006 \001(\005\022\022\n\nvar_int327\030\007 \001(\005\022\022\n\nvar_in"
  "t328\030\010 \001(\005\022\022\n\nvar_int641\030\t \001(\003\022\022\n\nvar_in"
  "t642\030\n \001(\003\022\022\n\nvar_int643\030\013 \001(\003\022\022\n\nvar_in"
  "t644\030\014 \001(\003\022\022\n\nvar_int645\030\r \001(\003\022\022\n\nvar_in"
  "t646\030\016 \001(\003\022\022\n\nvar_int647\030\017 \001(\003\022\022\n\nvar_in"
  "t648\030\020 \001(\003\022\022\n\nvar_float1\030\021 \001(\002\022\022\n\nvar_fl"
  "oat2\030\022 \001(\002\022\022\n\nvar_float3\030\023 \001(\002\022\022\n\nvar_fl"
  "oat4\030\024 \001(\002\022\022\n\nvar_float5\030\025 \001(\002\022\022\n\nvar_fl"
  "oat6\030\026 \001(\002\022\022\n\nvar_float7\030\027 \001(\002\022\022\n\nvar_fl"
  "oat8\030\030 \001(\002\022\023\n\013var_double1\030\031 \001(\001\022\023\n\013var_d"
  "ouble2\030\032 \001(\001\022\023\n\013var_double3\030\033 \001(\001\022\023\n\013var"
  "_double4\030\034 \001(\001\022\023\n\013var_double5\030\035 \001(\001\022\023\n\013v"
  "ar_double6\030\036 \001(\001\022\023\n\013var_double7\030\037 \001(\001\022\023\n"
  "\013var_double8\030  \001(\001\022\021\n\tvar_bool1\030! \001(\010\022\021\n"
  "\tvar_bool2\030\" \001(\010\022\021\n\tvar_bool3\030# \001(\010\022\021\n\tv"
  "ar_bool4\030$ \001(\010\022\021\n\tvar_bool5\030% \001(\010\022\021\n\tvar"
  "_bool6\030& \001(\010\022\021\n\tvar_bool7\030\' \001(\010\022\021\n\tvar_b"
  "ool8\030( \001(\010\022\023\n\013var_string1\030) \001(\t\022\023\n\013var_s"
  "tring2\030* \001(\t\022\023\n\013var_string3\030+ \001(\t\022\023\n\013var"
  "_string4\030, \001(\t\022\023\n\013var_string5\030- \001(\t\022\023\n\013v"
  "ar_string6\030. \001(\t\022\023\n\013var_string7\030/ \001(\t\022\023\n"
  "\013var_string8\0300 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ComplexObjectL1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ComplexObjectL1_2eproto = {
    false, false, 2066, descriptor_table_protodef_ComplexObjectL1_2eproto,
    "ComplexObjectL1.proto",
    &descriptor_table_ComplexObjectL1_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ComplexObjectL1_2eproto::offsets,
    file_level_metadata_ComplexObjectL1_2eproto, file_level_enum_descriptors_ComplexObjectL1_2eproto,
    file_level_service_descriptors_ComplexObjectL1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ComplexObjectL1_2eproto_getter() {
  return &descriptor_table_ComplexObjectL1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ComplexObjectL1_2eproto(&descriptor_table_ComplexObjectL1_2eproto);
namespace proto {

// ===================================================================

class ComplexObjectL1::_Internal {
 public:
  static const ::proto::ComplexObjectL11& complexobjectl11(const ComplexObjectL1* msg);
};

const ::proto::ComplexObjectL11&
ComplexObjectL1::_Internal::complexobjectl11(const ComplexObjectL1* msg) {
  return *msg->_impl_.complexobjectl11_;
}
ComplexObjectL1::ComplexObjectL1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL1)
}
ComplexObjectL1::ComplexObjectL1(const ComplexObjectL1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_string5_){}
    , decltype(_impl_.var_string6_){}
    , decltype(_impl_.var_string7_){}
    , decltype(_impl_.var_string8_){}
    , decltype(_impl_.complexobjectl11_){nullptr}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int325_){}
    , decltype(_impl_.var_int326_){}
    , decltype(_impl_.var_int327_){}
    , decltype(_impl_.var_int328_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_int645_){}
    , decltype(_impl_.var_int646_){}
    , decltype(_impl_.var_int647_){}
    , decltype(_impl_.var_int648_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_float5_){}
    , decltype(_impl_.var_float6_){}
    , decltype(_impl_.var_float7_){}
    , decltype(_impl_.var_float8_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_double5_){}
    , decltype(_impl_.var_double6_){}
    , decltype(_impl_.var_double7_){}
    , decltype(_impl_.var_double8_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , decltype(_impl_.var_bool5_){}
    , decltype(_impl_.var_bool6_){}
    , decltype(_impl_.var_bool7_){}
    , decltype(_impl_.var_bool8_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string5().empty()) {
    _this->_impl_.var_string5_.Set(from._internal_var_string5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string6().empty()) {
    _this->_impl_.var_string6_.Set(from._internal_var_string6(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string7().empty()) {
    _this->_impl_.var_string7_.Set(from._internal_var_string7(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string8().empty()) {
    _this->_impl_.var_string8_.Set(from._internal_var_string8(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_complexobjectl11()) {
    _this->_impl_.complexobjectl11_ = new ::proto::ComplexObjectL11(*from._impl_.complexobjectl11_);
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool8_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool8_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL1)
}

inline void ComplexObjectL1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_string5_){}
    , decltype(_impl_.var_string6_){}
    , decltype(_impl_.var_string7_){}
    , decltype(_impl_.var_string8_){}
    , decltype(_impl_.complexobjectl11_){nullptr}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int325_){0}
    , decltype(_impl_.var_int326_){0}
    , decltype(_impl_.var_int327_){0}
    , decltype(_impl_.var_int328_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_int645_){int64_t{0}}
    , decltype(_impl_.var_int646_){int64_t{0}}
    , decltype(_impl_.var_int647_){int64_t{0}}
    , decltype(_impl_.var_int648_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_float5_){0}
    , decltype(_impl_.var_float6_){0}
    , decltype(_impl_.var_float7_){0}
    , decltype(_impl_.var_float8_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_double5_){0}
    , decltype(_impl_.var_double6_){0}
    , decltype(_impl_.var_double7_){0}
    , decltype(_impl_.var_double8_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , decltype(_impl_.var_bool5_){false}
    , decltype(_impl_.var_bool6_){false}
    , decltype(_impl_.var_bool7_){false}
    , decltype(_impl_.var_bool8_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL1::~ComplexObjectL1() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
  _impl_.var_string5_.Destroy();
  _impl_.var_string6_.Destroy();
  _impl_.var_string7_.Destroy();
  _impl_.var_string8_.Destroy();
  if (this != internal_default_instance()) delete _impl_.complexobjectl11_;
}

void ComplexObjectL1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL1::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  _impl_.var_string5_.ClearToEmpty();
  _impl_.var_string6_.ClearToEmpty();
  _impl_.var_string7_.ClearToEmpty();
  _impl_.var_string8_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.complexobjectl11_ != nullptr) {
    delete _impl_.complexobjectl11_;
  }
  _impl_.complexobjectl11_ = nullptr;
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool8_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int325 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int325_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int326 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int326_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int327 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int327_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int328 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int328_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int645 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.var_int645_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int646 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.var_int646_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int647 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.var_int647_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int648 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.var_int648_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float5 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.var_float5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float6 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.var_float6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float7 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.var_float7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float8 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.var_float8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double5 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.var_double5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double6 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.var_double6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double7 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.var_double7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double8 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.var_double8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool5 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_bool5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool6 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_bool6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool7 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_bool7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool8 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_bool8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string4"));
        } else
          goto handle_unusual;
        continue;
      // string var_string5 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_var_string5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string5"));
        } else
          goto handle_unusual;
        continue;
      // string var_string6 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_var_string6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string6"));
        } else
          goto handle_unusual;
        continue;
      // string var_string7 = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_var_string7();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string7"));
        } else
          goto handle_unusual;
        continue;
      // string var_string8 = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_var_string8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL1.var_string8"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ComplexObjectL11 complexObjectL11 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_complexobjectl11(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int32 var_int325 = 5;
  if (this->_internal_var_int325() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_int325(), target);
  }

  // int32 var_int326 = 6;
  if (this->_internal_var_int326() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_int326(), target);
  }

  // int32 var_int327 = 7;
  if (this->_internal_var_int327() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_var_int327(), target);
  }

  // int32 var_int328 = 8;
  if (this->_internal_var_int328() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_var_int328(), target);
  }

  // int64 var_int641 = 9;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 10;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 11;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 12;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_var_int644(), target);
  }

  // int64 var_int645 = 13;
  if (this->_internal_var_int645() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_var_int645(), target);
  }

  // int64 var_int646 = 14;
  if (this->_internal_var_int646() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_var_int646(), target);
  }

  // int64 var_int647 = 15;
  if (this->_internal_var_int647() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_var_int647(), target);
  }

  // int64 var_int648 = 16;
  if (this->_internal_var_int648() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_var_int648(), target);
  }

  // float var_float1 = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_var_float1(), target);
  }

  // float var_float2 = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_var_float2(), target);
  }

  // float var_float3 = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_var_float3(), target);
  }

  // float var_float4 = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_var_float4(), target);
  }

  // float var_float5 = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = this->_internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_var_float5(), target);
  }

  // float var_float6 = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = this->_internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_var_float6(), target);
  }

  // float var_float7 = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = this->_internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_var_float7(), target);
  }

  // float var_float8 = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = this->_internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_var_float8(), target);
  }

  // double var_double1 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_var_double1(), target);
  }

  // double var_double2 = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_var_double2(), target);
  }

  // double var_double3 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_var_double3(), target);
  }

  // double var_double4 = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_var_double4(), target);
  }

  // double var_double5 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = this->_internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_var_double5(), target);
  }

  // double var_double6 = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = this->_internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_var_double6(), target);
  }

  // double var_double7 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = this->_internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_var_double7(), target);
  }

  // double var_double8 = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = this->_internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_var_double8(), target);
  }

  // bool var_bool1 = 33;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 34;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 35;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 36;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_var_bool4(), target);
  }

  // bool var_bool5 = 37;
  if (this->_internal_var_bool5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_var_bool5(), target);
  }

  // bool var_bool6 = 38;
  if (this->_internal_var_bool6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_var_bool6(), target);
  }

  // bool var_bool7 = 39;
  if (this->_internal_var_bool7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_var_bool7(), target);
  }

  // bool var_bool8 = 40;
  if (this->_internal_var_bool8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_var_bool8(), target);
  }

  // string var_string1 = 41;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string1");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_var_string1(), target);
  }

  // string var_string2 = 42;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string2");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_var_string2(), target);
  }

  // string var_string3 = 43;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string3");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_var_string3(), target);
  }

  // string var_string4 = 44;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string4");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_var_string4(), target);
  }

  // string var_string5 = 45;
  if (!this->_internal_var_string5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string5().data(), static_cast<int>(this->_internal_var_string5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string5");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_var_string5(), target);
  }

  // string var_string6 = 46;
  if (!this->_internal_var_string6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string6().data(), static_cast<int>(this->_internal_var_string6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string6");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_var_string6(), target);
  }

  // string var_string7 = 47;
  if (!this->_internal_var_string7().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string7().data(), static_cast<int>(this->_internal_var_string7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string7");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_var_string7(), target);
  }

  // string var_string8 = 48;
  if (!this->_internal_var_string8().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string8().data(), static_cast<int>(this->_internal_var_string8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL1.var_string8");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_var_string8(), target);
  }

  // .proto.ComplexObjectL11 complexObjectL11 = 49;
  if (this->_internal_has_complexobjectl11()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::complexobjectl11(this),
        _Internal::complexobjectl11(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL1)
  return target;
}

size_t ComplexObjectL1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 41;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 42;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 43;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 44;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // string var_string5 = 45;
  if (!this->_internal_var_string5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string5());
  }

  // string var_string6 = 46;
  if (!this->_internal_var_string6().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string6());
  }

  // string var_string7 = 47;
  if (!this->_internal_var_string7().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string7());
  }

  // string var_string8 = 48;
  if (!this->_internal_var_string8().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string8());
  }

  // .proto.ComplexObjectL11 complexObjectL11 = 49;
  if (this->_internal_has_complexobjectl11()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.complexobjectl11_);
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int32 var_int325 = 5;
  if (this->_internal_var_int325() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int325());
  }

  // int32 var_int326 = 6;
  if (this->_internal_var_int326() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int326());
  }

  // int32 var_int327 = 7;
  if (this->_internal_var_int327() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int327());
  }

  // int32 var_int328 = 8;
  if (this->_internal_var_int328() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int328());
  }

  // int64 var_int641 = 9;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 10;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // int64 var_int643 = 11;
  if (this->_internal_var_int643() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int643());
  }

  // int64 var_int644 = 12;
  if (this->_internal_var_int644() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int644());
  }

  // int64 var_int645 = 13;
  if (this->_internal_var_int645() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int645());
  }

  // int64 var_int646 = 14;
  if (this->_internal_var_int646() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int646());
  }

  // int64 var_int647 = 15;
  if (this->_internal_var_int647() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int647());
  }

  // int64 var_int648 = 16;
  if (this->_internal_var_int648() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int648());
  }

  // float var_float1 = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 2 + 4;
  }

  // float var_float2 = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 2 + 4;
  }

  // float var_float3 = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 2 + 4;
  }

  // float var_float4 = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 2 + 4;
  }

  // float var_float5 = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = this->_internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    total_size += 2 + 4;
  }

  // float var_float6 = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = this->_internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    total_size += 2 + 4;
  }

  // float var_float7 = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = this->_internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    total_size += 2 + 4;
  }

  // float var_float8 = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = this->_internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    total_size += 2 + 4;
  }

  // double var_double1 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 2 + 8;
  }

  // double var_double2 = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 2 + 8;
  }

  // double var_double3 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 2 + 8;
  }

  // double var_double4 = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // double var_double5 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = this->_internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    total_size += 2 + 8;
  }

  // double var_double6 = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = this->_internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    total_size += 2 + 8;
  }

  // double var_double7 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = this->_internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    total_size += 2 + 8;
  }

  // double var_double8 = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = this->_internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 33;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 34;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 35;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 36;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool5 = 37;
  if (this->_internal_var_bool5() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool6 = 38;
  if (this->_internal_var_bool6() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool7 = 39;
  if (this->_internal_var_bool7() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool8 = 40;
  if (this->_internal_var_bool8() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL1::GetClassData() const { return &_class_data_; }


void ComplexObjectL1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL1*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (!from._internal_var_string5().empty()) {
    _this->_internal_set_var_string5(from._internal_var_string5());
  }
  if (!from._internal_var_string6().empty()) {
    _this->_internal_set_var_string6(from._internal_var_string6());
  }
  if (!from._internal_var_string7().empty()) {
    _this->_internal_set_var_string7(from._internal_var_string7());
  }
  if (!from._internal_var_string8().empty()) {
    _this->_internal_set_var_string8(from._internal_var_string8());
  }
  if (from._internal_has_complexobjectl11()) {
    _this->_internal_mutable_complexobjectl11()->::proto::ComplexObjectL11::MergeFrom(
        from._internal_complexobjectl11());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int325() != 0) {
    _this->_internal_set_var_int325(from._internal_var_int325());
  }
  if (from._internal_var_int326() != 0) {
    _this->_internal_set_var_int326(from._internal_var_int326());
  }
  if (from._internal_var_int327() != 0) {
    _this->_internal_set_var_int327(from._internal_var_int327());
  }
  if (from._internal_var_int328() != 0) {
    _this->_internal_set_var_int328(from._internal_var_int328());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  if (from._internal_var_int645() != 0) {
    _this->_internal_set_var_int645(from._internal_var_int645());
  }
  if (from._internal_var_int646() != 0) {
    _this->_internal_set_var_int646(from._internal_var_int646());
  }
  if (from._internal_var_int647() != 0) {
    _this->_internal_set_var_int647(from._internal_var_int647());
  }
  if (from._internal_var_int648() != 0) {
    _this->_internal_set_var_int648(from._internal_var_int648());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = from._internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    _this->_internal_set_var_float5(from._internal_var_float5());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = from._internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    _this->_internal_set_var_float6(from._internal_var_float6());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = from._internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    _this->_internal_set_var_float7(from._internal_var_float7());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = from._internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    _this->_internal_set_var_float8(from._internal_var_float8());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = from._internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    _this->_internal_set_var_double5(from._internal_var_double5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = from._internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    _this->_internal_set_var_double6(from._internal_var_double6());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = from._internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    _this->_internal_set_var_double7(from._internal_var_double7());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = from._internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    _this->_internal_set_var_double8(from._internal_var_double8());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  if (from._internal_var_bool5() != 0) {
    _this->_internal_set_var_bool5(from._internal_var_bool5());
  }
  if (from._internal_var_bool6() != 0) {
    _this->_internal_set_var_bool6(from._internal_var_bool6());
  }
  if (from._internal_var_bool7() != 0) {
    _this->_internal_set_var_bool7(from._internal_var_bool7());
  }
  if (from._internal_var_bool8() != 0) {
    _this->_internal_set_var_bool8(from._internal_var_bool8());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL1::CopyFrom(const ComplexObjectL1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL1::IsInitialized() const {
  return true;
}

void ComplexObjectL1::InternalSwap(ComplexObjectL1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string5_, lhs_arena,
      &other->_impl_.var_string5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string6_, lhs_arena,
      &other->_impl_.var_string6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string7_, lhs_arena,
      &other->_impl_.var_string7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string8_, lhs_arena,
      &other->_impl_.var_string8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL1, _impl_.var_bool8_)
      + sizeof(ComplexObjectL1::_impl_.var_bool8_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL1, _impl_.complexobjectl11_)>(
          reinterpret_cast<char*>(&_impl_.complexobjectl11_),
          reinterpret_cast<char*>(&other->_impl_.complexobjectl11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL1_2eproto_getter, &descriptor_table_ComplexObjectL1_2eproto_once,
      file_level_metadata_ComplexObjectL1_2eproto[0]);
}

// ===================================================================

class ComplexObjectL11::_Internal {
 public:
};

ComplexObjectL11::ComplexObjectL11(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ComplexObjectL11)
}
ComplexObjectL11::ComplexObjectL11(const ComplexObjectL11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexObjectL11* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_string5_){}
    , decltype(_impl_.var_string6_){}
    , decltype(_impl_.var_string7_){}
    , decltype(_impl_.var_string8_){}
    , decltype(_impl_.var_int321_){}
    , decltype(_impl_.var_int322_){}
    , decltype(_impl_.var_int323_){}
    , decltype(_impl_.var_int324_){}
    , decltype(_impl_.var_int325_){}
    , decltype(_impl_.var_int326_){}
    , decltype(_impl_.var_int327_){}
    , decltype(_impl_.var_int328_){}
    , decltype(_impl_.var_int641_){}
    , decltype(_impl_.var_int642_){}
    , decltype(_impl_.var_int643_){}
    , decltype(_impl_.var_int644_){}
    , decltype(_impl_.var_int645_){}
    , decltype(_impl_.var_int646_){}
    , decltype(_impl_.var_int647_){}
    , decltype(_impl_.var_int648_){}
    , decltype(_impl_.var_float1_){}
    , decltype(_impl_.var_float2_){}
    , decltype(_impl_.var_float3_){}
    , decltype(_impl_.var_float4_){}
    , decltype(_impl_.var_float5_){}
    , decltype(_impl_.var_float6_){}
    , decltype(_impl_.var_float7_){}
    , decltype(_impl_.var_float8_){}
    , decltype(_impl_.var_double1_){}
    , decltype(_impl_.var_double2_){}
    , decltype(_impl_.var_double3_){}
    , decltype(_impl_.var_double4_){}
    , decltype(_impl_.var_double5_){}
    , decltype(_impl_.var_double6_){}
    , decltype(_impl_.var_double7_){}
    , decltype(_impl_.var_double8_){}
    , decltype(_impl_.var_bool1_){}
    , decltype(_impl_.var_bool2_){}
    , decltype(_impl_.var_bool3_){}
    , decltype(_impl_.var_bool4_){}
    , decltype(_impl_.var_bool5_){}
    , decltype(_impl_.var_bool6_){}
    , decltype(_impl_.var_bool7_){}
    , decltype(_impl_.var_bool8_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string1().empty()) {
    _this->_impl_.var_string1_.Set(from._internal_var_string1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string2().empty()) {
    _this->_impl_.var_string2_.Set(from._internal_var_string2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string3().empty()) {
    _this->_impl_.var_string3_.Set(from._internal_var_string3(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string4().empty()) {
    _this->_impl_.var_string4_.Set(from._internal_var_string4(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string5().empty()) {
    _this->_impl_.var_string5_.Set(from._internal_var_string5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string6().empty()) {
    _this->_impl_.var_string6_.Set(from._internal_var_string6(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string7().empty()) {
    _this->_impl_.var_string7_.Set(from._internal_var_string7(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_string8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_string8().empty()) {
    _this->_impl_.var_string8_.Set(from._internal_var_string8(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.var_int321_, &from._impl_.var_int321_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_bool8_) -
    reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool8_));
  // @@protoc_insertion_point(copy_constructor:proto.ComplexObjectL11)
}

inline void ComplexObjectL11::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_string1_){}
    , decltype(_impl_.var_string2_){}
    , decltype(_impl_.var_string3_){}
    , decltype(_impl_.var_string4_){}
    , decltype(_impl_.var_string5_){}
    , decltype(_impl_.var_string6_){}
    , decltype(_impl_.var_string7_){}
    , decltype(_impl_.var_string8_){}
    , decltype(_impl_.var_int321_){0}
    , decltype(_impl_.var_int322_){0}
    , decltype(_impl_.var_int323_){0}
    , decltype(_impl_.var_int324_){0}
    , decltype(_impl_.var_int325_){0}
    , decltype(_impl_.var_int326_){0}
    , decltype(_impl_.var_int327_){0}
    , decltype(_impl_.var_int328_){0}
    , decltype(_impl_.var_int641_){int64_t{0}}
    , decltype(_impl_.var_int642_){int64_t{0}}
    , decltype(_impl_.var_int643_){int64_t{0}}
    , decltype(_impl_.var_int644_){int64_t{0}}
    , decltype(_impl_.var_int645_){int64_t{0}}
    , decltype(_impl_.var_int646_){int64_t{0}}
    , decltype(_impl_.var_int647_){int64_t{0}}
    , decltype(_impl_.var_int648_){int64_t{0}}
    , decltype(_impl_.var_float1_){0}
    , decltype(_impl_.var_float2_){0}
    , decltype(_impl_.var_float3_){0}
    , decltype(_impl_.var_float4_){0}
    , decltype(_impl_.var_float5_){0}
    , decltype(_impl_.var_float6_){0}
    , decltype(_impl_.var_float7_){0}
    , decltype(_impl_.var_float8_){0}
    , decltype(_impl_.var_double1_){0}
    , decltype(_impl_.var_double2_){0}
    , decltype(_impl_.var_double3_){0}
    , decltype(_impl_.var_double4_){0}
    , decltype(_impl_.var_double5_){0}
    , decltype(_impl_.var_double6_){0}
    , decltype(_impl_.var_double7_){0}
    , decltype(_impl_.var_double8_){0}
    , decltype(_impl_.var_bool1_){false}
    , decltype(_impl_.var_bool2_){false}
    , decltype(_impl_.var_bool3_){false}
    , decltype(_impl_.var_bool4_){false}
    , decltype(_impl_.var_bool5_){false}
    , decltype(_impl_.var_bool6_){false}
    , decltype(_impl_.var_bool7_){false}
    , decltype(_impl_.var_bool8_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_string1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_string8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_string8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexObjectL11::~ComplexObjectL11() {
  // @@protoc_insertion_point(destructor:proto.ComplexObjectL11)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexObjectL11::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_string1_.Destroy();
  _impl_.var_string2_.Destroy();
  _impl_.var_string3_.Destroy();
  _impl_.var_string4_.Destroy();
  _impl_.var_string5_.Destroy();
  _impl_.var_string6_.Destroy();
  _impl_.var_string7_.Destroy();
  _impl_.var_string8_.Destroy();
}

void ComplexObjectL11::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexObjectL11::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ComplexObjectL11)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_string1_.ClearToEmpty();
  _impl_.var_string2_.ClearToEmpty();
  _impl_.var_string3_.ClearToEmpty();
  _impl_.var_string4_.ClearToEmpty();
  _impl_.var_string5_.ClearToEmpty();
  _impl_.var_string6_.ClearToEmpty();
  _impl_.var_string7_.ClearToEmpty();
  _impl_.var_string8_.ClearToEmpty();
  ::memset(&_impl_.var_int321_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_bool8_) -
      reinterpret_cast<char*>(&_impl_.var_int321_)) + sizeof(_impl_.var_bool8_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexObjectL11::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 var_int321 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_int321_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int322 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_int322_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int323 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_int323_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int324 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_int324_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int325 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_int325_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int326 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_int326_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int327 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_int327_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 var_int328 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_int328_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int641 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.var_int641_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int642 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.var_int642_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int643 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.var_int643_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int644 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.var_int644_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int645 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.var_int645_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int646 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.var_int646_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int647 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.var_int647_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 var_int648 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.var_int648_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float var_float1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.var_float1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.var_float2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float3 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.var_float3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.var_float4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float5 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.var_float5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float6 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.var_float6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float7 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.var_float7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float var_float8 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.var_float8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double var_double1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.var_double1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double2 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.var_double2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double3 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.var_double3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double4 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.var_double4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double5 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.var_double5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double6 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.var_double6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double7 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.var_double7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double var_double8 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.var_double8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool1 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.var_bool1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.var_bool2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool3 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.var_bool3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool4 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.var_bool4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool5 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.var_bool5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool6 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.var_bool6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool7 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.var_bool7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool var_bool8 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.var_bool8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_string1 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_var_string1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string1"));
        } else
          goto handle_unusual;
        continue;
      // string var_string2 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_var_string2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string2"));
        } else
          goto handle_unusual;
        continue;
      // string var_string3 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_var_string3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string3"));
        } else
          goto handle_unusual;
        continue;
      // string var_string4 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_var_string4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string4"));
        } else
          goto handle_unusual;
        continue;
      // string var_string5 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_var_string5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string5"));
        } else
          goto handle_unusual;
        continue;
      // string var_string6 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_var_string6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string6"));
        } else
          goto handle_unusual;
        continue;
      // string var_string7 = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_var_string7();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string7"));
        } else
          goto handle_unusual;
        continue;
      // string var_string8 = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_var_string8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ComplexObjectL11.var_string8"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexObjectL11::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ComplexObjectL11)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_var_int321(), target);
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_int322(), target);
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_int323(), target);
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_int324(), target);
  }

  // int32 var_int325 = 5;
  if (this->_internal_var_int325() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_int325(), target);
  }

  // int32 var_int326 = 6;
  if (this->_internal_var_int326() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_int326(), target);
  }

  // int32 var_int327 = 7;
  if (this->_internal_var_int327() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_var_int327(), target);
  }

  // int32 var_int328 = 8;
  if (this->_internal_var_int328() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_var_int328(), target);
  }

  // int64 var_int641 = 9;
  if (this->_internal_var_int641() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_var_int641(), target);
  }

  // int64 var_int642 = 10;
  if (this->_internal_var_int642() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_var_int642(), target);
  }

  // int64 var_int643 = 11;
  if (this->_internal_var_int643() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_var_int643(), target);
  }

  // int64 var_int644 = 12;
  if (this->_internal_var_int644() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_var_int644(), target);
  }

  // int64 var_int645 = 13;
  if (this->_internal_var_int645() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_var_int645(), target);
  }

  // int64 var_int646 = 14;
  if (this->_internal_var_int646() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_var_int646(), target);
  }

  // int64 var_int647 = 15;
  if (this->_internal_var_int647() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_var_int647(), target);
  }

  // int64 var_int648 = 16;
  if (this->_internal_var_int648() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_var_int648(), target);
  }

  // float var_float1 = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_var_float1(), target);
  }

  // float var_float2 = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_var_float2(), target);
  }

  // float var_float3 = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_var_float3(), target);
  }

  // float var_float4 = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_var_float4(), target);
  }

  // float var_float5 = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = this->_internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_var_float5(), target);
  }

  // float var_float6 = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = this->_internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_var_float6(), target);
  }

  // float var_float7 = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = this->_internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_var_float7(), target);
  }

  // float var_float8 = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = this->_internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_var_float8(), target);
  }

  // double var_double1 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_var_double1(), target);
  }

  // double var_double2 = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_var_double2(), target);
  }

  // double var_double3 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_var_double3(), target);
  }

  // double var_double4 = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_var_double4(), target);
  }

  // double var_double5 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = this->_internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_var_double5(), target);
  }

  // double var_double6 = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = this->_internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_var_double6(), target);
  }

  // double var_double7 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = this->_internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_var_double7(), target);
  }

  // double var_double8 = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = this->_internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_var_double8(), target);
  }

  // bool var_bool1 = 33;
  if (this->_internal_var_bool1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_var_bool1(), target);
  }

  // bool var_bool2 = 34;
  if (this->_internal_var_bool2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_var_bool2(), target);
  }

  // bool var_bool3 = 35;
  if (this->_internal_var_bool3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_var_bool3(), target);
  }

  // bool var_bool4 = 36;
  if (this->_internal_var_bool4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_var_bool4(), target);
  }

  // bool var_bool5 = 37;
  if (this->_internal_var_bool5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_var_bool5(), target);
  }

  // bool var_bool6 = 38;
  if (this->_internal_var_bool6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_var_bool6(), target);
  }

  // bool var_bool7 = 39;
  if (this->_internal_var_bool7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_var_bool7(), target);
  }

  // bool var_bool8 = 40;
  if (this->_internal_var_bool8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_var_bool8(), target);
  }

  // string var_string1 = 41;
  if (!this->_internal_var_string1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string1().data(), static_cast<int>(this->_internal_var_string1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string1");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_var_string1(), target);
  }

  // string var_string2 = 42;
  if (!this->_internal_var_string2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string2().data(), static_cast<int>(this->_internal_var_string2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string2");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_var_string2(), target);
  }

  // string var_string3 = 43;
  if (!this->_internal_var_string3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string3().data(), static_cast<int>(this->_internal_var_string3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string3");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_var_string3(), target);
  }

  // string var_string4 = 44;
  if (!this->_internal_var_string4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string4().data(), static_cast<int>(this->_internal_var_string4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string4");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_var_string4(), target);
  }

  // string var_string5 = 45;
  if (!this->_internal_var_string5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string5().data(), static_cast<int>(this->_internal_var_string5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string5");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_var_string5(), target);
  }

  // string var_string6 = 46;
  if (!this->_internal_var_string6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string6().data(), static_cast<int>(this->_internal_var_string6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string6");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_var_string6(), target);
  }

  // string var_string7 = 47;
  if (!this->_internal_var_string7().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string7().data(), static_cast<int>(this->_internal_var_string7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string7");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_var_string7(), target);
  }

  // string var_string8 = 48;
  if (!this->_internal_var_string8().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_string8().data(), static_cast<int>(this->_internal_var_string8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ComplexObjectL11.var_string8");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_var_string8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ComplexObjectL11)
  return target;
}

size_t ComplexObjectL11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ComplexObjectL11)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_string1 = 41;
  if (!this->_internal_var_string1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string1());
  }

  // string var_string2 = 42;
  if (!this->_internal_var_string2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string2());
  }

  // string var_string3 = 43;
  if (!this->_internal_var_string3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string3());
  }

  // string var_string4 = 44;
  if (!this->_internal_var_string4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string4());
  }

  // string var_string5 = 45;
  if (!this->_internal_var_string5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string5());
  }

  // string var_string6 = 46;
  if (!this->_internal_var_string6().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string6());
  }

  // string var_string7 = 47;
  if (!this->_internal_var_string7().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string7());
  }

  // string var_string8 = 48;
  if (!this->_internal_var_string8().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_string8());
  }

  // int32 var_int321 = 1;
  if (this->_internal_var_int321() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int321());
  }

  // int32 var_int322 = 2;
  if (this->_internal_var_int322() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int322());
  }

  // int32 var_int323 = 3;
  if (this->_internal_var_int323() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int323());
  }

  // int32 var_int324 = 4;
  if (this->_internal_var_int324() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int324());
  }

  // int32 var_int325 = 5;
  if (this->_internal_var_int325() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int325());
  }

  // int32 var_int326 = 6;
  if (this->_internal_var_int326() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int326());
  }

  // int32 var_int327 = 7;
  if (this->_internal_var_int327() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int327());
  }

  // int32 var_int328 = 8;
  if (this->_internal_var_int328() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_var_int328());
  }

  // int64 var_int641 = 9;
  if (this->_internal_var_int641() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int641());
  }

  // int64 var_int642 = 10;
  if (this->_internal_var_int642() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int642());
  }

  // int64 var_int643 = 11;
  if (this->_internal_var_int643() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int643());
  }

  // int64 var_int644 = 12;
  if (this->_internal_var_int644() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int644());
  }

  // int64 var_int645 = 13;
  if (this->_internal_var_int645() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int645());
  }

  // int64 var_int646 = 14;
  if (this->_internal_var_int646() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int646());
  }

  // int64 var_int647 = 15;
  if (this->_internal_var_int647() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_var_int647());
  }

  // int64 var_int648 = 16;
  if (this->_internal_var_int648() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_var_int648());
  }

  // float var_float1 = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = this->_internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    total_size += 2 + 4;
  }

  // float var_float2 = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = this->_internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    total_size += 2 + 4;
  }

  // float var_float3 = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = this->_internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    total_size += 2 + 4;
  }

  // float var_float4 = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = this->_internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    total_size += 2 + 4;
  }

  // float var_float5 = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = this->_internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    total_size += 2 + 4;
  }

  // float var_float6 = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = this->_internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    total_size += 2 + 4;
  }

  // float var_float7 = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = this->_internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    total_size += 2 + 4;
  }

  // float var_float8 = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = this->_internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    total_size += 2 + 4;
  }

  // double var_double1 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = this->_internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    total_size += 2 + 8;
  }

  // double var_double2 = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = this->_internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    total_size += 2 + 8;
  }

  // double var_double3 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = this->_internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    total_size += 2 + 8;
  }

  // double var_double4 = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = this->_internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    total_size += 2 + 8;
  }

  // double var_double5 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = this->_internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    total_size += 2 + 8;
  }

  // double var_double6 = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = this->_internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    total_size += 2 + 8;
  }

  // double var_double7 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = this->_internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    total_size += 2 + 8;
  }

  // double var_double8 = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = this->_internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    total_size += 2 + 8;
  }

  // bool var_bool1 = 33;
  if (this->_internal_var_bool1() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool2 = 34;
  if (this->_internal_var_bool2() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool3 = 35;
  if (this->_internal_var_bool3() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool4 = 36;
  if (this->_internal_var_bool4() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool5 = 37;
  if (this->_internal_var_bool5() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool6 = 38;
  if (this->_internal_var_bool6() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool7 = 39;
  if (this->_internal_var_bool7() != 0) {
    total_size += 2 + 1;
  }

  // bool var_bool8 = 40;
  if (this->_internal_var_bool8() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexObjectL11::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexObjectL11::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexObjectL11::GetClassData() const { return &_class_data_; }


void ComplexObjectL11::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexObjectL11*>(&to_msg);
  auto& from = static_cast<const ComplexObjectL11&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ComplexObjectL11)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_string1().empty()) {
    _this->_internal_set_var_string1(from._internal_var_string1());
  }
  if (!from._internal_var_string2().empty()) {
    _this->_internal_set_var_string2(from._internal_var_string2());
  }
  if (!from._internal_var_string3().empty()) {
    _this->_internal_set_var_string3(from._internal_var_string3());
  }
  if (!from._internal_var_string4().empty()) {
    _this->_internal_set_var_string4(from._internal_var_string4());
  }
  if (!from._internal_var_string5().empty()) {
    _this->_internal_set_var_string5(from._internal_var_string5());
  }
  if (!from._internal_var_string6().empty()) {
    _this->_internal_set_var_string6(from._internal_var_string6());
  }
  if (!from._internal_var_string7().empty()) {
    _this->_internal_set_var_string7(from._internal_var_string7());
  }
  if (!from._internal_var_string8().empty()) {
    _this->_internal_set_var_string8(from._internal_var_string8());
  }
  if (from._internal_var_int321() != 0) {
    _this->_internal_set_var_int321(from._internal_var_int321());
  }
  if (from._internal_var_int322() != 0) {
    _this->_internal_set_var_int322(from._internal_var_int322());
  }
  if (from._internal_var_int323() != 0) {
    _this->_internal_set_var_int323(from._internal_var_int323());
  }
  if (from._internal_var_int324() != 0) {
    _this->_internal_set_var_int324(from._internal_var_int324());
  }
  if (from._internal_var_int325() != 0) {
    _this->_internal_set_var_int325(from._internal_var_int325());
  }
  if (from._internal_var_int326() != 0) {
    _this->_internal_set_var_int326(from._internal_var_int326());
  }
  if (from._internal_var_int327() != 0) {
    _this->_internal_set_var_int327(from._internal_var_int327());
  }
  if (from._internal_var_int328() != 0) {
    _this->_internal_set_var_int328(from._internal_var_int328());
  }
  if (from._internal_var_int641() != 0) {
    _this->_internal_set_var_int641(from._internal_var_int641());
  }
  if (from._internal_var_int642() != 0) {
    _this->_internal_set_var_int642(from._internal_var_int642());
  }
  if (from._internal_var_int643() != 0) {
    _this->_internal_set_var_int643(from._internal_var_int643());
  }
  if (from._internal_var_int644() != 0) {
    _this->_internal_set_var_int644(from._internal_var_int644());
  }
  if (from._internal_var_int645() != 0) {
    _this->_internal_set_var_int645(from._internal_var_int645());
  }
  if (from._internal_var_int646() != 0) {
    _this->_internal_set_var_int646(from._internal_var_int646());
  }
  if (from._internal_var_int647() != 0) {
    _this->_internal_set_var_int647(from._internal_var_int647());
  }
  if (from._internal_var_int648() != 0) {
    _this->_internal_set_var_int648(from._internal_var_int648());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float1 = from._internal_var_float1();
  uint32_t raw_var_float1;
  memcpy(&raw_var_float1, &tmp_var_float1, sizeof(tmp_var_float1));
  if (raw_var_float1 != 0) {
    _this->_internal_set_var_float1(from._internal_var_float1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float2 = from._internal_var_float2();
  uint32_t raw_var_float2;
  memcpy(&raw_var_float2, &tmp_var_float2, sizeof(tmp_var_float2));
  if (raw_var_float2 != 0) {
    _this->_internal_set_var_float2(from._internal_var_float2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float3 = from._internal_var_float3();
  uint32_t raw_var_float3;
  memcpy(&raw_var_float3, &tmp_var_float3, sizeof(tmp_var_float3));
  if (raw_var_float3 != 0) {
    _this->_internal_set_var_float3(from._internal_var_float3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float4 = from._internal_var_float4();
  uint32_t raw_var_float4;
  memcpy(&raw_var_float4, &tmp_var_float4, sizeof(tmp_var_float4));
  if (raw_var_float4 != 0) {
    _this->_internal_set_var_float4(from._internal_var_float4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float5 = from._internal_var_float5();
  uint32_t raw_var_float5;
  memcpy(&raw_var_float5, &tmp_var_float5, sizeof(tmp_var_float5));
  if (raw_var_float5 != 0) {
    _this->_internal_set_var_float5(from._internal_var_float5());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float6 = from._internal_var_float6();
  uint32_t raw_var_float6;
  memcpy(&raw_var_float6, &tmp_var_float6, sizeof(tmp_var_float6));
  if (raw_var_float6 != 0) {
    _this->_internal_set_var_float6(from._internal_var_float6());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float7 = from._internal_var_float7();
  uint32_t raw_var_float7;
  memcpy(&raw_var_float7, &tmp_var_float7, sizeof(tmp_var_float7));
  if (raw_var_float7 != 0) {
    _this->_internal_set_var_float7(from._internal_var_float7());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_var_float8 = from._internal_var_float8();
  uint32_t raw_var_float8;
  memcpy(&raw_var_float8, &tmp_var_float8, sizeof(tmp_var_float8));
  if (raw_var_float8 != 0) {
    _this->_internal_set_var_float8(from._internal_var_float8());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double1 = from._internal_var_double1();
  uint64_t raw_var_double1;
  memcpy(&raw_var_double1, &tmp_var_double1, sizeof(tmp_var_double1));
  if (raw_var_double1 != 0) {
    _this->_internal_set_var_double1(from._internal_var_double1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double2 = from._internal_var_double2();
  uint64_t raw_var_double2;
  memcpy(&raw_var_double2, &tmp_var_double2, sizeof(tmp_var_double2));
  if (raw_var_double2 != 0) {
    _this->_internal_set_var_double2(from._internal_var_double2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double3 = from._internal_var_double3();
  uint64_t raw_var_double3;
  memcpy(&raw_var_double3, &tmp_var_double3, sizeof(tmp_var_double3));
  if (raw_var_double3 != 0) {
    _this->_internal_set_var_double3(from._internal_var_double3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double4 = from._internal_var_double4();
  uint64_t raw_var_double4;
  memcpy(&raw_var_double4, &tmp_var_double4, sizeof(tmp_var_double4));
  if (raw_var_double4 != 0) {
    _this->_internal_set_var_double4(from._internal_var_double4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double5 = from._internal_var_double5();
  uint64_t raw_var_double5;
  memcpy(&raw_var_double5, &tmp_var_double5, sizeof(tmp_var_double5));
  if (raw_var_double5 != 0) {
    _this->_internal_set_var_double5(from._internal_var_double5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double6 = from._internal_var_double6();
  uint64_t raw_var_double6;
  memcpy(&raw_var_double6, &tmp_var_double6, sizeof(tmp_var_double6));
  if (raw_var_double6 != 0) {
    _this->_internal_set_var_double6(from._internal_var_double6());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double7 = from._internal_var_double7();
  uint64_t raw_var_double7;
  memcpy(&raw_var_double7, &tmp_var_double7, sizeof(tmp_var_double7));
  if (raw_var_double7 != 0) {
    _this->_internal_set_var_double7(from._internal_var_double7());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_var_double8 = from._internal_var_double8();
  uint64_t raw_var_double8;
  memcpy(&raw_var_double8, &tmp_var_double8, sizeof(tmp_var_double8));
  if (raw_var_double8 != 0) {
    _this->_internal_set_var_double8(from._internal_var_double8());
  }
  if (from._internal_var_bool1() != 0) {
    _this->_internal_set_var_bool1(from._internal_var_bool1());
  }
  if (from._internal_var_bool2() != 0) {
    _this->_internal_set_var_bool2(from._internal_var_bool2());
  }
  if (from._internal_var_bool3() != 0) {
    _this->_internal_set_var_bool3(from._internal_var_bool3());
  }
  if (from._internal_var_bool4() != 0) {
    _this->_internal_set_var_bool4(from._internal_var_bool4());
  }
  if (from._internal_var_bool5() != 0) {
    _this->_internal_set_var_bool5(from._internal_var_bool5());
  }
  if (from._internal_var_bool6() != 0) {
    _this->_internal_set_var_bool6(from._internal_var_bool6());
  }
  if (from._internal_var_bool7() != 0) {
    _this->_internal_set_var_bool7(from._internal_var_bool7());
  }
  if (from._internal_var_bool8() != 0) {
    _this->_internal_set_var_bool8(from._internal_var_bool8());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexObjectL11::CopyFrom(const ComplexObjectL11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ComplexObjectL11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexObjectL11::IsInitialized() const {
  return true;
}

void ComplexObjectL11::InternalSwap(ComplexObjectL11* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string1_, lhs_arena,
      &other->_impl_.var_string1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string2_, lhs_arena,
      &other->_impl_.var_string2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string3_, lhs_arena,
      &other->_impl_.var_string3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string4_, lhs_arena,
      &other->_impl_.var_string4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string5_, lhs_arena,
      &other->_impl_.var_string5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string6_, lhs_arena,
      &other->_impl_.var_string6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string7_, lhs_arena,
      &other->_impl_.var_string7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_string8_, lhs_arena,
      &other->_impl_.var_string8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexObjectL11, _impl_.var_bool8_)
      + sizeof(ComplexObjectL11::_impl_.var_bool8_)
      - PROTOBUF_FIELD_OFFSET(ComplexObjectL11, _impl_.var_int321_)>(
          reinterpret_cast<char*>(&_impl_.var_int321_),
          reinterpret_cast<char*>(&other->_impl_.var_int321_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexObjectL11::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComplexObjectL1_2eproto_getter, &descriptor_table_ComplexObjectL1_2eproto_once,
      file_level_metadata_ComplexObjectL1_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL1*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL1 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ComplexObjectL11*
Arena::CreateMaybeMessage< ::proto::ComplexObjectL11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ComplexObjectL11 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
