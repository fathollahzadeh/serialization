// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USER_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_USER_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "URLEntityFBS.h"

namespace tweetstatusflatbuffers {

struct UserFBS;
struct UserFBSBuilder;
struct UserFBST;

struct UserFBST : public flatbuffers::NativeTable {
  typedef UserFBS TableType;
  int64_t id = 0;
  std::string name{};
  std::string screen_name{};
  std::string location{};
  std::string url{};
  std::string description{};
  bool isProtected = false;
  bool verified = false;
  int32_t followers_count = 0;
  int32_t friends_count = 0;
  int32_t listed_count = 0;
  int32_t favourites_count = 0;
  int32_t statuses_count = 0;
  std::string created_at{};
  std::string profile_banner_url{};
  std::string profile_image_url_https{};
  bool default_profile = false;
  std::vector<std::string> withheld_in_countries{};
  std::string withheld_scope{};
  std::vector<std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST>> descriptionURLEntities{};
  bool geo_enabled = false;
  std::string lang{};
  bool contributors_enabled = false;
  std::string profile_background_color{};
  std::string profile_background_image_url{};
  std::string profile_background_image_url_https{};
  bool profile_background_tile = false;
  std::string profile_image_url{};
  std::string profile_link_color{};
  std::string profile_sidebar_border_color{};
  std::string profile_sidebar_fill_color{};
  std::string profile_text_color{};
  bool profile_use_background_image = false;
  int32_t utc_offset = 0;
  std::string time_zone{};
  bool is_translator = false;
  bool follow_request_sent = false;
  bool showAllInlineMedia = false;
};

struct UserFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserFBST NativeTableType;
  typedef UserFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_SCREEN_NAME = 8,
    VT_LOCATION = 10,
    VT_URL = 12,
    VT_DESCRIPTION = 14,
    VT_ISPROTECTED = 16,
    VT_VERIFIED = 18,
    VT_FOLLOWERS_COUNT = 20,
    VT_FRIENDS_COUNT = 22,
    VT_LISTED_COUNT = 24,
    VT_FAVOURITES_COUNT = 26,
    VT_STATUSES_COUNT = 28,
    VT_CREATED_AT = 30,
    VT_PROFILE_BANNER_URL = 32,
    VT_PROFILE_IMAGE_URL_HTTPS = 34,
    VT_DEFAULT_PROFILE = 36,
    VT_WITHHELD_IN_COUNTRIES = 38,
    VT_WITHHELD_SCOPE = 40,
    VT_DESCRIPTIONURLENTITIES = 42,
    VT_GEO_ENABLED = 44,
    VT_LANG = 46,
    VT_CONTRIBUTORS_ENABLED = 48,
    VT_PROFILE_BACKGROUND_COLOR = 50,
    VT_PROFILE_BACKGROUND_IMAGE_URL = 52,
    VT_PROFILE_BACKGROUND_IMAGE_URL_HTTPS = 54,
    VT_PROFILE_BACKGROUND_TILE = 56,
    VT_PROFILE_IMAGE_URL = 58,
    VT_PROFILE_LINK_COLOR = 60,
    VT_PROFILE_SIDEBAR_BORDER_COLOR = 62,
    VT_PROFILE_SIDEBAR_FILL_COLOR = 64,
    VT_PROFILE_TEXT_COLOR = 66,
    VT_PROFILE_USE_BACKGROUND_IMAGE = 68,
    VT_UTC_OFFSET = 70,
    VT_TIME_ZONE = 72,
    VT_IS_TRANSLATOR = 74,
    VT_FOLLOW_REQUEST_SENT = 76,
    VT_SHOWALLINLINEMEDIA = 78
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  bool mutate_id(int64_t _id) {
    return SetField<int64_t>(VT_ID, _id, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *screen_name() const {
    return GetPointer<const flatbuffers::String *>(VT_SCREEN_NAME);
  }
  flatbuffers::String *mutable_screen_name() {
    return GetPointer<flatbuffers::String *>(VT_SCREEN_NAME);
  }
  const flatbuffers::String *location() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCATION);
  }
  flatbuffers::String *mutable_location() {
    return GetPointer<flatbuffers::String *>(VT_LOCATION);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  flatbuffers::String *mutable_description() {
    return GetPointer<flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool isProtected() const {
    return GetField<uint8_t>(VT_ISPROTECTED, 0) != 0;
  }
  bool mutate_isProtected(bool _isProtected) {
    return SetField<uint8_t>(VT_ISPROTECTED, static_cast<uint8_t>(_isProtected), 0);
  }
  bool verified() const {
    return GetField<uint8_t>(VT_VERIFIED, 0) != 0;
  }
  bool mutate_verified(bool _verified) {
    return SetField<uint8_t>(VT_VERIFIED, static_cast<uint8_t>(_verified), 0);
  }
  int32_t followers_count() const {
    return GetField<int32_t>(VT_FOLLOWERS_COUNT, 0);
  }
  bool mutate_followers_count(int32_t _followers_count) {
    return SetField<int32_t>(VT_FOLLOWERS_COUNT, _followers_count, 0);
  }
  int32_t friends_count() const {
    return GetField<int32_t>(VT_FRIENDS_COUNT, 0);
  }
  bool mutate_friends_count(int32_t _friends_count) {
    return SetField<int32_t>(VT_FRIENDS_COUNT, _friends_count, 0);
  }
  int32_t listed_count() const {
    return GetField<int32_t>(VT_LISTED_COUNT, 0);
  }
  bool mutate_listed_count(int32_t _listed_count) {
    return SetField<int32_t>(VT_LISTED_COUNT, _listed_count, 0);
  }
  int32_t favourites_count() const {
    return GetField<int32_t>(VT_FAVOURITES_COUNT, 0);
  }
  bool mutate_favourites_count(int32_t _favourites_count) {
    return SetField<int32_t>(VT_FAVOURITES_COUNT, _favourites_count, 0);
  }
  int32_t statuses_count() const {
    return GetField<int32_t>(VT_STATUSES_COUNT, 0);
  }
  bool mutate_statuses_count(int32_t _statuses_count) {
    return SetField<int32_t>(VT_STATUSES_COUNT, _statuses_count, 0);
  }
  const flatbuffers::String *created_at() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATED_AT);
  }
  flatbuffers::String *mutable_created_at() {
    return GetPointer<flatbuffers::String *>(VT_CREATED_AT);
  }
  const flatbuffers::String *profile_banner_url() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_BANNER_URL);
  }
  flatbuffers::String *mutable_profile_banner_url() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_BANNER_URL);
  }
  const flatbuffers::String *profile_image_url_https() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_IMAGE_URL_HTTPS);
  }
  flatbuffers::String *mutable_profile_image_url_https() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_IMAGE_URL_HTTPS);
  }
  bool default_profile() const {
    return GetField<uint8_t>(VT_DEFAULT_PROFILE, 0) != 0;
  }
  bool mutate_default_profile(bool _default_profile) {
    return SetField<uint8_t>(VT_DEFAULT_PROFILE, static_cast<uint8_t>(_default_profile), 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *withheld_in_countries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WITHHELD_IN_COUNTRIES);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_withheld_in_countries() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WITHHELD_IN_COUNTRIES);
  }
  const flatbuffers::String *withheld_scope() const {
    return GetPointer<const flatbuffers::String *>(VT_WITHHELD_SCOPE);
  }
  flatbuffers::String *mutable_withheld_scope() {
    return GetPointer<flatbuffers::String *>(VT_WITHHELD_SCOPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *descriptionURLEntities() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *>(VT_DESCRIPTIONURLENTITIES);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *mutable_descriptionURLEntities() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *>(VT_DESCRIPTIONURLENTITIES);
  }
  bool geo_enabled() const {
    return GetField<uint8_t>(VT_GEO_ENABLED, 0) != 0;
  }
  bool mutate_geo_enabled(bool _geo_enabled) {
    return SetField<uint8_t>(VT_GEO_ENABLED, static_cast<uint8_t>(_geo_enabled), 0);
  }
  const flatbuffers::String *lang() const {
    return GetPointer<const flatbuffers::String *>(VT_LANG);
  }
  flatbuffers::String *mutable_lang() {
    return GetPointer<flatbuffers::String *>(VT_LANG);
  }
  bool contributors_enabled() const {
    return GetField<uint8_t>(VT_CONTRIBUTORS_ENABLED, 0) != 0;
  }
  bool mutate_contributors_enabled(bool _contributors_enabled) {
    return SetField<uint8_t>(VT_CONTRIBUTORS_ENABLED, static_cast<uint8_t>(_contributors_enabled), 0);
  }
  const flatbuffers::String *profile_background_color() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_BACKGROUND_COLOR);
  }
  flatbuffers::String *mutable_profile_background_color() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_BACKGROUND_COLOR);
  }
  const flatbuffers::String *profile_background_image_url() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_BACKGROUND_IMAGE_URL);
  }
  flatbuffers::String *mutable_profile_background_image_url() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_BACKGROUND_IMAGE_URL);
  }
  const flatbuffers::String *profile_background_image_url_https() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_BACKGROUND_IMAGE_URL_HTTPS);
  }
  flatbuffers::String *mutable_profile_background_image_url_https() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_BACKGROUND_IMAGE_URL_HTTPS);
  }
  bool profile_background_tile() const {
    return GetField<uint8_t>(VT_PROFILE_BACKGROUND_TILE, 0) != 0;
  }
  bool mutate_profile_background_tile(bool _profile_background_tile) {
    return SetField<uint8_t>(VT_PROFILE_BACKGROUND_TILE, static_cast<uint8_t>(_profile_background_tile), 0);
  }
  const flatbuffers::String *profile_image_url() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_IMAGE_URL);
  }
  flatbuffers::String *mutable_profile_image_url() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_IMAGE_URL);
  }
  const flatbuffers::String *profile_link_color() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_LINK_COLOR);
  }
  flatbuffers::String *mutable_profile_link_color() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_LINK_COLOR);
  }
  const flatbuffers::String *profile_sidebar_border_color() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_SIDEBAR_BORDER_COLOR);
  }
  flatbuffers::String *mutable_profile_sidebar_border_color() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_SIDEBAR_BORDER_COLOR);
  }
  const flatbuffers::String *profile_sidebar_fill_color() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_SIDEBAR_FILL_COLOR);
  }
  flatbuffers::String *mutable_profile_sidebar_fill_color() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_SIDEBAR_FILL_COLOR);
  }
  const flatbuffers::String *profile_text_color() const {
    return GetPointer<const flatbuffers::String *>(VT_PROFILE_TEXT_COLOR);
  }
  flatbuffers::String *mutable_profile_text_color() {
    return GetPointer<flatbuffers::String *>(VT_PROFILE_TEXT_COLOR);
  }
  bool profile_use_background_image() const {
    return GetField<uint8_t>(VT_PROFILE_USE_BACKGROUND_IMAGE, 0) != 0;
  }
  bool mutate_profile_use_background_image(bool _profile_use_background_image) {
    return SetField<uint8_t>(VT_PROFILE_USE_BACKGROUND_IMAGE, static_cast<uint8_t>(_profile_use_background_image), 0);
  }
  int32_t utc_offset() const {
    return GetField<int32_t>(VT_UTC_OFFSET, 0);
  }
  bool mutate_utc_offset(int32_t _utc_offset) {
    return SetField<int32_t>(VT_UTC_OFFSET, _utc_offset, 0);
  }
  const flatbuffers::String *time_zone() const {
    return GetPointer<const flatbuffers::String *>(VT_TIME_ZONE);
  }
  flatbuffers::String *mutable_time_zone() {
    return GetPointer<flatbuffers::String *>(VT_TIME_ZONE);
  }
  bool is_translator() const {
    return GetField<uint8_t>(VT_IS_TRANSLATOR, 0) != 0;
  }
  bool mutate_is_translator(bool _is_translator) {
    return SetField<uint8_t>(VT_IS_TRANSLATOR, static_cast<uint8_t>(_is_translator), 0);
  }
  bool follow_request_sent() const {
    return GetField<uint8_t>(VT_FOLLOW_REQUEST_SENT, 0) != 0;
  }
  bool mutate_follow_request_sent(bool _follow_request_sent) {
    return SetField<uint8_t>(VT_FOLLOW_REQUEST_SENT, static_cast<uint8_t>(_follow_request_sent), 0);
  }
  bool showAllInlineMedia() const {
    return GetField<uint8_t>(VT_SHOWALLINLINEMEDIA, 0) != 0;
  }
  bool mutate_showAllInlineMedia(bool _showAllInlineMedia) {
    return SetField<uint8_t>(VT_SHOWALLINLINEMEDIA, static_cast<uint8_t>(_showAllInlineMedia), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SCREEN_NAME) &&
           verifier.VerifyString(screen_name()) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyString(location()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<uint8_t>(verifier, VT_ISPROTECTED) &&
           VerifyField<uint8_t>(verifier, VT_VERIFIED) &&
           VerifyField<int32_t>(verifier, VT_FOLLOWERS_COUNT) &&
           VerifyField<int32_t>(verifier, VT_FRIENDS_COUNT) &&
           VerifyField<int32_t>(verifier, VT_LISTED_COUNT) &&
           VerifyField<int32_t>(verifier, VT_FAVOURITES_COUNT) &&
           VerifyField<int32_t>(verifier, VT_STATUSES_COUNT) &&
           VerifyOffset(verifier, VT_CREATED_AT) &&
           verifier.VerifyString(created_at()) &&
           VerifyOffset(verifier, VT_PROFILE_BANNER_URL) &&
           verifier.VerifyString(profile_banner_url()) &&
           VerifyOffset(verifier, VT_PROFILE_IMAGE_URL_HTTPS) &&
           verifier.VerifyString(profile_image_url_https()) &&
           VerifyField<uint8_t>(verifier, VT_DEFAULT_PROFILE) &&
           VerifyOffset(verifier, VT_WITHHELD_IN_COUNTRIES) &&
           verifier.VerifyVector(withheld_in_countries()) &&
           verifier.VerifyVectorOfStrings(withheld_in_countries()) &&
           VerifyOffset(verifier, VT_WITHHELD_SCOPE) &&
           verifier.VerifyString(withheld_scope()) &&
           VerifyOffset(verifier, VT_DESCRIPTIONURLENTITIES) &&
           verifier.VerifyVector(descriptionURLEntities()) &&
           verifier.VerifyVectorOfTables(descriptionURLEntities()) &&
           VerifyField<uint8_t>(verifier, VT_GEO_ENABLED) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyField<uint8_t>(verifier, VT_CONTRIBUTORS_ENABLED) &&
           VerifyOffset(verifier, VT_PROFILE_BACKGROUND_COLOR) &&
           verifier.VerifyString(profile_background_color()) &&
           VerifyOffset(verifier, VT_PROFILE_BACKGROUND_IMAGE_URL) &&
           verifier.VerifyString(profile_background_image_url()) &&
           VerifyOffset(verifier, VT_PROFILE_BACKGROUND_IMAGE_URL_HTTPS) &&
           verifier.VerifyString(profile_background_image_url_https()) &&
           VerifyField<uint8_t>(verifier, VT_PROFILE_BACKGROUND_TILE) &&
           VerifyOffset(verifier, VT_PROFILE_IMAGE_URL) &&
           verifier.VerifyString(profile_image_url()) &&
           VerifyOffset(verifier, VT_PROFILE_LINK_COLOR) &&
           verifier.VerifyString(profile_link_color()) &&
           VerifyOffset(verifier, VT_PROFILE_SIDEBAR_BORDER_COLOR) &&
           verifier.VerifyString(profile_sidebar_border_color()) &&
           VerifyOffset(verifier, VT_PROFILE_SIDEBAR_FILL_COLOR) &&
           verifier.VerifyString(profile_sidebar_fill_color()) &&
           VerifyOffset(verifier, VT_PROFILE_TEXT_COLOR) &&
           verifier.VerifyString(profile_text_color()) &&
           VerifyField<uint8_t>(verifier, VT_PROFILE_USE_BACKGROUND_IMAGE) &&
           VerifyField<int32_t>(verifier, VT_UTC_OFFSET) &&
           VerifyOffset(verifier, VT_TIME_ZONE) &&
           verifier.VerifyString(time_zone()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TRANSLATOR) &&
           VerifyField<uint8_t>(verifier, VT_FOLLOW_REQUEST_SENT) &&
           VerifyField<uint8_t>(verifier, VT_SHOWALLINLINEMEDIA) &&
           verifier.EndTable();
  }
  UserFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UserFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<UserFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UserFBSBuilder {
  typedef UserFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(UserFBS::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(UserFBS::VT_NAME, name);
  }
  void add_screen_name(flatbuffers::Offset<flatbuffers::String> screen_name) {
    fbb_.AddOffset(UserFBS::VT_SCREEN_NAME, screen_name);
  }
  void add_location(flatbuffers::Offset<flatbuffers::String> location) {
    fbb_.AddOffset(UserFBS::VT_LOCATION, location);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(UserFBS::VT_URL, url);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(UserFBS::VT_DESCRIPTION, description);
  }
  void add_isProtected(bool isProtected) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_ISPROTECTED, static_cast<uint8_t>(isProtected), 0);
  }
  void add_verified(bool verified) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_VERIFIED, static_cast<uint8_t>(verified), 0);
  }
  void add_followers_count(int32_t followers_count) {
    fbb_.AddElement<int32_t>(UserFBS::VT_FOLLOWERS_COUNT, followers_count, 0);
  }
  void add_friends_count(int32_t friends_count) {
    fbb_.AddElement<int32_t>(UserFBS::VT_FRIENDS_COUNT, friends_count, 0);
  }
  void add_listed_count(int32_t listed_count) {
    fbb_.AddElement<int32_t>(UserFBS::VT_LISTED_COUNT, listed_count, 0);
  }
  void add_favourites_count(int32_t favourites_count) {
    fbb_.AddElement<int32_t>(UserFBS::VT_FAVOURITES_COUNT, favourites_count, 0);
  }
  void add_statuses_count(int32_t statuses_count) {
    fbb_.AddElement<int32_t>(UserFBS::VT_STATUSES_COUNT, statuses_count, 0);
  }
  void add_created_at(flatbuffers::Offset<flatbuffers::String> created_at) {
    fbb_.AddOffset(UserFBS::VT_CREATED_AT, created_at);
  }
  void add_profile_banner_url(flatbuffers::Offset<flatbuffers::String> profile_banner_url) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_BANNER_URL, profile_banner_url);
  }
  void add_profile_image_url_https(flatbuffers::Offset<flatbuffers::String> profile_image_url_https) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_IMAGE_URL_HTTPS, profile_image_url_https);
  }
  void add_default_profile(bool default_profile) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_DEFAULT_PROFILE, static_cast<uint8_t>(default_profile), 0);
  }
  void add_withheld_in_countries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> withheld_in_countries) {
    fbb_.AddOffset(UserFBS::VT_WITHHELD_IN_COUNTRIES, withheld_in_countries);
  }
  void add_withheld_scope(flatbuffers::Offset<flatbuffers::String> withheld_scope) {
    fbb_.AddOffset(UserFBS::VT_WITHHELD_SCOPE, withheld_scope);
  }
  void add_descriptionURLEntities(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>>> descriptionURLEntities) {
    fbb_.AddOffset(UserFBS::VT_DESCRIPTIONURLENTITIES, descriptionURLEntities);
  }
  void add_geo_enabled(bool geo_enabled) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_GEO_ENABLED, static_cast<uint8_t>(geo_enabled), 0);
  }
  void add_lang(flatbuffers::Offset<flatbuffers::String> lang) {
    fbb_.AddOffset(UserFBS::VT_LANG, lang);
  }
  void add_contributors_enabled(bool contributors_enabled) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_CONTRIBUTORS_ENABLED, static_cast<uint8_t>(contributors_enabled), 0);
  }
  void add_profile_background_color(flatbuffers::Offset<flatbuffers::String> profile_background_color) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_BACKGROUND_COLOR, profile_background_color);
  }
  void add_profile_background_image_url(flatbuffers::Offset<flatbuffers::String> profile_background_image_url) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_BACKGROUND_IMAGE_URL, profile_background_image_url);
  }
  void add_profile_background_image_url_https(flatbuffers::Offset<flatbuffers::String> profile_background_image_url_https) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_BACKGROUND_IMAGE_URL_HTTPS, profile_background_image_url_https);
  }
  void add_profile_background_tile(bool profile_background_tile) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_PROFILE_BACKGROUND_TILE, static_cast<uint8_t>(profile_background_tile), 0);
  }
  void add_profile_image_url(flatbuffers::Offset<flatbuffers::String> profile_image_url) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_IMAGE_URL, profile_image_url);
  }
  void add_profile_link_color(flatbuffers::Offset<flatbuffers::String> profile_link_color) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_LINK_COLOR, profile_link_color);
  }
  void add_profile_sidebar_border_color(flatbuffers::Offset<flatbuffers::String> profile_sidebar_border_color) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_SIDEBAR_BORDER_COLOR, profile_sidebar_border_color);
  }
  void add_profile_sidebar_fill_color(flatbuffers::Offset<flatbuffers::String> profile_sidebar_fill_color) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_SIDEBAR_FILL_COLOR, profile_sidebar_fill_color);
  }
  void add_profile_text_color(flatbuffers::Offset<flatbuffers::String> profile_text_color) {
    fbb_.AddOffset(UserFBS::VT_PROFILE_TEXT_COLOR, profile_text_color);
  }
  void add_profile_use_background_image(bool profile_use_background_image) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_PROFILE_USE_BACKGROUND_IMAGE, static_cast<uint8_t>(profile_use_background_image), 0);
  }
  void add_utc_offset(int32_t utc_offset) {
    fbb_.AddElement<int32_t>(UserFBS::VT_UTC_OFFSET, utc_offset, 0);
  }
  void add_time_zone(flatbuffers::Offset<flatbuffers::String> time_zone) {
    fbb_.AddOffset(UserFBS::VT_TIME_ZONE, time_zone);
  }
  void add_is_translator(bool is_translator) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_IS_TRANSLATOR, static_cast<uint8_t>(is_translator), 0);
  }
  void add_follow_request_sent(bool follow_request_sent) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_FOLLOW_REQUEST_SENT, static_cast<uint8_t>(follow_request_sent), 0);
  }
  void add_showAllInlineMedia(bool showAllInlineMedia) {
    fbb_.AddElement<uint8_t>(UserFBS::VT_SHOWALLINLINEMEDIA, static_cast<uint8_t>(showAllInlineMedia), 0);
  }
  explicit UserFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserFBS> CreateUserFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> screen_name = 0,
    flatbuffers::Offset<flatbuffers::String> location = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    bool isProtected = false,
    bool verified = false,
    int32_t followers_count = 0,
    int32_t friends_count = 0,
    int32_t listed_count = 0,
    int32_t favourites_count = 0,
    int32_t statuses_count = 0,
    flatbuffers::Offset<flatbuffers::String> created_at = 0,
    flatbuffers::Offset<flatbuffers::String> profile_banner_url = 0,
    flatbuffers::Offset<flatbuffers::String> profile_image_url_https = 0,
    bool default_profile = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> withheld_in_countries = 0,
    flatbuffers::Offset<flatbuffers::String> withheld_scope = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>>> descriptionURLEntities = 0,
    bool geo_enabled = false,
    flatbuffers::Offset<flatbuffers::String> lang = 0,
    bool contributors_enabled = false,
    flatbuffers::Offset<flatbuffers::String> profile_background_color = 0,
    flatbuffers::Offset<flatbuffers::String> profile_background_image_url = 0,
    flatbuffers::Offset<flatbuffers::String> profile_background_image_url_https = 0,
    bool profile_background_tile = false,
    flatbuffers::Offset<flatbuffers::String> profile_image_url = 0,
    flatbuffers::Offset<flatbuffers::String> profile_link_color = 0,
    flatbuffers::Offset<flatbuffers::String> profile_sidebar_border_color = 0,
    flatbuffers::Offset<flatbuffers::String> profile_sidebar_fill_color = 0,
    flatbuffers::Offset<flatbuffers::String> profile_text_color = 0,
    bool profile_use_background_image = false,
    int32_t utc_offset = 0,
    flatbuffers::Offset<flatbuffers::String> time_zone = 0,
    bool is_translator = false,
    bool follow_request_sent = false,
    bool showAllInlineMedia = false) {
  UserFBSBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_time_zone(time_zone);
  builder_.add_utc_offset(utc_offset);
  builder_.add_profile_text_color(profile_text_color);
  builder_.add_profile_sidebar_fill_color(profile_sidebar_fill_color);
  builder_.add_profile_sidebar_border_color(profile_sidebar_border_color);
  builder_.add_profile_link_color(profile_link_color);
  builder_.add_profile_image_url(profile_image_url);
  builder_.add_profile_background_image_url_https(profile_background_image_url_https);
  builder_.add_profile_background_image_url(profile_background_image_url);
  builder_.add_profile_background_color(profile_background_color);
  builder_.add_lang(lang);
  builder_.add_descriptionURLEntities(descriptionURLEntities);
  builder_.add_withheld_scope(withheld_scope);
  builder_.add_withheld_in_countries(withheld_in_countries);
  builder_.add_profile_image_url_https(profile_image_url_https);
  builder_.add_profile_banner_url(profile_banner_url);
  builder_.add_created_at(created_at);
  builder_.add_statuses_count(statuses_count);
  builder_.add_favourites_count(favourites_count);
  builder_.add_listed_count(listed_count);
  builder_.add_friends_count(friends_count);
  builder_.add_followers_count(followers_count);
  builder_.add_description(description);
  builder_.add_url(url);
  builder_.add_location(location);
  builder_.add_screen_name(screen_name);
  builder_.add_name(name);
  builder_.add_showAllInlineMedia(showAllInlineMedia);
  builder_.add_follow_request_sent(follow_request_sent);
  builder_.add_is_translator(is_translator);
  builder_.add_profile_use_background_image(profile_use_background_image);
  builder_.add_profile_background_tile(profile_background_tile);
  builder_.add_contributors_enabled(contributors_enabled);
  builder_.add_geo_enabled(geo_enabled);
  builder_.add_default_profile(default_profile);
  builder_.add_verified(verified);
  builder_.add_isProtected(isProtected);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserFBS> CreateUserFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const char *name = nullptr,
    const char *screen_name = nullptr,
    const char *location = nullptr,
    const char *url = nullptr,
    const char *description = nullptr,
    bool isProtected = false,
    bool verified = false,
    int32_t followers_count = 0,
    int32_t friends_count = 0,
    int32_t listed_count = 0,
    int32_t favourites_count = 0,
    int32_t statuses_count = 0,
    const char *created_at = nullptr,
    const char *profile_banner_url = nullptr,
    const char *profile_image_url_https = nullptr,
    bool default_profile = false,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *withheld_in_countries = nullptr,
    const char *withheld_scope = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> *descriptionURLEntities = nullptr,
    bool geo_enabled = false,
    const char *lang = nullptr,
    bool contributors_enabled = false,
    const char *profile_background_color = nullptr,
    const char *profile_background_image_url = nullptr,
    const char *profile_background_image_url_https = nullptr,
    bool profile_background_tile = false,
    const char *profile_image_url = nullptr,
    const char *profile_link_color = nullptr,
    const char *profile_sidebar_border_color = nullptr,
    const char *profile_sidebar_fill_color = nullptr,
    const char *profile_text_color = nullptr,
    bool profile_use_background_image = false,
    int32_t utc_offset = 0,
    const char *time_zone = nullptr,
    bool is_translator = false,
    bool follow_request_sent = false,
    bool showAllInlineMedia = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto screen_name__ = screen_name ? _fbb.CreateString(screen_name) : 0;
  auto location__ = location ? _fbb.CreateString(location) : 0;
  auto url__ = url ? _fbb.CreateString(url) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto created_at__ = created_at ? _fbb.CreateString(created_at) : 0;
  auto profile_banner_url__ = profile_banner_url ? _fbb.CreateString(profile_banner_url) : 0;
  auto profile_image_url_https__ = profile_image_url_https ? _fbb.CreateString(profile_image_url_https) : 0;
  auto withheld_in_countries__ = withheld_in_countries ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*withheld_in_countries) : 0;
  auto withheld_scope__ = withheld_scope ? _fbb.CreateString(withheld_scope) : 0;
  auto descriptionURLEntities__ = descriptionURLEntities ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>>(*descriptionURLEntities) : 0;
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto profile_background_color__ = profile_background_color ? _fbb.CreateString(profile_background_color) : 0;
  auto profile_background_image_url__ = profile_background_image_url ? _fbb.CreateString(profile_background_image_url) : 0;
  auto profile_background_image_url_https__ = profile_background_image_url_https ? _fbb.CreateString(profile_background_image_url_https) : 0;
  auto profile_image_url__ = profile_image_url ? _fbb.CreateString(profile_image_url) : 0;
  auto profile_link_color__ = profile_link_color ? _fbb.CreateString(profile_link_color) : 0;
  auto profile_sidebar_border_color__ = profile_sidebar_border_color ? _fbb.CreateString(profile_sidebar_border_color) : 0;
  auto profile_sidebar_fill_color__ = profile_sidebar_fill_color ? _fbb.CreateString(profile_sidebar_fill_color) : 0;
  auto profile_text_color__ = profile_text_color ? _fbb.CreateString(profile_text_color) : 0;
  auto time_zone__ = time_zone ? _fbb.CreateString(time_zone) : 0;
  return tweetstatusflatbuffers::CreateUserFBS(
      _fbb,
      id,
      name__,
      screen_name__,
      location__,
      url__,
      description__,
      isProtected,
      verified,
      followers_count,
      friends_count,
      listed_count,
      favourites_count,
      statuses_count,
      created_at__,
      profile_banner_url__,
      profile_image_url_https__,
      default_profile,
      withheld_in_countries__,
      withheld_scope__,
      descriptionURLEntities__,
      geo_enabled,
      lang__,
      contributors_enabled,
      profile_background_color__,
      profile_background_image_url__,
      profile_background_image_url_https__,
      profile_background_tile,
      profile_image_url__,
      profile_link_color__,
      profile_sidebar_border_color__,
      profile_sidebar_fill_color__,
      profile_text_color__,
      profile_use_background_image,
      utc_offset,
      time_zone__,
      is_translator,
      follow_request_sent,
      showAllInlineMedia);
}

flatbuffers::Offset<UserFBS> CreateUserFBS(flatbuffers::FlatBufferBuilder &_fbb, const UserFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline UserFBST *UserFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UserFBST>(new UserFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UserFBS::UnPackTo(UserFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = screen_name(); if (_e) _o->screen_name = _e->str(); }
  { auto _e = location(); if (_e) _o->location = _e->str(); }
  { auto _e = url(); if (_e) _o->url = _e->str(); }
  { auto _e = description(); if (_e) _o->description = _e->str(); }
  { auto _e = isProtected(); _o->isProtected = _e; }
  { auto _e = verified(); _o->verified = _e; }
  { auto _e = followers_count(); _o->followers_count = _e; }
  { auto _e = friends_count(); _o->friends_count = _e; }
  { auto _e = listed_count(); _o->listed_count = _e; }
  { auto _e = favourites_count(); _o->favourites_count = _e; }
  { auto _e = statuses_count(); _o->statuses_count = _e; }
  { auto _e = created_at(); if (_e) _o->created_at = _e->str(); }
  { auto _e = profile_banner_url(); if (_e) _o->profile_banner_url = _e->str(); }
  { auto _e = profile_image_url_https(); if (_e) _o->profile_image_url_https = _e->str(); }
  { auto _e = default_profile(); _o->default_profile = _e; }
  { auto _e = withheld_in_countries(); if (_e) { _o->withheld_in_countries.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->withheld_in_countries[_i] = _e->Get(_i)->str(); } } }
  { auto _e = withheld_scope(); if (_e) _o->withheld_scope = _e->str(); }
  { auto _e = descriptionURLEntities(); if (_e) { _o->descriptionURLEntities.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->descriptionURLEntities[_i] = std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = geo_enabled(); _o->geo_enabled = _e; }
  { auto _e = lang(); if (_e) _o->lang = _e->str(); }
  { auto _e = contributors_enabled(); _o->contributors_enabled = _e; }
  { auto _e = profile_background_color(); if (_e) _o->profile_background_color = _e->str(); }
  { auto _e = profile_background_image_url(); if (_e) _o->profile_background_image_url = _e->str(); }
  { auto _e = profile_background_image_url_https(); if (_e) _o->profile_background_image_url_https = _e->str(); }
  { auto _e = profile_background_tile(); _o->profile_background_tile = _e; }
  { auto _e = profile_image_url(); if (_e) _o->profile_image_url = _e->str(); }
  { auto _e = profile_link_color(); if (_e) _o->profile_link_color = _e->str(); }
  { auto _e = profile_sidebar_border_color(); if (_e) _o->profile_sidebar_border_color = _e->str(); }
  { auto _e = profile_sidebar_fill_color(); if (_e) _o->profile_sidebar_fill_color = _e->str(); }
  { auto _e = profile_text_color(); if (_e) _o->profile_text_color = _e->str(); }
  { auto _e = profile_use_background_image(); _o->profile_use_background_image = _e; }
  { auto _e = utc_offset(); _o->utc_offset = _e; }
  { auto _e = time_zone(); if (_e) _o->time_zone = _e->str(); }
  { auto _e = is_translator(); _o->is_translator = _e; }
  { auto _e = follow_request_sent(); _o->follow_request_sent = _e; }
  { auto _e = showAllInlineMedia(); _o->showAllInlineMedia = _e; }
}

inline flatbuffers::Offset<UserFBS> UserFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const UserFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUserFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<UserFBS> CreateUserFBS(flatbuffers::FlatBufferBuilder &_fbb, const UserFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const UserFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _screen_name = _o->screen_name.empty() ? 0 : _fbb.CreateString(_o->screen_name);
  auto _location = _o->location.empty() ? 0 : _fbb.CreateString(_o->location);
  auto _url = _o->url.empty() ? 0 : _fbb.CreateString(_o->url);
  auto _description = _o->description.empty() ? 0 : _fbb.CreateString(_o->description);
  auto _isProtected = _o->isProtected;
  auto _verified = _o->verified;
  auto _followers_count = _o->followers_count;
  auto _friends_count = _o->friends_count;
  auto _listed_count = _o->listed_count;
  auto _favourites_count = _o->favourites_count;
  auto _statuses_count = _o->statuses_count;
  auto _created_at = _o->created_at.empty() ? 0 : _fbb.CreateString(_o->created_at);
  auto _profile_banner_url = _o->profile_banner_url.empty() ? 0 : _fbb.CreateString(_o->profile_banner_url);
  auto _profile_image_url_https = _o->profile_image_url_https.empty() ? 0 : _fbb.CreateString(_o->profile_image_url_https);
  auto _default_profile = _o->default_profile;
  auto _withheld_in_countries = _o->withheld_in_countries.size() ? _fbb.CreateVectorOfStrings(_o->withheld_in_countries) : 0;
  auto _withheld_scope = _o->withheld_scope.empty() ? 0 : _fbb.CreateString(_o->withheld_scope);
  auto _descriptionURLEntities = _o->descriptionURLEntities.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS>> (_o->descriptionURLEntities.size(), [](size_t i, _VectorArgs *__va) { return CreateURLEntityFBS(*__va->__fbb, __va->__o->descriptionURLEntities[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _geo_enabled = _o->geo_enabled;
  auto _lang = _o->lang.empty() ? 0 : _fbb.CreateString(_o->lang);
  auto _contributors_enabled = _o->contributors_enabled;
  auto _profile_background_color = _o->profile_background_color.empty() ? 0 : _fbb.CreateString(_o->profile_background_color);
  auto _profile_background_image_url = _o->profile_background_image_url.empty() ? 0 : _fbb.CreateString(_o->profile_background_image_url);
  auto _profile_background_image_url_https = _o->profile_background_image_url_https.empty() ? 0 : _fbb.CreateString(_o->profile_background_image_url_https);
  auto _profile_background_tile = _o->profile_background_tile;
  auto _profile_image_url = _o->profile_image_url.empty() ? 0 : _fbb.CreateString(_o->profile_image_url);
  auto _profile_link_color = _o->profile_link_color.empty() ? 0 : _fbb.CreateString(_o->profile_link_color);
  auto _profile_sidebar_border_color = _o->profile_sidebar_border_color.empty() ? 0 : _fbb.CreateString(_o->profile_sidebar_border_color);
  auto _profile_sidebar_fill_color = _o->profile_sidebar_fill_color.empty() ? 0 : _fbb.CreateString(_o->profile_sidebar_fill_color);
  auto _profile_text_color = _o->profile_text_color.empty() ? 0 : _fbb.CreateString(_o->profile_text_color);
  auto _profile_use_background_image = _o->profile_use_background_image;
  auto _utc_offset = _o->utc_offset;
  auto _time_zone = _o->time_zone.empty() ? 0 : _fbb.CreateString(_o->time_zone);
  auto _is_translator = _o->is_translator;
  auto _follow_request_sent = _o->follow_request_sent;
  auto _showAllInlineMedia = _o->showAllInlineMedia;
  return tweetstatusflatbuffers::CreateUserFBS(
      _fbb,
      _id,
      _name,
      _screen_name,
      _location,
      _url,
      _description,
      _isProtected,
      _verified,
      _followers_count,
      _friends_count,
      _listed_count,
      _favourites_count,
      _statuses_count,
      _created_at,
      _profile_banner_url,
      _profile_image_url_https,
      _default_profile,
      _withheld_in_countries,
      _withheld_scope,
      _descriptionURLEntities,
      _geo_enabled,
      _lang,
      _contributors_enabled,
      _profile_background_color,
      _profile_background_image_url,
      _profile_background_image_url_https,
      _profile_background_tile,
      _profile_image_url,
      _profile_link_color,
      _profile_sidebar_border_color,
      _profile_sidebar_fill_color,
      _profile_text_color,
      _profile_use_background_image,
      _utc_offset,
      _time_zone,
      _is_translator,
      _follow_request_sent,
      _showAllInlineMedia);
}

inline const tweetstatusflatbuffers::UserFBS *GetUserFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::UserFBS>(buf);
}

inline const tweetstatusflatbuffers::UserFBS *GetSizePrefixedUserFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::UserFBS>(buf);
}

inline UserFBS *GetMutableUserFBS(void *buf) {
  return flatbuffers::GetMutableRoot<UserFBS>(buf);
}

inline bool VerifyUserFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::UserFBS>(nullptr);
}

inline bool VerifySizePrefixedUserFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::UserFBS>(nullptr);
}

inline void FinishUserFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::UserFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::UserFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::UserFBST> UnPackUserFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::UserFBST>(GetUserFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::UserFBST> UnPackSizePrefixedUserFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::UserFBST>(GetSizePrefixedUserFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_USER_TWEETSTATUSFLATBUFFERS_H_
