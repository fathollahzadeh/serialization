// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXTENDEDENTITIES_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_EXTENDEDENTITIES_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

#include "MediaEntityFBS.h"

namespace tweetstatusflatbuffers {

struct ExtendedEntitiesFBS;
struct ExtendedEntitiesFBSBuilder;
struct ExtendedEntitiesFBST;

struct ExtendedEntitiesFBST : public flatbuffers::NativeTable {
  typedef ExtendedEntitiesFBS TableType;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>> media{};
  ExtendedEntitiesFBST() = default;
  ExtendedEntitiesFBST(const ExtendedEntitiesFBST &o);
  ExtendedEntitiesFBST(ExtendedEntitiesFBST&&) FLATBUFFERS_NOEXCEPT = default;
  ExtendedEntitiesFBST &operator=(ExtendedEntitiesFBST o) FLATBUFFERS_NOEXCEPT;
};

struct ExtendedEntitiesFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExtendedEntitiesFBST NativeTableType;
  typedef ExtendedEntitiesFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MEDIA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *media() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *>(VT_MEDIA);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *mutable_media() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *>(VT_MEDIA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MEDIA) &&
           verifier.VerifyVector(media()) &&
           verifier.VerifyVectorOfTables(media()) &&
           verifier.EndTable();
  }
  ExtendedEntitiesFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ExtendedEntitiesFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ExtendedEntitiesFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedEntitiesFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ExtendedEntitiesFBSBuilder {
  typedef ExtendedEntitiesFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_media(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>>> media) {
    fbb_.AddOffset(ExtendedEntitiesFBS::VT_MEDIA, media);
  }
  explicit ExtendedEntitiesFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ExtendedEntitiesFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExtendedEntitiesFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExtendedEntitiesFBS> CreateExtendedEntitiesFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>>> media = 0) {
  ExtendedEntitiesFBSBuilder builder_(_fbb);
  builder_.add_media(media);
  return builder_.Finish();
}

inline flatbuffers::Offset<ExtendedEntitiesFBS> CreateExtendedEntitiesFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> *media = nullptr) {
  auto media__ = media ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>>(*media) : 0;
  return tweetstatusflatbuffers::CreateExtendedEntitiesFBS(
      _fbb,
      media__);
}

flatbuffers::Offset<ExtendedEntitiesFBS> CreateExtendedEntitiesFBS(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedEntitiesFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ExtendedEntitiesFBST::ExtendedEntitiesFBST(const ExtendedEntitiesFBST &o) {
  media.reserve(o.media.size());
  for (const auto &media_ : o.media) { media.emplace_back((media_) ? new tweetstatusflatbuffers::MediaEntityFBST(*media_) : nullptr); }
}

inline ExtendedEntitiesFBST &ExtendedEntitiesFBST::operator=(ExtendedEntitiesFBST o) FLATBUFFERS_NOEXCEPT {
  std::swap(media, o.media);
  return *this;
}

inline ExtendedEntitiesFBST *ExtendedEntitiesFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ExtendedEntitiesFBST>(new ExtendedEntitiesFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ExtendedEntitiesFBS::UnPackTo(ExtendedEntitiesFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = media(); if (_e) { _o->media.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->media[_i]) { _e->Get(_i)->UnPackTo(_o->media[_i].get(), _resolver); } else { _o->media[_i] = std::unique_ptr<tweetstatusflatbuffers::MediaEntityFBST>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->media.resize(0); } }
}

inline flatbuffers::Offset<ExtendedEntitiesFBS> ExtendedEntitiesFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedEntitiesFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateExtendedEntitiesFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ExtendedEntitiesFBS> CreateExtendedEntitiesFBS(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedEntitiesFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ExtendedEntitiesFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _media = _o->media.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MediaEntityFBS>> (_o->media.size(), [](size_t i, _VectorArgs *__va) { return CreateMediaEntityFBS(*__va->__fbb, __va->__o->media[i].get(), __va->__rehasher); }, &_va ) : 0;
  return tweetstatusflatbuffers::CreateExtendedEntitiesFBS(
      _fbb,
      _media);
}

inline const tweetstatusflatbuffers::ExtendedEntitiesFBS *GetExtendedEntitiesFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::ExtendedEntitiesFBS>(buf);
}

inline const tweetstatusflatbuffers::ExtendedEntitiesFBS *GetSizePrefixedExtendedEntitiesFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::ExtendedEntitiesFBS>(buf);
}

inline ExtendedEntitiesFBS *GetMutableExtendedEntitiesFBS(void *buf) {
  return flatbuffers::GetMutableRoot<ExtendedEntitiesFBS>(buf);
}

inline tweetstatusflatbuffers::ExtendedEntitiesFBS *GetMutableSizePrefixedExtendedEntitiesFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<tweetstatusflatbuffers::ExtendedEntitiesFBS>(buf);
}

inline bool VerifyExtendedEntitiesFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::ExtendedEntitiesFBS>(nullptr);
}

inline bool VerifySizePrefixedExtendedEntitiesFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::ExtendedEntitiesFBS>(nullptr);
}

inline void FinishExtendedEntitiesFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedEntitiesFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedExtendedEntitiesFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedEntitiesFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::ExtendedEntitiesFBST> UnPackExtendedEntitiesFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::ExtendedEntitiesFBST>(GetExtendedEntitiesFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::ExtendedEntitiesFBST> UnPackSizePrefixedExtendedEntitiesFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::ExtendedEntitiesFBST>(GetSizePrefixedExtendedEntitiesFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_EXTENDEDENTITIES_TWEETSTATUSFLATBUFFERS_H_
