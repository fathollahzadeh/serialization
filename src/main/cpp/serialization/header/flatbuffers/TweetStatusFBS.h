// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TWEETSTATUS_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_TWEETSTATUS_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

#include "CoordinatesFBS.h"
#include "EntitiesFBS.h"
#include "ExtendedTweetFBS.h"
#include "MatchingRulesEntityFBS.h"
#include "PlaceFBS.h"
#include "UserFBS.h"

namespace tweetstatusflatbuffers {

struct MapStringBool;
struct MapStringBoolBuilder;
struct MapStringBoolT;

struct TweetStatusFBS;
struct TweetStatusFBSBuilder;
struct TweetStatusFBST;

struct MapStringBoolT : public flatbuffers::NativeTable {
  typedef MapStringBool TableType;
  std::string key{};
  bool value = false;
};

struct MapStringBool FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MapStringBoolT NativeTableType;
  typedef MapStringBoolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  flatbuffers::String *mutable_key() {
    return GetPointer<flatbuffers::String *>(VT_KEY);
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value = 0) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
  MapStringBoolT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MapStringBoolT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MapStringBool> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MapStringBoolT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MapStringBoolBuilder {
  typedef MapStringBool Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(MapStringBool::VT_KEY, key);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(MapStringBool::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit MapStringBoolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MapStringBool> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MapStringBool>(end);
    return o;
  }
};

inline flatbuffers::Offset<MapStringBool> CreateMapStringBool(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    bool value = false) {
  MapStringBoolBuilder builder_(_fbb);
  builder_.add_key(key);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<MapStringBool> CreateMapStringBoolDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    bool value = false) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return tweetstatusflatbuffers::CreateMapStringBool(
      _fbb,
      key__,
      value);
}

flatbuffers::Offset<MapStringBool> CreateMapStringBool(flatbuffers::FlatBufferBuilder &_fbb, const MapStringBoolT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TweetStatusFBST : public flatbuffers::NativeTable {
  typedef TweetStatusFBS TableType;
  std::string created_at{};
  int64_t id = 0;
  std::string id_str{};
  std::string text{};
  std::string source{};
  bool truncated = false;
  int64_t in_reply_to_status_id = 0;
  int64_t in_reply_to_user_id = 0;
  std::string in_reply_to_screen_name{};
  std::unique_ptr<tweetstatusflatbuffers::UserFBST> user{};
  std::unique_ptr<tweetstatusflatbuffers::CoordinatesFBST> coordinates{};
  std::unique_ptr<tweetstatusflatbuffers::PlaceFBST> place{};
  int64_t quoted_status_id = 0;
  bool is_quote_status = false;
  std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST> quoted_status{};
  std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST> retweeted_status{};
  int32_t quote_count = 0;
  int32_t reply_count = 0;
  int32_t retweet_count = 0;
  int32_t favorite_count = 0;
  std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST> entities{};
  std::unique_ptr<tweetstatusflatbuffers::ExtendedTweetFBST> extended_tweet{};
  bool favorited = false;
  bool retweeted = false;
  bool possibly_sensitive = false;
  std::string filter_level{};
  std::string lang{};
  std::vector<std::unique_ptr<tweetstatusflatbuffers::MatchingRulesEntityFBST>> matching_rules{};
  int64_t current_user_retweet = 0;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::MapStringBoolT>> scopes{};
  bool withheld_copyright = false;
  std::vector<std::string> withheld_in_countries{};
  std::string withheld_scope{};
  std::vector<int32_t> display_text_range{};
  TweetStatusFBST() = default;
  TweetStatusFBST(const TweetStatusFBST &o);
  TweetStatusFBST(TweetStatusFBST&&) FLATBUFFERS_NOEXCEPT = default;
  TweetStatusFBST &operator=(TweetStatusFBST o) FLATBUFFERS_NOEXCEPT;
};

struct TweetStatusFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TweetStatusFBST NativeTableType;
  typedef TweetStatusFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CREATED_AT = 4,
    VT_ID = 6,
    VT_ID_STR = 8,
    VT_TEXT = 10,
    VT_SOURCE = 12,
    VT_TRUNCATED = 14,
    VT_IN_REPLY_TO_STATUS_ID = 16,
    VT_IN_REPLY_TO_USER_ID = 18,
    VT_IN_REPLY_TO_SCREEN_NAME = 20,
    VT_USER = 22,
    VT_COORDINATES = 24,
    VT_PLACE = 26,
    VT_QUOTED_STATUS_ID = 28,
    VT_IS_QUOTE_STATUS = 30,
    VT_QUOTED_STATUS = 32,
    VT_RETWEETED_STATUS = 34,
    VT_QUOTE_COUNT = 36,
    VT_REPLY_COUNT = 38,
    VT_RETWEET_COUNT = 40,
    VT_FAVORITE_COUNT = 42,
    VT_ENTITIES = 44,
    VT_EXTENDED_TWEET = 46,
    VT_FAVORITED = 48,
    VT_RETWEETED = 50,
    VT_POSSIBLY_SENSITIVE = 52,
    VT_FILTER_LEVEL = 54,
    VT_LANG = 56,
    VT_MATCHING_RULES = 58,
    VT_CURRENT_USER_RETWEET = 60,
    VT_SCOPES = 62,
    VT_WITHHELD_COPYRIGHT = 64,
    VT_WITHHELD_IN_COUNTRIES = 66,
    VT_WITHHELD_SCOPE = 68,
    VT_DISPLAY_TEXT_RANGE = 70
  };
  const flatbuffers::String *created_at() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATED_AT);
  }
  flatbuffers::String *mutable_created_at() {
    return GetPointer<flatbuffers::String *>(VT_CREATED_AT);
  }
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  bool mutate_id(int64_t _id = 0) {
    return SetField<int64_t>(VT_ID, _id, 0);
  }
  const flatbuffers::String *id_str() const {
    return GetPointer<const flatbuffers::String *>(VT_ID_STR);
  }
  flatbuffers::String *mutable_id_str() {
    return GetPointer<flatbuffers::String *>(VT_ID_STR);
  }
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  flatbuffers::String *mutable_text() {
    return GetPointer<flatbuffers::String *>(VT_TEXT);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  flatbuffers::String *mutable_source() {
    return GetPointer<flatbuffers::String *>(VT_SOURCE);
  }
  bool truncated() const {
    return GetField<uint8_t>(VT_TRUNCATED, 0) != 0;
  }
  bool mutate_truncated(bool _truncated = 0) {
    return SetField<uint8_t>(VT_TRUNCATED, static_cast<uint8_t>(_truncated), 0);
  }
  int64_t in_reply_to_status_id() const {
    return GetField<int64_t>(VT_IN_REPLY_TO_STATUS_ID, 0);
  }
  bool mutate_in_reply_to_status_id(int64_t _in_reply_to_status_id = 0) {
    return SetField<int64_t>(VT_IN_REPLY_TO_STATUS_ID, _in_reply_to_status_id, 0);
  }
  int64_t in_reply_to_user_id() const {
    return GetField<int64_t>(VT_IN_REPLY_TO_USER_ID, 0);
  }
  bool mutate_in_reply_to_user_id(int64_t _in_reply_to_user_id = 0) {
    return SetField<int64_t>(VT_IN_REPLY_TO_USER_ID, _in_reply_to_user_id, 0);
  }
  const flatbuffers::String *in_reply_to_screen_name() const {
    return GetPointer<const flatbuffers::String *>(VT_IN_REPLY_TO_SCREEN_NAME);
  }
  flatbuffers::String *mutable_in_reply_to_screen_name() {
    return GetPointer<flatbuffers::String *>(VT_IN_REPLY_TO_SCREEN_NAME);
  }
  const tweetstatusflatbuffers::UserFBS *user() const {
    return GetPointer<const tweetstatusflatbuffers::UserFBS *>(VT_USER);
  }
  tweetstatusflatbuffers::UserFBS *mutable_user() {
    return GetPointer<tweetstatusflatbuffers::UserFBS *>(VT_USER);
  }
  const tweetstatusflatbuffers::CoordinatesFBS *coordinates() const {
    return GetPointer<const tweetstatusflatbuffers::CoordinatesFBS *>(VT_COORDINATES);
  }
  tweetstatusflatbuffers::CoordinatesFBS *mutable_coordinates() {
    return GetPointer<tweetstatusflatbuffers::CoordinatesFBS *>(VT_COORDINATES);
  }
  const tweetstatusflatbuffers::PlaceFBS *place() const {
    return GetPointer<const tweetstatusflatbuffers::PlaceFBS *>(VT_PLACE);
  }
  tweetstatusflatbuffers::PlaceFBS *mutable_place() {
    return GetPointer<tweetstatusflatbuffers::PlaceFBS *>(VT_PLACE);
  }
  int64_t quoted_status_id() const {
    return GetField<int64_t>(VT_QUOTED_STATUS_ID, 0);
  }
  bool mutate_quoted_status_id(int64_t _quoted_status_id = 0) {
    return SetField<int64_t>(VT_QUOTED_STATUS_ID, _quoted_status_id, 0);
  }
  bool is_quote_status() const {
    return GetField<uint8_t>(VT_IS_QUOTE_STATUS, 0) != 0;
  }
  bool mutate_is_quote_status(bool _is_quote_status = 0) {
    return SetField<uint8_t>(VT_IS_QUOTE_STATUS, static_cast<uint8_t>(_is_quote_status), 0);
  }
  const tweetstatusflatbuffers::TweetStatusFBS *quoted_status() const {
    return GetPointer<const tweetstatusflatbuffers::TweetStatusFBS *>(VT_QUOTED_STATUS);
  }
  tweetstatusflatbuffers::TweetStatusFBS *mutable_quoted_status() {
    return GetPointer<tweetstatusflatbuffers::TweetStatusFBS *>(VT_QUOTED_STATUS);
  }
  const tweetstatusflatbuffers::TweetStatusFBS *retweeted_status() const {
    return GetPointer<const tweetstatusflatbuffers::TweetStatusFBS *>(VT_RETWEETED_STATUS);
  }
  tweetstatusflatbuffers::TweetStatusFBS *mutable_retweeted_status() {
    return GetPointer<tweetstatusflatbuffers::TweetStatusFBS *>(VT_RETWEETED_STATUS);
  }
  int32_t quote_count() const {
    return GetField<int32_t>(VT_QUOTE_COUNT, 0);
  }
  bool mutate_quote_count(int32_t _quote_count = 0) {
    return SetField<int32_t>(VT_QUOTE_COUNT, _quote_count, 0);
  }
  int32_t reply_count() const {
    return GetField<int32_t>(VT_REPLY_COUNT, 0);
  }
  bool mutate_reply_count(int32_t _reply_count = 0) {
    return SetField<int32_t>(VT_REPLY_COUNT, _reply_count, 0);
  }
  int32_t retweet_count() const {
    return GetField<int32_t>(VT_RETWEET_COUNT, 0);
  }
  bool mutate_retweet_count(int32_t _retweet_count = 0) {
    return SetField<int32_t>(VT_RETWEET_COUNT, _retweet_count, 0);
  }
  int32_t favorite_count() const {
    return GetField<int32_t>(VT_FAVORITE_COUNT, 0);
  }
  bool mutate_favorite_count(int32_t _favorite_count = 0) {
    return SetField<int32_t>(VT_FAVORITE_COUNT, _favorite_count, 0);
  }
  const tweetstatusflatbuffers::EntitiesFBS *entities() const {
    return GetPointer<const tweetstatusflatbuffers::EntitiesFBS *>(VT_ENTITIES);
  }
  tweetstatusflatbuffers::EntitiesFBS *mutable_entities() {
    return GetPointer<tweetstatusflatbuffers::EntitiesFBS *>(VT_ENTITIES);
  }
  const tweetstatusflatbuffers::ExtendedTweetFBS *extended_tweet() const {
    return GetPointer<const tweetstatusflatbuffers::ExtendedTweetFBS *>(VT_EXTENDED_TWEET);
  }
  tweetstatusflatbuffers::ExtendedTweetFBS *mutable_extended_tweet() {
    return GetPointer<tweetstatusflatbuffers::ExtendedTweetFBS *>(VT_EXTENDED_TWEET);
  }
  bool favorited() const {
    return GetField<uint8_t>(VT_FAVORITED, 0) != 0;
  }
  bool mutate_favorited(bool _favorited = 0) {
    return SetField<uint8_t>(VT_FAVORITED, static_cast<uint8_t>(_favorited), 0);
  }
  bool retweeted() const {
    return GetField<uint8_t>(VT_RETWEETED, 0) != 0;
  }
  bool mutate_retweeted(bool _retweeted = 0) {
    return SetField<uint8_t>(VT_RETWEETED, static_cast<uint8_t>(_retweeted), 0);
  }
  bool possibly_sensitive() const {
    return GetField<uint8_t>(VT_POSSIBLY_SENSITIVE, 0) != 0;
  }
  bool mutate_possibly_sensitive(bool _possibly_sensitive = 0) {
    return SetField<uint8_t>(VT_POSSIBLY_SENSITIVE, static_cast<uint8_t>(_possibly_sensitive), 0);
  }
  const flatbuffers::String *filter_level() const {
    return GetPointer<const flatbuffers::String *>(VT_FILTER_LEVEL);
  }
  flatbuffers::String *mutable_filter_level() {
    return GetPointer<flatbuffers::String *>(VT_FILTER_LEVEL);
  }
  const flatbuffers::String *lang() const {
    return GetPointer<const flatbuffers::String *>(VT_LANG);
  }
  flatbuffers::String *mutable_lang() {
    return GetPointer<flatbuffers::String *>(VT_LANG);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>> *matching_rules() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>> *>(VT_MATCHING_RULES);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>> *mutable_matching_rules() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>> *>(VT_MATCHING_RULES);
  }
  int64_t current_user_retweet() const {
    return GetField<int64_t>(VT_CURRENT_USER_RETWEET, 0);
  }
  bool mutate_current_user_retweet(int64_t _current_user_retweet = 0) {
    return SetField<int64_t>(VT_CURRENT_USER_RETWEET, _current_user_retweet, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>> *scopes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>> *>(VT_SCOPES);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>> *mutable_scopes() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>> *>(VT_SCOPES);
  }
  bool withheld_copyright() const {
    return GetField<uint8_t>(VT_WITHHELD_COPYRIGHT, 0) != 0;
  }
  bool mutate_withheld_copyright(bool _withheld_copyright = 0) {
    return SetField<uint8_t>(VT_WITHHELD_COPYRIGHT, static_cast<uint8_t>(_withheld_copyright), 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *withheld_in_countries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WITHHELD_IN_COUNTRIES);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_withheld_in_countries() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WITHHELD_IN_COUNTRIES);
  }
  const flatbuffers::String *withheld_scope() const {
    return GetPointer<const flatbuffers::String *>(VT_WITHHELD_SCOPE);
  }
  flatbuffers::String *mutable_withheld_scope() {
    return GetPointer<flatbuffers::String *>(VT_WITHHELD_SCOPE);
  }
  const flatbuffers::Vector<int32_t> *display_text_range() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DISPLAY_TEXT_RANGE);
  }
  flatbuffers::Vector<int32_t> *mutable_display_text_range() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_DISPLAY_TEXT_RANGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CREATED_AT) &&
           verifier.VerifyString(created_at()) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_ID_STR) &&
           verifier.VerifyString(id_str()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<uint8_t>(verifier, VT_TRUNCATED, 1) &&
           VerifyField<int64_t>(verifier, VT_IN_REPLY_TO_STATUS_ID, 8) &&
           VerifyField<int64_t>(verifier, VT_IN_REPLY_TO_USER_ID, 8) &&
           VerifyOffset(verifier, VT_IN_REPLY_TO_SCREEN_NAME) &&
           verifier.VerifyString(in_reply_to_screen_name()) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyOffset(verifier, VT_COORDINATES) &&
           verifier.VerifyTable(coordinates()) &&
           VerifyOffset(verifier, VT_PLACE) &&
           verifier.VerifyTable(place()) &&
           VerifyField<int64_t>(verifier, VT_QUOTED_STATUS_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_IS_QUOTE_STATUS, 1) &&
           VerifyOffset(verifier, VT_QUOTED_STATUS) &&
           verifier.VerifyTable(quoted_status()) &&
           VerifyOffset(verifier, VT_RETWEETED_STATUS) &&
           verifier.VerifyTable(retweeted_status()) &&
           VerifyField<int32_t>(verifier, VT_QUOTE_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_REPLY_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_RETWEET_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_FAVORITE_COUNT, 4) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyTable(entities()) &&
           VerifyOffset(verifier, VT_EXTENDED_TWEET) &&
           verifier.VerifyTable(extended_tweet()) &&
           VerifyField<uint8_t>(verifier, VT_FAVORITED, 1) &&
           VerifyField<uint8_t>(verifier, VT_RETWEETED, 1) &&
           VerifyField<uint8_t>(verifier, VT_POSSIBLY_SENSITIVE, 1) &&
           VerifyOffset(verifier, VT_FILTER_LEVEL) &&
           verifier.VerifyString(filter_level()) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyOffset(verifier, VT_MATCHING_RULES) &&
           verifier.VerifyVector(matching_rules()) &&
           verifier.VerifyVectorOfTables(matching_rules()) &&
           VerifyField<int64_t>(verifier, VT_CURRENT_USER_RETWEET, 8) &&
           VerifyOffset(verifier, VT_SCOPES) &&
           verifier.VerifyVector(scopes()) &&
           verifier.VerifyVectorOfTables(scopes()) &&
           VerifyField<uint8_t>(verifier, VT_WITHHELD_COPYRIGHT, 1) &&
           VerifyOffset(verifier, VT_WITHHELD_IN_COUNTRIES) &&
           verifier.VerifyVector(withheld_in_countries()) &&
           verifier.VerifyVectorOfStrings(withheld_in_countries()) &&
           VerifyOffset(verifier, VT_WITHHELD_SCOPE) &&
           verifier.VerifyString(withheld_scope()) &&
           VerifyOffset(verifier, VT_DISPLAY_TEXT_RANGE) &&
           verifier.VerifyVector(display_text_range()) &&
           verifier.EndTable();
  }
  TweetStatusFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TweetStatusFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TweetStatusFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TweetStatusFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TweetStatusFBSBuilder {
  typedef TweetStatusFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_created_at(flatbuffers::Offset<flatbuffers::String> created_at) {
    fbb_.AddOffset(TweetStatusFBS::VT_CREATED_AT, created_at);
  }
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(TweetStatusFBS::VT_ID, id, 0);
  }
  void add_id_str(flatbuffers::Offset<flatbuffers::String> id_str) {
    fbb_.AddOffset(TweetStatusFBS::VT_ID_STR, id_str);
  }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(TweetStatusFBS::VT_TEXT, text);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(TweetStatusFBS::VT_SOURCE, source);
  }
  void add_truncated(bool truncated) {
    fbb_.AddElement<uint8_t>(TweetStatusFBS::VT_TRUNCATED, static_cast<uint8_t>(truncated), 0);
  }
  void add_in_reply_to_status_id(int64_t in_reply_to_status_id) {
    fbb_.AddElement<int64_t>(TweetStatusFBS::VT_IN_REPLY_TO_STATUS_ID, in_reply_to_status_id, 0);
  }
  void add_in_reply_to_user_id(int64_t in_reply_to_user_id) {
    fbb_.AddElement<int64_t>(TweetStatusFBS::VT_IN_REPLY_TO_USER_ID, in_reply_to_user_id, 0);
  }
  void add_in_reply_to_screen_name(flatbuffers::Offset<flatbuffers::String> in_reply_to_screen_name) {
    fbb_.AddOffset(TweetStatusFBS::VT_IN_REPLY_TO_SCREEN_NAME, in_reply_to_screen_name);
  }
  void add_user(flatbuffers::Offset<tweetstatusflatbuffers::UserFBS> user) {
    fbb_.AddOffset(TweetStatusFBS::VT_USER, user);
  }
  void add_coordinates(flatbuffers::Offset<tweetstatusflatbuffers::CoordinatesFBS> coordinates) {
    fbb_.AddOffset(TweetStatusFBS::VT_COORDINATES, coordinates);
  }
  void add_place(flatbuffers::Offset<tweetstatusflatbuffers::PlaceFBS> place) {
    fbb_.AddOffset(TweetStatusFBS::VT_PLACE, place);
  }
  void add_quoted_status_id(int64_t quoted_status_id) {
    fbb_.AddElement<int64_t>(TweetStatusFBS::VT_QUOTED_STATUS_ID, quoted_status_id, 0);
  }
  void add_is_quote_status(bool is_quote_status) {
    fbb_.AddElement<uint8_t>(TweetStatusFBS::VT_IS_QUOTE_STATUS, static_cast<uint8_t>(is_quote_status), 0);
  }
  void add_quoted_status(flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> quoted_status) {
    fbb_.AddOffset(TweetStatusFBS::VT_QUOTED_STATUS, quoted_status);
  }
  void add_retweeted_status(flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> retweeted_status) {
    fbb_.AddOffset(TweetStatusFBS::VT_RETWEETED_STATUS, retweeted_status);
  }
  void add_quote_count(int32_t quote_count) {
    fbb_.AddElement<int32_t>(TweetStatusFBS::VT_QUOTE_COUNT, quote_count, 0);
  }
  void add_reply_count(int32_t reply_count) {
    fbb_.AddElement<int32_t>(TweetStatusFBS::VT_REPLY_COUNT, reply_count, 0);
  }
  void add_retweet_count(int32_t retweet_count) {
    fbb_.AddElement<int32_t>(TweetStatusFBS::VT_RETWEET_COUNT, retweet_count, 0);
  }
  void add_favorite_count(int32_t favorite_count) {
    fbb_.AddElement<int32_t>(TweetStatusFBS::VT_FAVORITE_COUNT, favorite_count, 0);
  }
  void add_entities(flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> entities) {
    fbb_.AddOffset(TweetStatusFBS::VT_ENTITIES, entities);
  }
  void add_extended_tweet(flatbuffers::Offset<tweetstatusflatbuffers::ExtendedTweetFBS> extended_tweet) {
    fbb_.AddOffset(TweetStatusFBS::VT_EXTENDED_TWEET, extended_tweet);
  }
  void add_favorited(bool favorited) {
    fbb_.AddElement<uint8_t>(TweetStatusFBS::VT_FAVORITED, static_cast<uint8_t>(favorited), 0);
  }
  void add_retweeted(bool retweeted) {
    fbb_.AddElement<uint8_t>(TweetStatusFBS::VT_RETWEETED, static_cast<uint8_t>(retweeted), 0);
  }
  void add_possibly_sensitive(bool possibly_sensitive) {
    fbb_.AddElement<uint8_t>(TweetStatusFBS::VT_POSSIBLY_SENSITIVE, static_cast<uint8_t>(possibly_sensitive), 0);
  }
  void add_filter_level(flatbuffers::Offset<flatbuffers::String> filter_level) {
    fbb_.AddOffset(TweetStatusFBS::VT_FILTER_LEVEL, filter_level);
  }
  void add_lang(flatbuffers::Offset<flatbuffers::String> lang) {
    fbb_.AddOffset(TweetStatusFBS::VT_LANG, lang);
  }
  void add_matching_rules(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>>> matching_rules) {
    fbb_.AddOffset(TweetStatusFBS::VT_MATCHING_RULES, matching_rules);
  }
  void add_current_user_retweet(int64_t current_user_retweet) {
    fbb_.AddElement<int64_t>(TweetStatusFBS::VT_CURRENT_USER_RETWEET, current_user_retweet, 0);
  }
  void add_scopes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>>> scopes) {
    fbb_.AddOffset(TweetStatusFBS::VT_SCOPES, scopes);
  }
  void add_withheld_copyright(bool withheld_copyright) {
    fbb_.AddElement<uint8_t>(TweetStatusFBS::VT_WITHHELD_COPYRIGHT, static_cast<uint8_t>(withheld_copyright), 0);
  }
  void add_withheld_in_countries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> withheld_in_countries) {
    fbb_.AddOffset(TweetStatusFBS::VT_WITHHELD_IN_COUNTRIES, withheld_in_countries);
  }
  void add_withheld_scope(flatbuffers::Offset<flatbuffers::String> withheld_scope) {
    fbb_.AddOffset(TweetStatusFBS::VT_WITHHELD_SCOPE, withheld_scope);
  }
  void add_display_text_range(flatbuffers::Offset<flatbuffers::Vector<int32_t>> display_text_range) {
    fbb_.AddOffset(TweetStatusFBS::VT_DISPLAY_TEXT_RANGE, display_text_range);
  }
  explicit TweetStatusFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TweetStatusFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TweetStatusFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<TweetStatusFBS> CreateTweetStatusFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> created_at = 0,
    int64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> id_str = 0,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    bool truncated = false,
    int64_t in_reply_to_status_id = 0,
    int64_t in_reply_to_user_id = 0,
    flatbuffers::Offset<flatbuffers::String> in_reply_to_screen_name = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::UserFBS> user = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::CoordinatesFBS> coordinates = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::PlaceFBS> place = 0,
    int64_t quoted_status_id = 0,
    bool is_quote_status = false,
    flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> quoted_status = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> retweeted_status = 0,
    int32_t quote_count = 0,
    int32_t reply_count = 0,
    int32_t retweet_count = 0,
    int32_t favorite_count = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> entities = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedTweetFBS> extended_tweet = 0,
    bool favorited = false,
    bool retweeted = false,
    bool possibly_sensitive = false,
    flatbuffers::Offset<flatbuffers::String> filter_level = 0,
    flatbuffers::Offset<flatbuffers::String> lang = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>>> matching_rules = 0,
    int64_t current_user_retweet = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>>> scopes = 0,
    bool withheld_copyright = false,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> withheld_in_countries = 0,
    flatbuffers::Offset<flatbuffers::String> withheld_scope = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> display_text_range = 0) {
  TweetStatusFBSBuilder builder_(_fbb);
  builder_.add_current_user_retweet(current_user_retweet);
  builder_.add_quoted_status_id(quoted_status_id);
  builder_.add_in_reply_to_user_id(in_reply_to_user_id);
  builder_.add_in_reply_to_status_id(in_reply_to_status_id);
  builder_.add_id(id);
  builder_.add_display_text_range(display_text_range);
  builder_.add_withheld_scope(withheld_scope);
  builder_.add_withheld_in_countries(withheld_in_countries);
  builder_.add_scopes(scopes);
  builder_.add_matching_rules(matching_rules);
  builder_.add_lang(lang);
  builder_.add_filter_level(filter_level);
  builder_.add_extended_tweet(extended_tweet);
  builder_.add_entities(entities);
  builder_.add_favorite_count(favorite_count);
  builder_.add_retweet_count(retweet_count);
  builder_.add_reply_count(reply_count);
  builder_.add_quote_count(quote_count);
  builder_.add_retweeted_status(retweeted_status);
  builder_.add_quoted_status(quoted_status);
  builder_.add_place(place);
  builder_.add_coordinates(coordinates);
  builder_.add_user(user);
  builder_.add_in_reply_to_screen_name(in_reply_to_screen_name);
  builder_.add_source(source);
  builder_.add_text(text);
  builder_.add_id_str(id_str);
  builder_.add_created_at(created_at);
  builder_.add_withheld_copyright(withheld_copyright);
  builder_.add_possibly_sensitive(possibly_sensitive);
  builder_.add_retweeted(retweeted);
  builder_.add_favorited(favorited);
  builder_.add_is_quote_status(is_quote_status);
  builder_.add_truncated(truncated);
  return builder_.Finish();
}

inline flatbuffers::Offset<TweetStatusFBS> CreateTweetStatusFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *created_at = nullptr,
    int64_t id = 0,
    const char *id_str = nullptr,
    const char *text = nullptr,
    const char *source = nullptr,
    bool truncated = false,
    int64_t in_reply_to_status_id = 0,
    int64_t in_reply_to_user_id = 0,
    const char *in_reply_to_screen_name = nullptr,
    flatbuffers::Offset<tweetstatusflatbuffers::UserFBS> user = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::CoordinatesFBS> coordinates = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::PlaceFBS> place = 0,
    int64_t quoted_status_id = 0,
    bool is_quote_status = false,
    flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> quoted_status = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> retweeted_status = 0,
    int32_t quote_count = 0,
    int32_t reply_count = 0,
    int32_t retweet_count = 0,
    int32_t favorite_count = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> entities = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedTweetFBS> extended_tweet = 0,
    bool favorited = false,
    bool retweeted = false,
    bool possibly_sensitive = false,
    const char *filter_level = nullptr,
    const char *lang = nullptr,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>> *matching_rules = nullptr,
    int64_t current_user_retweet = 0,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>> *scopes = nullptr,
    bool withheld_copyright = false,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *withheld_in_countries = nullptr,
    const char *withheld_scope = nullptr,
    const std::vector<int32_t> *display_text_range = nullptr) {
  auto created_at__ = created_at ? _fbb.CreateString(created_at) : 0;
  auto id_str__ = id_str ? _fbb.CreateString(id_str) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto in_reply_to_screen_name__ = in_reply_to_screen_name ? _fbb.CreateString(in_reply_to_screen_name) : 0;
  auto filter_level__ = filter_level ? _fbb.CreateString(filter_level) : 0;
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto matching_rules__ = matching_rules ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>>(*matching_rules) : 0;
  auto scopes__ = scopes ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>>(*scopes) : 0;
  auto withheld_in_countries__ = withheld_in_countries ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*withheld_in_countries) : 0;
  auto withheld_scope__ = withheld_scope ? _fbb.CreateString(withheld_scope) : 0;
  auto display_text_range__ = display_text_range ? _fbb.CreateVector<int32_t>(*display_text_range) : 0;
  return tweetstatusflatbuffers::CreateTweetStatusFBS(
      _fbb,
      created_at__,
      id,
      id_str__,
      text__,
      source__,
      truncated,
      in_reply_to_status_id,
      in_reply_to_user_id,
      in_reply_to_screen_name__,
      user,
      coordinates,
      place,
      quoted_status_id,
      is_quote_status,
      quoted_status,
      retweeted_status,
      quote_count,
      reply_count,
      retweet_count,
      favorite_count,
      entities,
      extended_tweet,
      favorited,
      retweeted,
      possibly_sensitive,
      filter_level__,
      lang__,
      matching_rules__,
      current_user_retweet,
      scopes__,
      withheld_copyright,
      withheld_in_countries__,
      withheld_scope__,
      display_text_range__);
}

flatbuffers::Offset<TweetStatusFBS> CreateTweetStatusFBS(flatbuffers::FlatBufferBuilder &_fbb, const TweetStatusFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MapStringBoolT *MapStringBool::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MapStringBoolT>(new MapStringBoolT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MapStringBool::UnPackTo(MapStringBoolT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key(); if (_e) _o->key = _e->str(); }
  { auto _e = value(); _o->value = _e; }
}

inline flatbuffers::Offset<MapStringBool> MapStringBool::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MapStringBoolT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMapStringBool(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MapStringBool> CreateMapStringBool(flatbuffers::FlatBufferBuilder &_fbb, const MapStringBoolT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MapStringBoolT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key = _o->key.empty() ? 0 : _fbb.CreateString(_o->key);
  auto _value = _o->value;
  return tweetstatusflatbuffers::CreateMapStringBool(
      _fbb,
      _key,
      _value);
}

inline TweetStatusFBST::TweetStatusFBST(const TweetStatusFBST &o)
      : created_at(o.created_at),
        id(o.id),
        id_str(o.id_str),
        text(o.text),
        source(o.source),
        truncated(o.truncated),
        in_reply_to_status_id(o.in_reply_to_status_id),
        in_reply_to_user_id(o.in_reply_to_user_id),
        in_reply_to_screen_name(o.in_reply_to_screen_name),
        user((o.user) ? new tweetstatusflatbuffers::UserFBST(*o.user) : nullptr),
        coordinates((o.coordinates) ? new tweetstatusflatbuffers::CoordinatesFBST(*o.coordinates) : nullptr),
        place((o.place) ? new tweetstatusflatbuffers::PlaceFBST(*o.place) : nullptr),
        quoted_status_id(o.quoted_status_id),
        is_quote_status(o.is_quote_status),
        quoted_status((o.quoted_status) ? new tweetstatusflatbuffers::TweetStatusFBST(*o.quoted_status) : nullptr),
        retweeted_status((o.retweeted_status) ? new tweetstatusflatbuffers::TweetStatusFBST(*o.retweeted_status) : nullptr),
        quote_count(o.quote_count),
        reply_count(o.reply_count),
        retweet_count(o.retweet_count),
        favorite_count(o.favorite_count),
        entities((o.entities) ? new tweetstatusflatbuffers::EntitiesFBST(*o.entities) : nullptr),
        extended_tweet((o.extended_tweet) ? new tweetstatusflatbuffers::ExtendedTweetFBST(*o.extended_tweet) : nullptr),
        favorited(o.favorited),
        retweeted(o.retweeted),
        possibly_sensitive(o.possibly_sensitive),
        filter_level(o.filter_level),
        lang(o.lang),
        current_user_retweet(o.current_user_retweet),
        withheld_copyright(o.withheld_copyright),
        withheld_in_countries(o.withheld_in_countries),
        withheld_scope(o.withheld_scope),
        display_text_range(o.display_text_range) {
  matching_rules.reserve(o.matching_rules.size());
  for (const auto &matching_rules_ : o.matching_rules) { matching_rules.emplace_back((matching_rules_) ? new tweetstatusflatbuffers::MatchingRulesEntityFBST(*matching_rules_) : nullptr); }
  scopes.reserve(o.scopes.size());
  for (const auto &scopes_ : o.scopes) { scopes.emplace_back((scopes_) ? new tweetstatusflatbuffers::MapStringBoolT(*scopes_) : nullptr); }
}

inline TweetStatusFBST &TweetStatusFBST::operator=(TweetStatusFBST o) FLATBUFFERS_NOEXCEPT {
  std::swap(created_at, o.created_at);
  std::swap(id, o.id);
  std::swap(id_str, o.id_str);
  std::swap(text, o.text);
  std::swap(source, o.source);
  std::swap(truncated, o.truncated);
  std::swap(in_reply_to_status_id, o.in_reply_to_status_id);
  std::swap(in_reply_to_user_id, o.in_reply_to_user_id);
  std::swap(in_reply_to_screen_name, o.in_reply_to_screen_name);
  std::swap(user, o.user);
  std::swap(coordinates, o.coordinates);
  std::swap(place, o.place);
  std::swap(quoted_status_id, o.quoted_status_id);
  std::swap(is_quote_status, o.is_quote_status);
  std::swap(quoted_status, o.quoted_status);
  std::swap(retweeted_status, o.retweeted_status);
  std::swap(quote_count, o.quote_count);
  std::swap(reply_count, o.reply_count);
  std::swap(retweet_count, o.retweet_count);
  std::swap(favorite_count, o.favorite_count);
  std::swap(entities, o.entities);
  std::swap(extended_tweet, o.extended_tweet);
  std::swap(favorited, o.favorited);
  std::swap(retweeted, o.retweeted);
  std::swap(possibly_sensitive, o.possibly_sensitive);
  std::swap(filter_level, o.filter_level);
  std::swap(lang, o.lang);
  std::swap(matching_rules, o.matching_rules);
  std::swap(current_user_retweet, o.current_user_retweet);
  std::swap(scopes, o.scopes);
  std::swap(withheld_copyright, o.withheld_copyright);
  std::swap(withheld_in_countries, o.withheld_in_countries);
  std::swap(withheld_scope, o.withheld_scope);
  std::swap(display_text_range, o.display_text_range);
  return *this;
}

inline TweetStatusFBST *TweetStatusFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TweetStatusFBST>(new TweetStatusFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TweetStatusFBS::UnPackTo(TweetStatusFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = created_at(); if (_e) _o->created_at = _e->str(); }
  { auto _e = id(); _o->id = _e; }
  { auto _e = id_str(); if (_e) _o->id_str = _e->str(); }
  { auto _e = text(); if (_e) _o->text = _e->str(); }
  { auto _e = source(); if (_e) _o->source = _e->str(); }
  { auto _e = truncated(); _o->truncated = _e; }
  { auto _e = in_reply_to_status_id(); _o->in_reply_to_status_id = _e; }
  { auto _e = in_reply_to_user_id(); _o->in_reply_to_user_id = _e; }
  { auto _e = in_reply_to_screen_name(); if (_e) _o->in_reply_to_screen_name = _e->str(); }
  { auto _e = user(); if (_e) { if(_o->user) { _e->UnPackTo(_o->user.get(), _resolver); } else { _o->user = std::unique_ptr<tweetstatusflatbuffers::UserFBST>(_e->UnPack(_resolver)); } } else if (_o->user) { _o->user.reset(); } }
  { auto _e = coordinates(); if (_e) { if(_o->coordinates) { _e->UnPackTo(_o->coordinates.get(), _resolver); } else { _o->coordinates = std::unique_ptr<tweetstatusflatbuffers::CoordinatesFBST>(_e->UnPack(_resolver)); } } else if (_o->coordinates) { _o->coordinates.reset(); } }
  { auto _e = place(); if (_e) { if(_o->place) { _e->UnPackTo(_o->place.get(), _resolver); } else { _o->place = std::unique_ptr<tweetstatusflatbuffers::PlaceFBST>(_e->UnPack(_resolver)); } } else if (_o->place) { _o->place.reset(); } }
  { auto _e = quoted_status_id(); _o->quoted_status_id = _e; }
  { auto _e = is_quote_status(); _o->is_quote_status = _e; }
  { auto _e = quoted_status(); if (_e) { if(_o->quoted_status) { _e->UnPackTo(_o->quoted_status.get(), _resolver); } else { _o->quoted_status = std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST>(_e->UnPack(_resolver)); } } else if (_o->quoted_status) { _o->quoted_status.reset(); } }
  { auto _e = retweeted_status(); if (_e) { if(_o->retweeted_status) { _e->UnPackTo(_o->retweeted_status.get(), _resolver); } else { _o->retweeted_status = std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST>(_e->UnPack(_resolver)); } } else if (_o->retweeted_status) { _o->retweeted_status.reset(); } }
  { auto _e = quote_count(); _o->quote_count = _e; }
  { auto _e = reply_count(); _o->reply_count = _e; }
  { auto _e = retweet_count(); _o->retweet_count = _e; }
  { auto _e = favorite_count(); _o->favorite_count = _e; }
  { auto _e = entities(); if (_e) { if(_o->entities) { _e->UnPackTo(_o->entities.get(), _resolver); } else { _o->entities = std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST>(_e->UnPack(_resolver)); } } else if (_o->entities) { _o->entities.reset(); } }
  { auto _e = extended_tweet(); if (_e) { if(_o->extended_tweet) { _e->UnPackTo(_o->extended_tweet.get(), _resolver); } else { _o->extended_tweet = std::unique_ptr<tweetstatusflatbuffers::ExtendedTweetFBST>(_e->UnPack(_resolver)); } } else if (_o->extended_tweet) { _o->extended_tweet.reset(); } }
  { auto _e = favorited(); _o->favorited = _e; }
  { auto _e = retweeted(); _o->retweeted = _e; }
  { auto _e = possibly_sensitive(); _o->possibly_sensitive = _e; }
  { auto _e = filter_level(); if (_e) _o->filter_level = _e->str(); }
  { auto _e = lang(); if (_e) _o->lang = _e->str(); }
  { auto _e = matching_rules(); if (_e) { _o->matching_rules.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->matching_rules[_i]) { _e->Get(_i)->UnPackTo(_o->matching_rules[_i].get(), _resolver); } else { _o->matching_rules[_i] = std::unique_ptr<tweetstatusflatbuffers::MatchingRulesEntityFBST>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->matching_rules.resize(0); } }
  { auto _e = current_user_retweet(); _o->current_user_retweet = _e; }
  { auto _e = scopes(); if (_e) { _o->scopes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->scopes[_i]) { _e->Get(_i)->UnPackTo(_o->scopes[_i].get(), _resolver); } else { _o->scopes[_i] = std::unique_ptr<tweetstatusflatbuffers::MapStringBoolT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->scopes.resize(0); } }
  { auto _e = withheld_copyright(); _o->withheld_copyright = _e; }
  { auto _e = withheld_in_countries(); if (_e) { _o->withheld_in_countries.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->withheld_in_countries[_i] = _e->Get(_i)->str(); } } else { _o->withheld_in_countries.resize(0); } }
  { auto _e = withheld_scope(); if (_e) _o->withheld_scope = _e->str(); }
  { auto _e = display_text_range(); if (_e) { _o->display_text_range.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->display_text_range[_i] = _e->Get(_i); } } else { _o->display_text_range.resize(0); } }
}

inline flatbuffers::Offset<TweetStatusFBS> TweetStatusFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TweetStatusFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTweetStatusFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TweetStatusFBS> CreateTweetStatusFBS(flatbuffers::FlatBufferBuilder &_fbb, const TweetStatusFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TweetStatusFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _created_at = _o->created_at.empty() ? 0 : _fbb.CreateString(_o->created_at);
  auto _id = _o->id;
  auto _id_str = _o->id_str.empty() ? 0 : _fbb.CreateString(_o->id_str);
  auto _text = _o->text.empty() ? 0 : _fbb.CreateString(_o->text);
  auto _source = _o->source.empty() ? 0 : _fbb.CreateString(_o->source);
  auto _truncated = _o->truncated;
  auto _in_reply_to_status_id = _o->in_reply_to_status_id;
  auto _in_reply_to_user_id = _o->in_reply_to_user_id;
  auto _in_reply_to_screen_name = _o->in_reply_to_screen_name.empty() ? 0 : _fbb.CreateString(_o->in_reply_to_screen_name);
  auto _user = _o->user ? CreateUserFBS(_fbb, _o->user.get(), _rehasher) : 0;
  auto _coordinates = _o->coordinates ? CreateCoordinatesFBS(_fbb, _o->coordinates.get(), _rehasher) : 0;
  auto _place = _o->place ? CreatePlaceFBS(_fbb, _o->place.get(), _rehasher) : 0;
  auto _quoted_status_id = _o->quoted_status_id;
  auto _is_quote_status = _o->is_quote_status;
  auto _quoted_status = _o->quoted_status ? CreateTweetStatusFBS(_fbb, _o->quoted_status.get(), _rehasher) : 0;
  auto _retweeted_status = _o->retweeted_status ? CreateTweetStatusFBS(_fbb, _o->retweeted_status.get(), _rehasher) : 0;
  auto _quote_count = _o->quote_count;
  auto _reply_count = _o->reply_count;
  auto _retweet_count = _o->retweet_count;
  auto _favorite_count = _o->favorite_count;
  auto _entities = _o->entities ? CreateEntitiesFBS(_fbb, _o->entities.get(), _rehasher) : 0;
  auto _extended_tweet = _o->extended_tweet ? CreateExtendedTweetFBS(_fbb, _o->extended_tweet.get(), _rehasher) : 0;
  auto _favorited = _o->favorited;
  auto _retweeted = _o->retweeted;
  auto _possibly_sensitive = _o->possibly_sensitive;
  auto _filter_level = _o->filter_level.empty() ? 0 : _fbb.CreateString(_o->filter_level);
  auto _lang = _o->lang.empty() ? 0 : _fbb.CreateString(_o->lang);
  auto _matching_rules = _o->matching_rules.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MatchingRulesEntityFBS>> (_o->matching_rules.size(), [](size_t i, _VectorArgs *__va) { return CreateMatchingRulesEntityFBS(*__va->__fbb, __va->__o->matching_rules[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _current_user_retweet = _o->current_user_retweet;
  auto _scopes = _o->scopes.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::MapStringBool>> (_o->scopes.size(), [](size_t i, _VectorArgs *__va) { return CreateMapStringBool(*__va->__fbb, __va->__o->scopes[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _withheld_copyright = _o->withheld_copyright;
  auto _withheld_in_countries = _o->withheld_in_countries.size() ? _fbb.CreateVectorOfStrings(_o->withheld_in_countries) : 0;
  auto _withheld_scope = _o->withheld_scope.empty() ? 0 : _fbb.CreateString(_o->withheld_scope);
  auto _display_text_range = _o->display_text_range.size() ? _fbb.CreateVector(_o->display_text_range) : 0;
  return tweetstatusflatbuffers::CreateTweetStatusFBS(
      _fbb,
      _created_at,
      _id,
      _id_str,
      _text,
      _source,
      _truncated,
      _in_reply_to_status_id,
      _in_reply_to_user_id,
      _in_reply_to_screen_name,
      _user,
      _coordinates,
      _place,
      _quoted_status_id,
      _is_quote_status,
      _quoted_status,
      _retweeted_status,
      _quote_count,
      _reply_count,
      _retweet_count,
      _favorite_count,
      _entities,
      _extended_tweet,
      _favorited,
      _retweeted,
      _possibly_sensitive,
      _filter_level,
      _lang,
      _matching_rules,
      _current_user_retweet,
      _scopes,
      _withheld_copyright,
      _withheld_in_countries,
      _withheld_scope,
      _display_text_range);
}

inline const tweetstatusflatbuffers::TweetStatusFBS *GetTweetStatusFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::TweetStatusFBS>(buf);
}

inline const tweetstatusflatbuffers::TweetStatusFBS *GetSizePrefixedTweetStatusFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::TweetStatusFBS>(buf);
}

inline TweetStatusFBS *GetMutableTweetStatusFBS(void *buf) {
  return flatbuffers::GetMutableRoot<TweetStatusFBS>(buf);
}

inline tweetstatusflatbuffers::TweetStatusFBS *GetMutableSizePrefixedTweetStatusFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<tweetstatusflatbuffers::TweetStatusFBS>(buf);
}

inline bool VerifyTweetStatusFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::TweetStatusFBS>(nullptr);
}

inline bool VerifySizePrefixedTweetStatusFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::TweetStatusFBS>(nullptr);
}

inline void FinishTweetStatusFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTweetStatusFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::TweetStatusFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST> UnPackTweetStatusFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST>(GetTweetStatusFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST> UnPackSizePrefixedTweetStatusFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::TweetStatusFBST>(GetSizePrefixedTweetStatusFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_TWEETSTATUS_TWEETSTATUSFLATBUFFERS_H_
