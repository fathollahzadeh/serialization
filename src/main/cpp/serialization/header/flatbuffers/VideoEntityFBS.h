// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VIDEOENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_VIDEOENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

#include "VariantEntityFBS.h"

namespace tweetstatusflatbuffers {

struct VideoEntityFBS;
struct VideoEntityFBSBuilder;
struct VideoEntityFBST;

struct VideoEntityFBST : public flatbuffers::NativeTable {
  typedef VideoEntityFBS TableType;
  std::vector<int32_t> aspect_ratio{};
  int32_t duration_millis = 0;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::VariantEntityFBST>> variants{};
  VideoEntityFBST() = default;
  VideoEntityFBST(const VideoEntityFBST &o);
  VideoEntityFBST(VideoEntityFBST&&) FLATBUFFERS_NOEXCEPT = default;
  VideoEntityFBST &operator=(VideoEntityFBST o) FLATBUFFERS_NOEXCEPT;
};

struct VideoEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VideoEntityFBST NativeTableType;
  typedef VideoEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ASPECT_RATIO = 4,
    VT_DURATION_MILLIS = 6,
    VT_VARIANTS = 8
  };
  const flatbuffers::Vector<int32_t> *aspect_ratio() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ASPECT_RATIO);
  }
  flatbuffers::Vector<int32_t> *mutable_aspect_ratio() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_ASPECT_RATIO);
  }
  int32_t duration_millis() const {
    return GetField<int32_t>(VT_DURATION_MILLIS, 0);
  }
  bool mutate_duration_millis(int32_t _duration_millis = 0) {
    return SetField<int32_t>(VT_DURATION_MILLIS, _duration_millis, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>> *variants() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>> *>(VT_VARIANTS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>> *mutable_variants() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>> *>(VT_VARIANTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ASPECT_RATIO) &&
           verifier.VerifyVector(aspect_ratio()) &&
           VerifyField<int32_t>(verifier, VT_DURATION_MILLIS, 4) &&
           VerifyOffset(verifier, VT_VARIANTS) &&
           verifier.VerifyVector(variants()) &&
           verifier.VerifyVectorOfTables(variants()) &&
           verifier.EndTable();
  }
  VideoEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VideoEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<VideoEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const VideoEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VideoEntityFBSBuilder {
  typedef VideoEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_aspect_ratio(flatbuffers::Offset<flatbuffers::Vector<int32_t>> aspect_ratio) {
    fbb_.AddOffset(VideoEntityFBS::VT_ASPECT_RATIO, aspect_ratio);
  }
  void add_duration_millis(int32_t duration_millis) {
    fbb_.AddElement<int32_t>(VideoEntityFBS::VT_DURATION_MILLIS, duration_millis, 0);
  }
  void add_variants(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>>> variants) {
    fbb_.AddOffset(VideoEntityFBS::VT_VARIANTS, variants);
  }
  explicit VideoEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<VideoEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VideoEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<VideoEntityFBS> CreateVideoEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> aspect_ratio = 0,
    int32_t duration_millis = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>>> variants = 0) {
  VideoEntityFBSBuilder builder_(_fbb);
  builder_.add_variants(variants);
  builder_.add_duration_millis(duration_millis);
  builder_.add_aspect_ratio(aspect_ratio);
  return builder_.Finish();
}

inline flatbuffers::Offset<VideoEntityFBS> CreateVideoEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *aspect_ratio = nullptr,
    int32_t duration_millis = 0,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>> *variants = nullptr) {
  auto aspect_ratio__ = aspect_ratio ? _fbb.CreateVector<int32_t>(*aspect_ratio) : 0;
  auto variants__ = variants ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>>(*variants) : 0;
  return tweetstatusflatbuffers::CreateVideoEntityFBS(
      _fbb,
      aspect_ratio__,
      duration_millis,
      variants__);
}

flatbuffers::Offset<VideoEntityFBS> CreateVideoEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const VideoEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VideoEntityFBST::VideoEntityFBST(const VideoEntityFBST &o)
      : aspect_ratio(o.aspect_ratio),
        duration_millis(o.duration_millis) {
  variants.reserve(o.variants.size());
  for (const auto &variants_ : o.variants) { variants.emplace_back((variants_) ? new tweetstatusflatbuffers::VariantEntityFBST(*variants_) : nullptr); }
}

inline VideoEntityFBST &VideoEntityFBST::operator=(VideoEntityFBST o) FLATBUFFERS_NOEXCEPT {
  std::swap(aspect_ratio, o.aspect_ratio);
  std::swap(duration_millis, o.duration_millis);
  std::swap(variants, o.variants);
  return *this;
}

inline VideoEntityFBST *VideoEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<VideoEntityFBST>(new VideoEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void VideoEntityFBS::UnPackTo(VideoEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = aspect_ratio(); if (_e) { _o->aspect_ratio.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->aspect_ratio[_i] = _e->Get(_i); } } else { _o->aspect_ratio.resize(0); } }
  { auto _e = duration_millis(); _o->duration_millis = _e; }
  { auto _e = variants(); if (_e) { _o->variants.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->variants[_i]) { _e->Get(_i)->UnPackTo(_o->variants[_i].get(), _resolver); } else { _o->variants[_i] = std::unique_ptr<tweetstatusflatbuffers::VariantEntityFBST>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->variants.resize(0); } }
}

inline flatbuffers::Offset<VideoEntityFBS> VideoEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const VideoEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVideoEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<VideoEntityFBS> CreateVideoEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const VideoEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const VideoEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _aspect_ratio = _o->aspect_ratio.size() ? _fbb.CreateVector(_o->aspect_ratio) : 0;
  auto _duration_millis = _o->duration_millis;
  auto _variants = _o->variants.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS>> (_o->variants.size(), [](size_t i, _VectorArgs *__va) { return CreateVariantEntityFBS(*__va->__fbb, __va->__o->variants[i].get(), __va->__rehasher); }, &_va ) : 0;
  return tweetstatusflatbuffers::CreateVideoEntityFBS(
      _fbb,
      _aspect_ratio,
      _duration_millis,
      _variants);
}

inline const tweetstatusflatbuffers::VideoEntityFBS *GetVideoEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::VideoEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::VideoEntityFBS *GetSizePrefixedVideoEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::VideoEntityFBS>(buf);
}

inline VideoEntityFBS *GetMutableVideoEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<VideoEntityFBS>(buf);
}

inline tweetstatusflatbuffers::VideoEntityFBS *GetMutableSizePrefixedVideoEntityFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<tweetstatusflatbuffers::VideoEntityFBS>(buf);
}

inline bool VerifyVideoEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::VideoEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedVideoEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::VideoEntityFBS>(nullptr);
}

inline void FinishVideoEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::VideoEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVideoEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::VideoEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::VideoEntityFBST> UnPackVideoEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::VideoEntityFBST>(GetVideoEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::VideoEntityFBST> UnPackSizePrefixedVideoEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::VideoEntityFBST>(GetSizePrefixedVideoEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_VIDEOENTITY_TWEETSTATUSFLATBUFFERS_H_
