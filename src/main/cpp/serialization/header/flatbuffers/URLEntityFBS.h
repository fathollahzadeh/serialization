// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_URLENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_URLENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace tweetstatusflatbuffers {

struct URLEntityFBS;
struct URLEntityFBSBuilder;
struct URLEntityFBST;

struct URLEntityFBST : public flatbuffers::NativeTable {
  typedef URLEntityFBS TableType;
  std::vector<int32_t> indices{};
  std::string display_url{};
  std::string expanded_url{};
  std::string url{};
};

struct URLEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef URLEntityFBST NativeTableType;
  typedef URLEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICES = 4,
    VT_DISPLAY_URL = 6,
    VT_EXPANDED_URL = 8,
    VT_URL = 10
  };
  const flatbuffers::Vector<int32_t> *indices() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  flatbuffers::Vector<int32_t> *mutable_indices() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  const flatbuffers::String *display_url() const {
    return GetPointer<const flatbuffers::String *>(VT_DISPLAY_URL);
  }
  flatbuffers::String *mutable_display_url() {
    return GetPointer<flatbuffers::String *>(VT_DISPLAY_URL);
  }
  const flatbuffers::String *expanded_url() const {
    return GetPointer<const flatbuffers::String *>(VT_EXPANDED_URL);
  }
  flatbuffers::String *mutable_expanded_url() {
    return GetPointer<flatbuffers::String *>(VT_EXPANDED_URL);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyOffset(verifier, VT_DISPLAY_URL) &&
           verifier.VerifyString(display_url()) &&
           VerifyOffset(verifier, VT_EXPANDED_URL) &&
           verifier.VerifyString(expanded_url()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           verifier.EndTable();
  }
  URLEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(URLEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<URLEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const URLEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct URLEntityFBSBuilder {
  typedef URLEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<int32_t>> indices) {
    fbb_.AddOffset(URLEntityFBS::VT_INDICES, indices);
  }
  void add_display_url(flatbuffers::Offset<flatbuffers::String> display_url) {
    fbb_.AddOffset(URLEntityFBS::VT_DISPLAY_URL, display_url);
  }
  void add_expanded_url(flatbuffers::Offset<flatbuffers::String> expanded_url) {
    fbb_.AddOffset(URLEntityFBS::VT_EXPANDED_URL, expanded_url);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(URLEntityFBS::VT_URL, url);
  }
  explicit URLEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<URLEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<URLEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<URLEntityFBS> CreateURLEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> indices = 0,
    flatbuffers::Offset<flatbuffers::String> display_url = 0,
    flatbuffers::Offset<flatbuffers::String> expanded_url = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  URLEntityFBSBuilder builder_(_fbb);
  builder_.add_url(url);
  builder_.add_expanded_url(expanded_url);
  builder_.add_display_url(display_url);
  builder_.add_indices(indices);
  return builder_.Finish();
}

inline flatbuffers::Offset<URLEntityFBS> CreateURLEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *indices = nullptr,
    const char *display_url = nullptr,
    const char *expanded_url = nullptr,
    const char *url = nullptr) {
  auto indices__ = indices ? _fbb.CreateVector<int32_t>(*indices) : 0;
  auto display_url__ = display_url ? _fbb.CreateString(display_url) : 0;
  auto expanded_url__ = expanded_url ? _fbb.CreateString(expanded_url) : 0;
  auto url__ = url ? _fbb.CreateString(url) : 0;
  return tweetstatusflatbuffers::CreateURLEntityFBS(
      _fbb,
      indices__,
      display_url__,
      expanded_url__,
      url__);
}

flatbuffers::Offset<URLEntityFBS> CreateURLEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const URLEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline URLEntityFBST *URLEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<URLEntityFBST>(new URLEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void URLEntityFBS::UnPackTo(URLEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = indices(); if (_e) { _o->indices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->indices[_i] = _e->Get(_i); } } else { _o->indices.resize(0); } }
  { auto _e = display_url(); if (_e) _o->display_url = _e->str(); }
  { auto _e = expanded_url(); if (_e) _o->expanded_url = _e->str(); }
  { auto _e = url(); if (_e) _o->url = _e->str(); }
}

inline flatbuffers::Offset<URLEntityFBS> URLEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const URLEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateURLEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<URLEntityFBS> CreateURLEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const URLEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const URLEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _indices = _o->indices.size() ? _fbb.CreateVector(_o->indices) : 0;
  auto _display_url = _o->display_url.empty() ? 0 : _fbb.CreateString(_o->display_url);
  auto _expanded_url = _o->expanded_url.empty() ? 0 : _fbb.CreateString(_o->expanded_url);
  auto _url = _o->url.empty() ? 0 : _fbb.CreateString(_o->url);
  return tweetstatusflatbuffers::CreateURLEntityFBS(
      _fbb,
      _indices,
      _display_url,
      _expanded_url,
      _url);
}

inline const tweetstatusflatbuffers::URLEntityFBS *GetURLEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::URLEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::URLEntityFBS *GetSizePrefixedURLEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::URLEntityFBS>(buf);
}

inline URLEntityFBS *GetMutableURLEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<URLEntityFBS>(buf);
}

inline tweetstatusflatbuffers::URLEntityFBS *GetMutableSizePrefixedURLEntityFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<tweetstatusflatbuffers::URLEntityFBS>(buf);
}

inline bool VerifyURLEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::URLEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedURLEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::URLEntityFBS>(nullptr);
}

inline void FinishURLEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedURLEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::URLEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST> UnPackURLEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST>(GetURLEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST> UnPackSizePrefixedURLEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::URLEntityFBST>(GetSizePrefixedURLEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_URLENTITY_TWEETSTATUSFLATBUFFERS_H_
