// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXTENDEDTWEET_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_EXTENDEDTWEET_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

#include "EntitiesFBS.h"
#include "ExtendedEntitiesFBS.h"

namespace tweetstatusflatbuffers {

struct ExtendedTweetFBS;
struct ExtendedTweetFBSBuilder;
struct ExtendedTweetFBST;

struct ExtendedTweetFBST : public flatbuffers::NativeTable {
  typedef ExtendedTweetFBS TableType;
  std::string full_text{};
  std::vector<int32_t> display_text_range{};
  std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST> entities{};
  std::unique_ptr<tweetstatusflatbuffers::ExtendedEntitiesFBST> extended_entities{};
  ExtendedTweetFBST() = default;
  ExtendedTweetFBST(const ExtendedTweetFBST &o);
  ExtendedTweetFBST(ExtendedTweetFBST&&) FLATBUFFERS_NOEXCEPT = default;
  ExtendedTweetFBST &operator=(ExtendedTweetFBST o) FLATBUFFERS_NOEXCEPT;
};

struct ExtendedTweetFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExtendedTweetFBST NativeTableType;
  typedef ExtendedTweetFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FULL_TEXT = 4,
    VT_DISPLAY_TEXT_RANGE = 6,
    VT_ENTITIES = 8,
    VT_EXTENDED_ENTITIES = 10
  };
  const flatbuffers::String *full_text() const {
    return GetPointer<const flatbuffers::String *>(VT_FULL_TEXT);
  }
  flatbuffers::String *mutable_full_text() {
    return GetPointer<flatbuffers::String *>(VT_FULL_TEXT);
  }
  const flatbuffers::Vector<int32_t> *display_text_range() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DISPLAY_TEXT_RANGE);
  }
  flatbuffers::Vector<int32_t> *mutable_display_text_range() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_DISPLAY_TEXT_RANGE);
  }
  const tweetstatusflatbuffers::EntitiesFBS *entities() const {
    return GetPointer<const tweetstatusflatbuffers::EntitiesFBS *>(VT_ENTITIES);
  }
  tweetstatusflatbuffers::EntitiesFBS *mutable_entities() {
    return GetPointer<tweetstatusflatbuffers::EntitiesFBS *>(VT_ENTITIES);
  }
  const tweetstatusflatbuffers::ExtendedEntitiesFBS *extended_entities() const {
    return GetPointer<const tweetstatusflatbuffers::ExtendedEntitiesFBS *>(VT_EXTENDED_ENTITIES);
  }
  tweetstatusflatbuffers::ExtendedEntitiesFBS *mutable_extended_entities() {
    return GetPointer<tweetstatusflatbuffers::ExtendedEntitiesFBS *>(VT_EXTENDED_ENTITIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FULL_TEXT) &&
           verifier.VerifyString(full_text()) &&
           VerifyOffset(verifier, VT_DISPLAY_TEXT_RANGE) &&
           verifier.VerifyVector(display_text_range()) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyTable(entities()) &&
           VerifyOffset(verifier, VT_EXTENDED_ENTITIES) &&
           verifier.VerifyTable(extended_entities()) &&
           verifier.EndTable();
  }
  ExtendedTweetFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ExtendedTweetFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ExtendedTweetFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedTweetFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ExtendedTweetFBSBuilder {
  typedef ExtendedTweetFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_full_text(flatbuffers::Offset<flatbuffers::String> full_text) {
    fbb_.AddOffset(ExtendedTweetFBS::VT_FULL_TEXT, full_text);
  }
  void add_display_text_range(flatbuffers::Offset<flatbuffers::Vector<int32_t>> display_text_range) {
    fbb_.AddOffset(ExtendedTweetFBS::VT_DISPLAY_TEXT_RANGE, display_text_range);
  }
  void add_entities(flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> entities) {
    fbb_.AddOffset(ExtendedTweetFBS::VT_ENTITIES, entities);
  }
  void add_extended_entities(flatbuffers::Offset<tweetstatusflatbuffers::ExtendedEntitiesFBS> extended_entities) {
    fbb_.AddOffset(ExtendedTweetFBS::VT_EXTENDED_ENTITIES, extended_entities);
  }
  explicit ExtendedTweetFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ExtendedTweetFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExtendedTweetFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExtendedTweetFBS> CreateExtendedTweetFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> full_text = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> display_text_range = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> entities = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedEntitiesFBS> extended_entities = 0) {
  ExtendedTweetFBSBuilder builder_(_fbb);
  builder_.add_extended_entities(extended_entities);
  builder_.add_entities(entities);
  builder_.add_display_text_range(display_text_range);
  builder_.add_full_text(full_text);
  return builder_.Finish();
}

inline flatbuffers::Offset<ExtendedTweetFBS> CreateExtendedTweetFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *full_text = nullptr,
    const std::vector<int32_t> *display_text_range = nullptr,
    flatbuffers::Offset<tweetstatusflatbuffers::EntitiesFBS> entities = 0,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedEntitiesFBS> extended_entities = 0) {
  auto full_text__ = full_text ? _fbb.CreateString(full_text) : 0;
  auto display_text_range__ = display_text_range ? _fbb.CreateVector<int32_t>(*display_text_range) : 0;
  return tweetstatusflatbuffers::CreateExtendedTweetFBS(
      _fbb,
      full_text__,
      display_text_range__,
      entities,
      extended_entities);
}

flatbuffers::Offset<ExtendedTweetFBS> CreateExtendedTweetFBS(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedTweetFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ExtendedTweetFBST::ExtendedTweetFBST(const ExtendedTweetFBST &o)
      : full_text(o.full_text),
        display_text_range(o.display_text_range),
        entities((o.entities) ? new tweetstatusflatbuffers::EntitiesFBST(*o.entities) : nullptr),
        extended_entities((o.extended_entities) ? new tweetstatusflatbuffers::ExtendedEntitiesFBST(*o.extended_entities) : nullptr) {
}

inline ExtendedTweetFBST &ExtendedTweetFBST::operator=(ExtendedTweetFBST o) FLATBUFFERS_NOEXCEPT {
  std::swap(full_text, o.full_text);
  std::swap(display_text_range, o.display_text_range);
  std::swap(entities, o.entities);
  std::swap(extended_entities, o.extended_entities);
  return *this;
}

inline ExtendedTweetFBST *ExtendedTweetFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ExtendedTweetFBST>(new ExtendedTweetFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ExtendedTweetFBS::UnPackTo(ExtendedTweetFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = full_text(); if (_e) _o->full_text = _e->str(); }
  { auto _e = display_text_range(); if (_e) { _o->display_text_range.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->display_text_range[_i] = _e->Get(_i); } } else { _o->display_text_range.resize(0); } }
  { auto _e = entities(); if (_e) { if(_o->entities) { _e->UnPackTo(_o->entities.get(), _resolver); } else { _o->entities = std::unique_ptr<tweetstatusflatbuffers::EntitiesFBST>(_e->UnPack(_resolver)); } } else if (_o->entities) { _o->entities.reset(); } }
  { auto _e = extended_entities(); if (_e) { if(_o->extended_entities) { _e->UnPackTo(_o->extended_entities.get(), _resolver); } else { _o->extended_entities = std::unique_ptr<tweetstatusflatbuffers::ExtendedEntitiesFBST>(_e->UnPack(_resolver)); } } else if (_o->extended_entities) { _o->extended_entities.reset(); } }
}

inline flatbuffers::Offset<ExtendedTweetFBS> ExtendedTweetFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedTweetFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateExtendedTweetFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ExtendedTweetFBS> CreateExtendedTweetFBS(flatbuffers::FlatBufferBuilder &_fbb, const ExtendedTweetFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ExtendedTweetFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _full_text = _o->full_text.empty() ? 0 : _fbb.CreateString(_o->full_text);
  auto _display_text_range = _o->display_text_range.size() ? _fbb.CreateVector(_o->display_text_range) : 0;
  auto _entities = _o->entities ? CreateEntitiesFBS(_fbb, _o->entities.get(), _rehasher) : 0;
  auto _extended_entities = _o->extended_entities ? CreateExtendedEntitiesFBS(_fbb, _o->extended_entities.get(), _rehasher) : 0;
  return tweetstatusflatbuffers::CreateExtendedTweetFBS(
      _fbb,
      _full_text,
      _display_text_range,
      _entities,
      _extended_entities);
}

inline const tweetstatusflatbuffers::ExtendedTweetFBS *GetExtendedTweetFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::ExtendedTweetFBS>(buf);
}

inline const tweetstatusflatbuffers::ExtendedTweetFBS *GetSizePrefixedExtendedTweetFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::ExtendedTweetFBS>(buf);
}

inline ExtendedTweetFBS *GetMutableExtendedTweetFBS(void *buf) {
  return flatbuffers::GetMutableRoot<ExtendedTweetFBS>(buf);
}

inline tweetstatusflatbuffers::ExtendedTweetFBS *GetMutableSizePrefixedExtendedTweetFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<tweetstatusflatbuffers::ExtendedTweetFBS>(buf);
}

inline bool VerifyExtendedTweetFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::ExtendedTweetFBS>(nullptr);
}

inline bool VerifySizePrefixedExtendedTweetFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::ExtendedTweetFBS>(nullptr);
}

inline void FinishExtendedTweetFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedTweetFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedExtendedTweetFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::ExtendedTweetFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::ExtendedTweetFBST> UnPackExtendedTweetFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::ExtendedTweetFBST>(GetExtendedTweetFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::ExtendedTweetFBST> UnPackSizePrefixedExtendedTweetFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::ExtendedTweetFBST>(GetSizePrefixedExtendedTweetFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_EXTENDEDTWEET_TWEETSTATUSFLATBUFFERS_H_
