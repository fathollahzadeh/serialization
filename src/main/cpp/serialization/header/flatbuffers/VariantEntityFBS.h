// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VARIANTENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_VARIANTENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace tweetstatusflatbuffers {

struct VariantEntityFBS;
struct VariantEntityFBSBuilder;
struct VariantEntityFBST;

struct VariantEntityFBST : public flatbuffers::NativeTable {
  typedef VariantEntityFBS TableType;
  int64_t bitrate = 0;
  std::string content_type{};
  std::string url{};
};

struct VariantEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VariantEntityFBST NativeTableType;
  typedef VariantEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BITRATE = 4,
    VT_CONTENT_TYPE = 6,
    VT_URL = 8
  };
  int64_t bitrate() const {
    return GetField<int64_t>(VT_BITRATE, 0);
  }
  bool mutate_bitrate(int64_t _bitrate) {
    return SetField<int64_t>(VT_BITRATE, _bitrate, 0);
  }
  const flatbuffers::String *content_type() const {
    return GetPointer<const flatbuffers::String *>(VT_CONTENT_TYPE);
  }
  flatbuffers::String *mutable_content_type() {
    return GetPointer<flatbuffers::String *>(VT_CONTENT_TYPE);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_BITRATE) &&
           VerifyOffset(verifier, VT_CONTENT_TYPE) &&
           verifier.VerifyString(content_type()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           verifier.EndTable();
  }
  VariantEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VariantEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<VariantEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const VariantEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VariantEntityFBSBuilder {
  typedef VariantEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bitrate(int64_t bitrate) {
    fbb_.AddElement<int64_t>(VariantEntityFBS::VT_BITRATE, bitrate, 0);
  }
  void add_content_type(flatbuffers::Offset<flatbuffers::String> content_type) {
    fbb_.AddOffset(VariantEntityFBS::VT_CONTENT_TYPE, content_type);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(VariantEntityFBS::VT_URL, url);
  }
  explicit VariantEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<VariantEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VariantEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<VariantEntityFBS> CreateVariantEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t bitrate = 0,
    flatbuffers::Offset<flatbuffers::String> content_type = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  VariantEntityFBSBuilder builder_(_fbb);
  builder_.add_bitrate(bitrate);
  builder_.add_url(url);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<VariantEntityFBS> CreateVariantEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t bitrate = 0,
    const char *content_type = nullptr,
    const char *url = nullptr) {
  auto content_type__ = content_type ? _fbb.CreateString(content_type) : 0;
  auto url__ = url ? _fbb.CreateString(url) : 0;
  return tweetstatusflatbuffers::CreateVariantEntityFBS(
      _fbb,
      bitrate,
      content_type__,
      url__);
}

flatbuffers::Offset<VariantEntityFBS> CreateVariantEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const VariantEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VariantEntityFBST *VariantEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<VariantEntityFBST>(new VariantEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void VariantEntityFBS::UnPackTo(VariantEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = bitrate(); _o->bitrate = _e; }
  { auto _e = content_type(); if (_e) _o->content_type = _e->str(); }
  { auto _e = url(); if (_e) _o->url = _e->str(); }
}

inline flatbuffers::Offset<VariantEntityFBS> VariantEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const VariantEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVariantEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<VariantEntityFBS> CreateVariantEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const VariantEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const VariantEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _bitrate = _o->bitrate;
  auto _content_type = _o->content_type.empty() ? 0 : _fbb.CreateString(_o->content_type);
  auto _url = _o->url.empty() ? 0 : _fbb.CreateString(_o->url);
  return tweetstatusflatbuffers::CreateVariantEntityFBS(
      _fbb,
      _bitrate,
      _content_type,
      _url);
}

inline const tweetstatusflatbuffers::VariantEntityFBS *GetVariantEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::VariantEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::VariantEntityFBS *GetSizePrefixedVariantEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::VariantEntityFBS>(buf);
}

inline VariantEntityFBS *GetMutableVariantEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<VariantEntityFBS>(buf);
}

inline bool VerifyVariantEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::VariantEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedVariantEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::VariantEntityFBS>(nullptr);
}

inline void FinishVariantEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVariantEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::VariantEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::VariantEntityFBST> UnPackVariantEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::VariantEntityFBST>(GetVariantEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::VariantEntityFBST> UnPackSizePrefixedVariantEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::VariantEntityFBST>(GetSizePrefixedVariantEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_VARIANTENTITY_TWEETSTATUSFLATBUFFERS_H_
