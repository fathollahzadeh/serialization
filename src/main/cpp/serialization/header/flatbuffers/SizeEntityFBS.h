// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIZEENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_SIZEENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace tweetstatusflatbuffers {

struct SizeEntityFBS;
struct SizeEntityFBSBuilder;
struct SizeEntityFBST;

struct SizeEntityFBST : public flatbuffers::NativeTable {
  typedef SizeEntityFBS TableType;
  int32_t width = 0;
  int32_t height = 0;
  std::string resize{};
};

struct SizeEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SizeEntityFBST NativeTableType;
  typedef SizeEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_RESIZE = 8
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(int32_t _width = 0) {
    return SetField<int32_t>(VT_WIDTH, _width, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(int32_t _height = 0) {
    return SetField<int32_t>(VT_HEIGHT, _height, 0);
  }
  const flatbuffers::String *resize() const {
    return GetPointer<const flatbuffers::String *>(VT_RESIZE);
  }
  flatbuffers::String *mutable_resize() {
    return GetPointer<flatbuffers::String *>(VT_RESIZE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyOffset(verifier, VT_RESIZE) &&
           verifier.VerifyString(resize()) &&
           verifier.EndTable();
  }
  SizeEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SizeEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SizeEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SizeEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SizeEntityFBSBuilder {
  typedef SizeEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(SizeEntityFBS::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(SizeEntityFBS::VT_HEIGHT, height, 0);
  }
  void add_resize(flatbuffers::Offset<flatbuffers::String> resize) {
    fbb_.AddOffset(SizeEntityFBS::VT_RESIZE, resize);
  }
  explicit SizeEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SizeEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SizeEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<SizeEntityFBS> CreateSizeEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    flatbuffers::Offset<flatbuffers::String> resize = 0) {
  SizeEntityFBSBuilder builder_(_fbb);
  builder_.add_resize(resize);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline flatbuffers::Offset<SizeEntityFBS> CreateSizeEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    const char *resize = nullptr) {
  auto resize__ = resize ? _fbb.CreateString(resize) : 0;
  return tweetstatusflatbuffers::CreateSizeEntityFBS(
      _fbb,
      width,
      height,
      resize__);
}

flatbuffers::Offset<SizeEntityFBS> CreateSizeEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const SizeEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SizeEntityFBST *SizeEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SizeEntityFBST>(new SizeEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SizeEntityFBS::UnPackTo(SizeEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
  { auto _e = resize(); if (_e) _o->resize = _e->str(); }
}

inline flatbuffers::Offset<SizeEntityFBS> SizeEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SizeEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSizeEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SizeEntityFBS> CreateSizeEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const SizeEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SizeEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _width = _o->width;
  auto _height = _o->height;
  auto _resize = _o->resize.empty() ? 0 : _fbb.CreateString(_o->resize);
  return tweetstatusflatbuffers::CreateSizeEntityFBS(
      _fbb,
      _width,
      _height,
      _resize);
}

inline const tweetstatusflatbuffers::SizeEntityFBS *GetSizeEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::SizeEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::SizeEntityFBS *GetSizePrefixedSizeEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::SizeEntityFBS>(buf);
}

inline SizeEntityFBS *GetMutableSizeEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<SizeEntityFBS>(buf);
}

inline tweetstatusflatbuffers::SizeEntityFBS *GetMutableSizePrefixedSizeEntityFBS(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<tweetstatusflatbuffers::SizeEntityFBS>(buf);
}

inline bool VerifySizeEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::SizeEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedSizeEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::SizeEntityFBS>(nullptr);
}

inline void FinishSizeEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::SizeEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSizeEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::SizeEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::SizeEntityFBST> UnPackSizeEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::SizeEntityFBST>(GetSizeEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::SizeEntityFBST> UnPackSizePrefixedSizeEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::SizeEntityFBST>(GetSizePrefixedSizeEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_SIZEENTITY_TWEETSTATUSFLATBUFFERS_H_
