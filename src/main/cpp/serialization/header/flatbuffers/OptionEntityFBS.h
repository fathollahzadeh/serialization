// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OPTIONENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_OPTIONENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace tweetstatusflatbuffers {

struct OptionEntityFBS;
struct OptionEntityFBSBuilder;
struct OptionEntityFBST;

struct OptionEntityFBST : public flatbuffers::NativeTable {
  typedef OptionEntityFBS TableType;
  int32_t position = 0;
  std::string text{};
};

struct OptionEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OptionEntityFBST NativeTableType;
  typedef OptionEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_TEXT = 6
  };
  int32_t position() const {
    return GetField<int32_t>(VT_POSITION, 0);
  }
  bool mutate_position(int32_t _position) {
    return SetField<int32_t>(VT_POSITION, _position, 0);
  }
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  flatbuffers::String *mutable_text() {
    return GetPointer<flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_POSITION) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
  OptionEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OptionEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<OptionEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OptionEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OptionEntityFBSBuilder {
  typedef OptionEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(int32_t position) {
    fbb_.AddElement<int32_t>(OptionEntityFBS::VT_POSITION, position, 0);
  }
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(OptionEntityFBS::VT_TEXT, text);
  }
  explicit OptionEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OptionEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OptionEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<OptionEntityFBS> CreateOptionEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t position = 0,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  OptionEntityFBSBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_position(position);
  return builder_.Finish();
}

inline flatbuffers::Offset<OptionEntityFBS> CreateOptionEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t position = 0,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return tweetstatusflatbuffers::CreateOptionEntityFBS(
      _fbb,
      position,
      text__);
}

flatbuffers::Offset<OptionEntityFBS> CreateOptionEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const OptionEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline OptionEntityFBST *OptionEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OptionEntityFBST>(new OptionEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void OptionEntityFBS::UnPackTo(OptionEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = position(); _o->position = _e; }
  { auto _e = text(); if (_e) _o->text = _e->str(); }
}

inline flatbuffers::Offset<OptionEntityFBS> OptionEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OptionEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOptionEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<OptionEntityFBS> CreateOptionEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const OptionEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OptionEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _position = _o->position;
  auto _text = _o->text.empty() ? 0 : _fbb.CreateString(_o->text);
  return tweetstatusflatbuffers::CreateOptionEntityFBS(
      _fbb,
      _position,
      _text);
}

inline const tweetstatusflatbuffers::OptionEntityFBS *GetOptionEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::OptionEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::OptionEntityFBS *GetSizePrefixedOptionEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::OptionEntityFBS>(buf);
}

inline OptionEntityFBS *GetMutableOptionEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<OptionEntityFBS>(buf);
}

inline bool VerifyOptionEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::OptionEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedOptionEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::OptionEntityFBS>(nullptr);
}

inline void FinishOptionEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOptionEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::OptionEntityFBST> UnPackOptionEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::OptionEntityFBST>(GetOptionEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::OptionEntityFBST> UnPackSizePrefixedOptionEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::OptionEntityFBST>(GetSizePrefixedOptionEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_OPTIONENTITY_TWEETSTATUSFLATBUFFERS_H_
