// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TweetStatusP.proto

#include "TweetStatusP.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR TweetStatusP::TweetStatusP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matchingrules_)*/{}
  , /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.withheldincountries_)*/{}
  , /*decltype(_impl_.displaytextrange_)*/{}
  , /*decltype(_impl_._displaytextrange_cached_byte_size_)*/{0}
  , /*decltype(_impl_.createdat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inreplytoscreenname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filterlevel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.withheldscope_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userp_)*/nullptr
  , /*decltype(_impl_.coordinates_)*/nullptr
  , /*decltype(_impl_.place_)*/nullptr
  , /*decltype(_impl_.quotedstatus_)*/nullptr
  , /*decltype(_impl_.retweetedstatus_)*/nullptr
  , /*decltype(_impl_.entitiesp_)*/nullptr
  , /*decltype(_impl_.extendedtweet_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.inreplytostatusid_)*/int64_t{0}
  , /*decltype(_impl_.inreplytouserid_)*/int64_t{0}
  , /*decltype(_impl_.quotedstatusid_)*/int64_t{0}
  , /*decltype(_impl_.istruncated_)*/false
  , /*decltype(_impl_.isquotestatus_)*/false
  , /*decltype(_impl_.isfavorited_)*/false
  , /*decltype(_impl_.isretweeted_)*/false
  , /*decltype(_impl_.quotecount_)*/0
  , /*decltype(_impl_.replycount_)*/0
  , /*decltype(_impl_.retweetcount_)*/0
  , /*decltype(_impl_.favoritecount_)*/0
  , /*decltype(_impl_.ispossiblysensitive_)*/false
  , /*decltype(_impl_.withheldcopyright_)*/false
  , /*decltype(_impl_.currentuserretweetedid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TweetStatusPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TweetStatusPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TweetStatusPDefaultTypeInternal() {}
  union {
    TweetStatusP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TweetStatusPDefaultTypeInternal _TweetStatusP_default_instance_;
PROTOBUF_CONSTEXPR UserP::UserP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.withheldincountries_)*/{}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.screenname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createdat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilebannerimageurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profileimageurlhttps_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.withheldscope_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilebackgroundcolor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilebackgroundimageurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilebackgroundimageurlhttps_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profileimageurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilelinkcolor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilesidebarbordercolor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profilesidebarfillcolor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profiletextcolor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descriptionurlentities_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.followerscount_)*/0
  , /*decltype(_impl_.friendscount_)*/0
  , /*decltype(_impl_.listedcount_)*/0
  , /*decltype(_impl_.favouritescount_)*/0
  , /*decltype(_impl_.statusescount_)*/0
  , /*decltype(_impl_.isprotected_)*/false
  , /*decltype(_impl_.isverified_)*/false
  , /*decltype(_impl_.isdefaultprofile_)*/false
  , /*decltype(_impl_.isgeoenabled_)*/false
  , /*decltype(_impl_.iscontributorsenabled_)*/false
  , /*decltype(_impl_.profilebackgroundtiled_)*/false
  , /*decltype(_impl_.profileusebackgroundimage_)*/false
  , /*decltype(_impl_.isdefaultprofileimage_)*/false
  , /*decltype(_impl_.utcoffset_)*/0
  , /*decltype(_impl_.translator_)*/false
  , /*decltype(_impl_.isfollowrequestsent_)*/false
  , /*decltype(_impl_.showallinlinemedia_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserPDefaultTypeInternal() {}
  union {
    UserP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserPDefaultTypeInternal _UserP_default_instance_;
PROTOBUF_CONSTEXPR CoordinatesP::CoordinatesP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coordinates_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatesPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatesPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatesPDefaultTypeInternal() {}
  union {
    CoordinatesP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatesPDefaultTypeInternal _CoordinatesP_default_instance_;
PROTOBUF_CONSTEXPR PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coordinate_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal() {}
  union {
    PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoPDefaultTypeInternal _PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_;
PROTOBUF_CONSTEXPR PlaceP_BoundingBoxCoordinateP_RowsOneP::PlaceP_BoundingBoxCoordinateP_RowsOneP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rowstwop_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal() {}
  union {
    PlaceP_BoundingBoxCoordinateP_RowsOneP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceP_BoundingBoxCoordinateP_RowsOnePDefaultTypeInternal _PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_;
PROTOBUF_CONSTEXPR PlaceP_BoundingBoxCoordinateP::PlaceP_BoundingBoxCoordinateP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.threedimarray_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlaceP_BoundingBoxCoordinatePDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceP_BoundingBoxCoordinatePDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceP_BoundingBoxCoordinatePDefaultTypeInternal() {}
  union {
    PlaceP_BoundingBoxCoordinateP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceP_BoundingBoxCoordinatePDefaultTypeInternal _PlaceP_BoundingBoxCoordinateP_default_instance_;
PROTOBUF_CONSTEXPR PlaceP::PlaceP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.countrycode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fullname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.boundingboxcoordinatep_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlacePDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlacePDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlacePDefaultTypeInternal() {}
  union {
    PlaceP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlacePDefaultTypeInternal _PlaceP_default_instance_;
PROTOBUF_CONSTEXPR EntitiesP::EntitiesP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashtagentityp_)*/{}
  , /*decltype(_impl_.mediaentityp_)*/{}
  , /*decltype(_impl_.urlentityp_)*/{}
  , /*decltype(_impl_.usermentionentityp_)*/{}
  , /*decltype(_impl_.symbolentityp_)*/{}
  , /*decltype(_impl_.pollentityp_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntitiesPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntitiesPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntitiesPDefaultTypeInternal() {}
  union {
    EntitiesP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntitiesPDefaultTypeInternal _EntitiesP_default_instance_;
PROTOBUF_CONSTEXPR ExtendedEntitiesP::ExtendedEntitiesP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.media_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendedEntitiesPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedEntitiesPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedEntitiesPDefaultTypeInternal() {}
  union {
    ExtendedEntitiesP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedEntitiesPDefaultTypeInternal _ExtendedEntitiesP_default_instance_;
PROTOBUF_CONSTEXPR URLEntityP::URLEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.displayurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expandedurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct URLEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR URLEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~URLEntityPDefaultTypeInternal() {}
  union {
    URLEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 URLEntityPDefaultTypeInternal _URLEntityP_default_instance_;
PROTOBUF_CONSTEXPR HashtagEntityP::HashtagEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HashtagEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashtagEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashtagEntityPDefaultTypeInternal() {}
  union {
    HashtagEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashtagEntityPDefaultTypeInternal _HashtagEntityP_default_instance_;
PROTOBUF_CONSTEXPR MediaEntityP::MediaEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.displayurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expandedurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediaurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mediaurlhttps_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sourcestatusidstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sizes_)*/nullptr
  , /*decltype(_impl_.videoinfo_)*/nullptr
  , /*decltype(_impl_.additionalmediainfo_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.sourcestatusid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MediaEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaEntityPDefaultTypeInternal() {}
  union {
    MediaEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaEntityPDefaultTypeInternal _MediaEntityP_default_instance_;
PROTOBUF_CONSTEXPR UserMentionEntityP::UserMentionEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.screenname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserMentionEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserMentionEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserMentionEntityPDefaultTypeInternal() {}
  union {
    UserMentionEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserMentionEntityPDefaultTypeInternal _UserMentionEntityP_default_instance_;
PROTOBUF_CONSTEXPR SymbolEntityP::SymbolEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SymbolEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolEntityPDefaultTypeInternal() {}
  union {
    SymbolEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolEntityPDefaultTypeInternal _SymbolEntityP_default_instance_;
PROTOBUF_CONSTEXPR PollEntityP::PollEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.enddatetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.durationminutes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PollEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollEntityPDefaultTypeInternal() {}
  union {
    PollEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollEntityPDefaultTypeInternal _PollEntityP_default_instance_;
PROTOBUF_CONSTEXPR MediaSizesEntityP::MediaSizesEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.thumb_)*/nullptr
  , /*decltype(_impl_.large_)*/nullptr
  , /*decltype(_impl_.medium_)*/nullptr
  , /*decltype(_impl_.small_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MediaSizesEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaSizesEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaSizesEntityPDefaultTypeInternal() {}
  union {
    MediaSizesEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaSizesEntityPDefaultTypeInternal _MediaSizesEntityP_default_instance_;
PROTOBUF_CONSTEXPR SizeEntityP::SizeEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SizeEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SizeEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SizeEntityPDefaultTypeInternal() {}
  union {
    SizeEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SizeEntityPDefaultTypeInternal _SizeEntityP_default_instance_;
PROTOBUF_CONSTEXPR VariantEntityP::VariantEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contenttype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bitrate_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariantEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariantEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariantEntityPDefaultTypeInternal() {}
  union {
    VariantEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariantEntityPDefaultTypeInternal _VariantEntityP_default_instance_;
PROTOBUF_CONSTEXPR VideoEntityP::VideoEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aspectratio_)*/{}
  , /*decltype(_impl_._aspectratio_cached_byte_size_)*/{0}
  , /*decltype(_impl_.variants_)*/{}
  , /*decltype(_impl_.durationmillis_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoEntityPDefaultTypeInternal() {}
  union {
    VideoEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoEntityPDefaultTypeInternal _VideoEntityP_default_instance_;
PROTOBUF_CONSTEXPR AdditionalMediaInfoEntityP::AdditionalMediaInfoEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.embeddable_)*/false
  , /*decltype(_impl_.monetizable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdditionalMediaInfoEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdditionalMediaInfoEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdditionalMediaInfoEntityPDefaultTypeInternal() {}
  union {
    AdditionalMediaInfoEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdditionalMediaInfoEntityPDefaultTypeInternal _AdditionalMediaInfoEntityP_default_instance_;
PROTOBUF_CONSTEXPR OptionEntityP::OptionEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionEntityPDefaultTypeInternal() {}
  union {
    OptionEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionEntityPDefaultTypeInternal _OptionEntityP_default_instance_;
PROTOBUF_CONSTEXPR MatchingRulesEntityP::MatchingRulesEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchingRulesEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchingRulesEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchingRulesEntityPDefaultTypeInternal() {}
  union {
    MatchingRulesEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchingRulesEntityPDefaultTypeInternal _MatchingRulesEntityP_default_instance_;
PROTOBUF_CONSTEXPR MapFieldEntry::MapFieldEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapFieldEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapFieldEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapFieldEntryDefaultTypeInternal() {}
  union {
    MapFieldEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapFieldEntryDefaultTypeInternal _MapFieldEntry_default_instance_;
PROTOBUF_CONSTEXPR ExtendedTweetEntityP::ExtendedTweetEntityP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.displaytextrange_)*/{}
  , /*decltype(_impl_._displaytextrange_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fulltext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entities_)*/nullptr
  , /*decltype(_impl_.extendedentities_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendedTweetEntityPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedTweetEntityPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedTweetEntityPDefaultTypeInternal() {}
  union {
    ExtendedTweetEntityP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedTweetEntityPDefaultTypeInternal _ExtendedTweetEntityP_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_TweetStatusP_2eproto[24];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TweetStatusP_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TweetStatusP_2eproto = nullptr;

const uint32_t TableStruct_TweetStatusP_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.createdat_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.idstr_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.istruncated_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.inreplytostatusid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.inreplytouserid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.inreplytoscreenname_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.userp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.coordinates_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.place_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.quotedstatusid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.isquotestatus_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.quotedstatus_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.retweetedstatus_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.quotecount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.replycount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.retweetcount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.favoritecount_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.entitiesp_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.extendedtweet_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.isfavorited_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.isretweeted_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.ispossiblysensitive_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.filterlevel_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.matchingrules_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.currentuserretweetedid_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.withheldcopyright_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.withheldincountries_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.withheldscope_),
  PROTOBUF_FIELD_OFFSET(::proto::TweetStatusP, _impl_.displaytextrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.idstr_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.screenname_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.isprotected_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.isverified_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.followerscount_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.friendscount_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.listedcount_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.favouritescount_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.statusescount_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.createdat_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilebannerimageurl_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profileimageurlhttps_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.isdefaultprofile_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.withheldincountries_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.withheldscope_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.descriptionurlentities_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.isgeoenabled_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.iscontributorsenabled_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilebackgroundcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilebackgroundimageurl_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilebackgroundimageurlhttps_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilebackgroundtiled_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profileimageurl_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilelinkcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilesidebarbordercolor_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profilesidebarfillcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profiletextcolor_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.profileusebackgroundimage_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.isdefaultprofileimage_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.utcoffset_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.translator_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.isfollowrequestsent_),
  PROTOBUF_FIELD_OFFSET(::proto::UserP, _impl_.showallinlinemedia_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CoordinatesP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CoordinatesP, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proto::CoordinatesP, _impl_.coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP, _impl_.coordinate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP, _impl_.rowstwop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP_BoundingBoxCoordinateP, _impl_.threedimarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.countrycode_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.placetype_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.fullname_),
  PROTOBUF_FIELD_OFFSET(::proto::PlaceP, _impl_.boundingboxcoordinatep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _impl_.hashtagentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _impl_.mediaentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _impl_.urlentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _impl_.usermentionentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _impl_.symbolentityp_),
  PROTOBUF_FIELD_OFFSET(::proto::EntitiesP, _impl_.pollentityp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedEntitiesP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedEntitiesP, _impl_.media_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, _impl_.displayurl_),
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, _impl_.expandedurl_),
  PROTOBUF_FIELD_OFFSET(::proto::URLEntityP, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::HashtagEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HashtagEntityP, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::proto::HashtagEntityP, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.displayurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.expandedurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.idstr_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.mediaurl_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.mediaurlhttps_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.sizes_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.sourcestatusid_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.sourcestatusidstr_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.videoinfo_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaEntityP, _impl_.additionalmediainfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _impl_.idstr_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::UserMentionEntityP, _impl_.screenname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SymbolEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SymbolEntityP, _impl_.indices_),
  PROTOBUF_FIELD_OFFSET(::proto::SymbolEntityP, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, _impl_.enddatetime_),
  PROTOBUF_FIELD_OFFSET(::proto::PollEntityP, _impl_.durationminutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, _impl_.thumb_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, _impl_.large_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, _impl_.medium_),
  PROTOBUF_FIELD_OFFSET(::proto::MediaSizesEntityP, _impl_.small_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto::SizeEntityP, _impl_.resize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, _impl_.bitrate_),
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, _impl_.contenttype_),
  PROTOBUF_FIELD_OFFSET(::proto::VariantEntityP, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, _impl_.aspectratio_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, _impl_.durationmillis_),
  PROTOBUF_FIELD_OFFSET(::proto::VideoEntityP, _impl_.variants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, _impl_.embeddable_),
  PROTOBUF_FIELD_OFFSET(::proto::AdditionalMediaInfoEntityP, _impl_.monetizable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::OptionEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::OptionEntityP, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::proto::OptionEntityP, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::MatchingRulesEntityP, _impl_.idstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MapFieldEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MapFieldEntry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proto::MapFieldEntry, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTweetEntityP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTweetEntityP, _impl_.fulltext_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTweetEntityP, _impl_.displaytextrange_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTweetEntityP, _impl_.entities_),
  PROTOBUF_FIELD_OFFSET(::proto::ExtendedTweetEntityP, _impl_.extendedentities_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::TweetStatusP)},
  { 40, -1, -1, sizeof(::proto::UserP)},
  { 86, -1, -1, sizeof(::proto::CoordinatesP)},
  { 94, -1, -1, sizeof(::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP)},
  { 101, -1, -1, sizeof(::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP)},
  { 108, -1, -1, sizeof(::proto::PlaceP_BoundingBoxCoordinateP)},
  { 116, -1, -1, sizeof(::proto::PlaceP)},
  { 130, -1, -1, sizeof(::proto::EntitiesP)},
  { 142, -1, -1, sizeof(::proto::ExtendedEntitiesP)},
  { 149, -1, -1, sizeof(::proto::URLEntityP)},
  { 159, -1, -1, sizeof(::proto::HashtagEntityP)},
  { 167, -1, -1, sizeof(::proto::MediaEntityP)},
  { 187, -1, -1, sizeof(::proto::UserMentionEntityP)},
  { 198, -1, -1, sizeof(::proto::SymbolEntityP)},
  { 206, -1, -1, sizeof(::proto::PollEntityP)},
  { 215, -1, -1, sizeof(::proto::MediaSizesEntityP)},
  { 225, -1, -1, sizeof(::proto::SizeEntityP)},
  { 234, -1, -1, sizeof(::proto::VariantEntityP)},
  { 243, -1, -1, sizeof(::proto::VideoEntityP)},
  { 252, -1, -1, sizeof(::proto::AdditionalMediaInfoEntityP)},
  { 262, -1, -1, sizeof(::proto::OptionEntityP)},
  { 270, -1, -1, sizeof(::proto::MatchingRulesEntityP)},
  { 279, -1, -1, sizeof(::proto::MapFieldEntry)},
  { 287, -1, -1, sizeof(::proto::ExtendedTweetEntityP)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_TweetStatusP_default_instance_._instance,
  &::proto::_UserP_default_instance_._instance,
  &::proto::_CoordinatesP_default_instance_._instance,
  &::proto::_PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP_default_instance_._instance,
  &::proto::_PlaceP_BoundingBoxCoordinateP_RowsOneP_default_instance_._instance,
  &::proto::_PlaceP_BoundingBoxCoordinateP_default_instance_._instance,
  &::proto::_PlaceP_default_instance_._instance,
  &::proto::_EntitiesP_default_instance_._instance,
  &::proto::_ExtendedEntitiesP_default_instance_._instance,
  &::proto::_URLEntityP_default_instance_._instance,
  &::proto::_HashtagEntityP_default_instance_._instance,
  &::proto::_MediaEntityP_default_instance_._instance,
  &::proto::_UserMentionEntityP_default_instance_._instance,
  &::proto::_SymbolEntityP_default_instance_._instance,
  &::proto::_PollEntityP_default_instance_._instance,
  &::proto::_MediaSizesEntityP_default_instance_._instance,
  &::proto::_SizeEntityP_default_instance_._instance,
  &::proto::_VariantEntityP_default_instance_._instance,
  &::proto::_VideoEntityP_default_instance_._instance,
  &::proto::_AdditionalMediaInfoEntityP_default_instance_._instance,
  &::proto::_OptionEntityP_default_instance_._instance,
  &::proto::_MatchingRulesEntityP_default_instance_._instance,
  &::proto::_MapFieldEntry_default_instance_._instance,
  &::proto::_ExtendedTweetEntityP_default_instance_._instance,
};

const char descriptor_table_protodef_TweetStatusP_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TweetStatusP.proto\022\005proto\"\250\007\n\014TweetSta"
  "tusP\022\021\n\tcreatedAt\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\r\n\005i"
  "dStr\030\003 \001(\t\022\014\n\004text\030\004 \001(\t\022\016\n\006source\030\005 \001(\t"
  "\022\023\n\013isTruncated\030\006 \001(\010\022\031\n\021inReplyToStatus"
  "Id\030\007 \001(\003\022\027\n\017inReplyToUserId\030\010 \001(\003\022\033\n\023inR"
  "eplyToScreenName\030\t \001(\t\022\033\n\005userP\030\n \001(\0132\014."
  "proto.UserP\022(\n\013coordinates\030\013 \001(\0132\023.proto"
  ".CoordinatesP\022\034\n\005place\030\014 \001(\0132\r.proto.Pla"
  "ceP\022\026\n\016quotedStatusId\030\r \001(\003\022\025\n\risQuoteSt"
  "atus\030\016 \001(\010\022)\n\014quotedStatus\030\017 \001(\0132\023.proto"
  ".TweetStatusP\022,\n\017retweetedStatus\030\020 \001(\0132\023"
  ".proto.TweetStatusP\022\022\n\nquoteCount\030\021 \001(\005\022"
  "\022\n\nreplyCount\030\022 \001(\005\022\024\n\014retweetCount\030\023 \001("
  "\005\022\025\n\rfavoriteCount\030\024 \001(\005\022#\n\tentitiesP\030\025 "
  "\001(\0132\020.proto.EntitiesP\0222\n\rextendedTweet\030\026"
  " \001(\0132\033.proto.ExtendedTweetEntityP\022\023\n\013isF"
  "avorited\030\027 \001(\010\022\023\n\013isRetweeted\030\030 \001(\010\022\033\n\023i"
  "sPossiblySensitive\030\031 \001(\010\022\023\n\013filterLevel\030"
  "\032 \001(\t\022\014\n\004lang\030\033 \001(\t\0222\n\rmatchingRules\030\034 \003"
  "(\0132\033.proto.MatchingRulesEntityP\022\036\n\026curre"
  "ntUserRetweetedId\030\035 \001(\003\022$\n\006scopes\030\036 \003(\0132"
  "\024.proto.MapFieldEntry\022\031\n\021withheldCopyrig"
  "ht\030\037 \001(\010\022\033\n\023withheldInCountries\030  \003(\t\022\025\n"
  "\rwithheldScope\030! \001(\t\022\030\n\020displayTextRange"
  "\030\" \003(\005\"\370\007\n\005UserP\022\n\n\002id\030\001 \001(\003\022\r\n\005idStr\030\002 "
  "\001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nscreenName\030\004 \001(\t\022\020\n"
  "\010location\030\005 \001(\t\022\013\n\003url\030\006 \001(\t\022\023\n\013descript"
  "ion\030\007 \001(\t\022\023\n\013isProtected\030\010 \001(\010\022\022\n\nisVeri"
  "fied\030\t \001(\010\022\026\n\016followersCount\030\n \001(\005\022\024\n\014fr"
  "iendsCount\030\013 \001(\005\022\023\n\013listedCount\030\014 \001(\005\022\027\n"
  "\017favouritesCount\030\r \001(\005\022\025\n\rstatusesCount\030"
  "\016 \001(\005\022\021\n\tcreatedAt\030\017 \001(\t\022\035\n\025profileBanne"
  "rImageUrl\030\020 \001(\t\022\034\n\024profileImageUrlHttps\030"
  "\021 \001(\t\022\030\n\020isDefaultProfile\030\022 \001(\010\022\033\n\023withh"
  "eldInCountries\030\023 \003(\t\022\025\n\rwithheldScope\030\024 "
  "\001(\t\0221\n\026descriptionURLEntities\030\025 \001(\0132\021.pr"
  "oto.URLEntityP\022\024\n\014isGeoEnabled\030\026 \001(\010\022\014\n\004"
  "lang\030\027 \001(\t\022\035\n\025isContributorsEnabled\030\030 \001("
  "\010\022\036\n\026profileBackgroundColor\030\031 \001(\t\022!\n\031pro"
  "fileBackgroundImageUrl\030\032 \001(\t\022&\n\036profileB"
  "ackgroundImageUrlHttps\030\033 \001(\t\022\036\n\026profileB"
  "ackgroundTiled\030\034 \001(\010\022\027\n\017profileImageUrl\030"
  "\035 \001(\t\022\030\n\020profileLinkColor\030\036 \001(\t\022!\n\031profi"
  "leSidebarBorderColor\030\037 \001(\t\022\037\n\027profileSid"
  "ebarFillColor\030  \001(\t\022\030\n\020profileTextColor\030"
  "! \001(\t\022!\n\031profileUseBackgroundImage\030\" \001(\010"
  "\022\035\n\025isDefaultProfileImage\030# \001(\010\022\021\n\tutcOf"
  "fset\030$ \001(\005\022\020\n\010timeZone\030% \001(\t\022\022\n\ntranslat"
  "or\030& \001(\010\022\033\n\023isFollowRequestSent\030\' \001(\010\022\032\n"
  "\022showAllInlineMedia\030( \001(\010\"1\n\014Coordinates"
  "P\022\014\n\004type\030\001 \001(\t\022\023\n\013coordinates\030\002 \003(\001\"\245\003\n"
  "\006PlaceP\022\014\n\004name\030\001 \001(\t\022\023\n\013countryCode\030\002 \001"
  "(\t\022\n\n\002id\030\003 \001(\t\022\017\n\007country\030\004 \001(\t\022\021\n\tplace"
  "Type\030\005 \001(\t\022\013\n\003url\030\006 \001(\t\022\020\n\010fullName\030\007 \001("
  "\t\022D\n\026boundingBoxCoordinateP\030\010 \001(\0132$.prot"
  "o.PlaceP.BoundingBoxCoordinateP\032\342\001\n\026Boun"
  "dingBoxCoordinateP\022\014\n\004type\030\001 \001(\t\022D\n\rthre"
  "eDimArray\030\002 \003(\0132-.proto.PlaceP.BoundingB"
  "oxCoordinateP.RowsOneP\032t\n\010RowsOneP\022H\n\010ro"
  "wsTwoP\030\001 \003(\01326.proto.PlaceP.BoundingBoxC"
  "oordinateP.RowsOneP.RowsTwoP\032\036\n\010RowsTwoP"
  "\022\022\n\ncoordinate\030\001 \003(\001\"\231\002\n\tEntitiesP\022-\n\016ha"
  "shtagEntityP\030\001 \003(\0132\025.proto.HashtagEntity"
  "P\022)\n\014mediaEntityP\030\002 \003(\0132\023.proto.MediaEnt"
  "ityP\022%\n\nurlEntityP\030\003 \003(\0132\021.proto.URLEnti"
  "tyP\0225\n\022userMentionEntityP\030\004 \003(\0132\031.proto."
  "UserMentionEntityP\022+\n\rsymbolEntityP\030\005 \003("
  "\0132\024.proto.SymbolEntityP\022\'\n\013pollEntityP\030\006"
  " \003(\0132\022.proto.PollEntityP\"7\n\021ExtendedEnti"
  "tiesP\022\"\n\005media\030\001 \003(\0132\023.proto.MediaEntity"
  "P\"S\n\nURLEntityP\022\017\n\007indices\030\001 \003(\005\022\022\n\ndisp"
  "layURL\030\002 \001(\t\022\023\n\013expandedURL\030\003 \001(\t\022\013\n\003url"
  "\030\004 \001(\t\"/\n\016HashtagEntityP\022\017\n\007indices\030\001 \003("
  "\005\022\014\n\004text\030\002 \001(\t\"\353\002\n\014MediaEntityP\022\022\n\ndisp"
  "layURL\030\001 \001(\t\022\023\n\013expandedURL\030\002 \001(\t\022\n\n\002id\030"
  "\003 \001(\003\022\r\n\005idStr\030\004 \001(\t\022\017\n\007indices\030\005 \003(\005\022\020\n"
  "\010mediaURL\030\006 \001(\t\022\025\n\rmediaURLHttps\030\007 \001(\t\022\'"
  "\n\005sizes\030\010 \001(\0132\030.proto.MediaSizesEntityP\022"
  "\014\n\004type\030\t \001(\t\022\026\n\016sourceStatusId\030\n \001(\003\022\031\n"
  "\021sourceStatusIdStr\030\013 \001(\t\022\013\n\003url\030\014 \001(\t\022&\n"
  "\tvideoInfo\030\r \001(\0132\023.proto.VideoEntityP\022>\n"
  "\023additionalMediaInfo\030\016 \001(\0132!.proto.Addit"
  "ionalMediaInfoEntityP\"b\n\022UserMentionEnti"
  "tyP\022\n\n\002id\030\001 \001(\003\022\r\n\005idStr\030\002 \001(\t\022\017\n\007indice"
  "s\030\003 \003(\005\022\014\n\004name\030\004 \001(\t\022\022\n\nscreenName\030\005 \001("
  "\t\".\n\rSymbolEntityP\022\017\n\007indices\030\001 \003(\005\022\014\n\004t"
  "ext\030\002 \001(\t\"b\n\013PollEntityP\022%\n\007options\030\001 \003("
  "\0132\024.proto.OptionEntityP\022\023\n\013endDatetime\030\002"
  " \001(\t\022\027\n\017durationMinutes\030\003 \001(\t\"\240\001\n\021MediaS"
  "izesEntityP\022!\n\005thumb\030\001 \001(\0132\022.proto.SizeE"
  "ntityP\022!\n\005large\030\002 \001(\0132\022.proto.SizeEntity"
  "P\022\"\n\006medium\030\003 \001(\0132\022.proto.SizeEntityP\022!\n"
  "\005small\030\004 \001(\0132\022.proto.SizeEntityP\"<\n\013Size"
  "EntityP\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\016"
  "\n\006resize\030\003 \001(\t\"C\n\016VariantEntityP\022\017\n\007bitr"
  "ate\030\001 \001(\003\022\023\n\013contentType\030\002 \001(\t\022\013\n\003url\030\003 "
  "\001(\t\"d\n\014VideoEntityP\022\023\n\013aspectRatio\030\001 \003(\005"
  "\022\026\n\016durationMillis\030\002 \001(\005\022\'\n\010variants\030\003 \003"
  "(\0132\025.proto.VariantEntityP\"i\n\032AdditionalM"
  "ediaInfoEntityP\022\r\n\005title\030\001 \001(\t\022\023\n\013descri"
  "ption\030\002 \001(\t\022\022\n\nembeddable\030\003 \001(\010\022\023\n\013monet"
  "izable\030\004 \001(\010\"/\n\rOptionEntityP\022\020\n\010positio"
  "n\030\001 \001(\005\022\014\n\004text\030\002 \001(\t\">\n\024MatchingRulesEn"
  "tityP\022\013\n\003tag\030\001 \001(\t\022\n\n\002id\030\002 \001(\003\022\r\n\005idStr\030"
  "\003 \001(\t\"+\n\rMapFieldEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\010\"\232\001\n\024ExtendedTweetEntityP\022\020\n\010f"
  "ullText\030\001 \001(\t\022\030\n\020displayTextRange\030\002 \003(\005\022"
  "\"\n\010entities\030\003 \001(\0132\020.proto.EntitiesP\0222\n\020e"
  "xtendedEntities\030\004 \001(\0132\030.proto.ExtendedEn"
  "titiesPb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_TweetStatusP_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TweetStatusP_2eproto = {
    false, false, 4375, descriptor_table_protodef_TweetStatusP_2eproto,
    "TweetStatusP.proto",
    &descriptor_table_TweetStatusP_2eproto_once, nullptr, 0, 24,
    schemas, file_default_instances, TableStruct_TweetStatusP_2eproto::offsets,
    file_level_metadata_TweetStatusP_2eproto, file_level_enum_descriptors_TweetStatusP_2eproto,
    file_level_service_descriptors_TweetStatusP_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TweetStatusP_2eproto_getter() {
  return &descriptor_table_TweetStatusP_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TweetStatusP_2eproto(&descriptor_table_TweetStatusP_2eproto);
namespace proto {

// ===================================================================

class TweetStatusP::_Internal {
 public:
  static const ::proto::UserP& userp(const TweetStatusP* msg);
  static const ::proto::CoordinatesP& coordinates(const TweetStatusP* msg);
  static const ::proto::PlaceP& place(const TweetStatusP* msg);
  static const ::proto::TweetStatusP& quotedstatus(const TweetStatusP* msg);
  static const ::proto::TweetStatusP& retweetedstatus(const TweetStatusP* msg);
  static const ::proto::EntitiesP& entitiesp(const TweetStatusP* msg);
  static const ::proto::ExtendedTweetEntityP& extendedtweet(const TweetStatusP* msg);
};

const ::proto::UserP&
TweetStatusP::_Internal::userp(const TweetStatusP* msg) {
  return *msg->_impl_.userp_;
}
const ::proto::CoordinatesP&
TweetStatusP::_Internal::coordinates(const TweetStatusP* msg) {
  return *msg->_impl_.coordinates_;
}
const ::proto::PlaceP&
TweetStatusP::_Internal::place(const TweetStatusP* msg) {
  return *msg->_impl_.place_;
}
const ::proto::TweetStatusP&
TweetStatusP::_Internal::quotedstatus(const TweetStatusP* msg) {
  return *msg->_impl_.quotedstatus_;
}
const ::proto::TweetStatusP&
TweetStatusP::_Internal::retweetedstatus(const TweetStatusP* msg) {
  return *msg->_impl_.retweetedstatus_;
}
const ::proto::EntitiesP&
TweetStatusP::_Internal::entitiesp(const TweetStatusP* msg) {
  return *msg->_impl_.entitiesp_;
}
const ::proto::ExtendedTweetEntityP&
TweetStatusP::_Internal::extendedtweet(const TweetStatusP* msg) {
  return *msg->_impl_.extendedtweet_;
}
TweetStatusP::TweetStatusP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.TweetStatusP)
}
TweetStatusP::TweetStatusP(const TweetStatusP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TweetStatusP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matchingrules_){from._impl_.matchingrules_}
    , decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.withheldincountries_){from._impl_.withheldincountries_}
    , decltype(_impl_.displaytextrange_){from._impl_.displaytextrange_}
    , /*decltype(_impl_._displaytextrange_cached_byte_size_)*/{0}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.inreplytoscreenname_){}
    , decltype(_impl_.filterlevel_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.withheldscope_){}
    , decltype(_impl_.userp_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.place_){nullptr}
    , decltype(_impl_.quotedstatus_){nullptr}
    , decltype(_impl_.retweetedstatus_){nullptr}
    , decltype(_impl_.entitiesp_){nullptr}
    , decltype(_impl_.extendedtweet_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.inreplytostatusid_){}
    , decltype(_impl_.inreplytouserid_){}
    , decltype(_impl_.quotedstatusid_){}
    , decltype(_impl_.istruncated_){}
    , decltype(_impl_.isquotestatus_){}
    , decltype(_impl_.isfavorited_){}
    , decltype(_impl_.isretweeted_){}
    , decltype(_impl_.quotecount_){}
    , decltype(_impl_.replycount_){}
    , decltype(_impl_.retweetcount_){}
    , decltype(_impl_.favoritecount_){}
    , decltype(_impl_.ispossiblysensitive_){}
    , decltype(_impl_.withheldcopyright_){}
    , decltype(_impl_.currentuserretweetedid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.createdat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createdat().empty()) {
    _this->_impl_.createdat_.Set(from._internal_createdat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inreplytoscreenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inreplytoscreenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inreplytoscreenname().empty()) {
    _this->_impl_.inreplytoscreenname_.Set(from._internal_inreplytoscreenname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filterlevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filterlevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filterlevel().empty()) {
    _this->_impl_.filterlevel_.Set(from._internal_filterlevel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.withheldscope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.withheldscope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_withheldscope().empty()) {
    _this->_impl_.withheldscope_.Set(from._internal_withheldscope(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_userp()) {
    _this->_impl_.userp_ = new ::proto::UserP(*from._impl_.userp_);
  }
  if (from._internal_has_coordinates()) {
    _this->_impl_.coordinates_ = new ::proto::CoordinatesP(*from._impl_.coordinates_);
  }
  if (from._internal_has_place()) {
    _this->_impl_.place_ = new ::proto::PlaceP(*from._impl_.place_);
  }
  if (from._internal_has_quotedstatus()) {
    _this->_impl_.quotedstatus_ = new ::proto::TweetStatusP(*from._impl_.quotedstatus_);
  }
  if (from._internal_has_retweetedstatus()) {
    _this->_impl_.retweetedstatus_ = new ::proto::TweetStatusP(*from._impl_.retweetedstatus_);
  }
  if (from._internal_has_entitiesp()) {
    _this->_impl_.entitiesp_ = new ::proto::EntitiesP(*from._impl_.entitiesp_);
  }
  if (from._internal_has_extendedtweet()) {
    _this->_impl_.extendedtweet_ = new ::proto::ExtendedTweetEntityP(*from._impl_.extendedtweet_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentuserretweetedid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.currentuserretweetedid_));
  // @@protoc_insertion_point(copy_constructor:proto.TweetStatusP)
}

inline void TweetStatusP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matchingrules_){arena}
    , decltype(_impl_.scopes_){arena}
    , decltype(_impl_.withheldincountries_){arena}
    , decltype(_impl_.displaytextrange_){arena}
    , /*decltype(_impl_._displaytextrange_cached_byte_size_)*/{0}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.inreplytoscreenname_){}
    , decltype(_impl_.filterlevel_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.withheldscope_){}
    , decltype(_impl_.userp_){nullptr}
    , decltype(_impl_.coordinates_){nullptr}
    , decltype(_impl_.place_){nullptr}
    , decltype(_impl_.quotedstatus_){nullptr}
    , decltype(_impl_.retweetedstatus_){nullptr}
    , decltype(_impl_.entitiesp_){nullptr}
    , decltype(_impl_.extendedtweet_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.inreplytostatusid_){int64_t{0}}
    , decltype(_impl_.inreplytouserid_){int64_t{0}}
    , decltype(_impl_.quotedstatusid_){int64_t{0}}
    , decltype(_impl_.istruncated_){false}
    , decltype(_impl_.isquotestatus_){false}
    , decltype(_impl_.isfavorited_){false}
    , decltype(_impl_.isretweeted_){false}
    , decltype(_impl_.quotecount_){0}
    , decltype(_impl_.replycount_){0}
    , decltype(_impl_.retweetcount_){0}
    , decltype(_impl_.favoritecount_){0}
    , decltype(_impl_.ispossiblysensitive_){false}
    , decltype(_impl_.withheldcopyright_){false}
    , decltype(_impl_.currentuserretweetedid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.createdat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inreplytoscreenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inreplytoscreenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filterlevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filterlevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.withheldscope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.withheldscope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TweetStatusP::~TweetStatusP() {
  // @@protoc_insertion_point(destructor:proto.TweetStatusP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TweetStatusP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matchingrules_.~RepeatedPtrField();
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.withheldincountries_.~RepeatedPtrField();
  _impl_.displaytextrange_.~RepeatedField();
  _impl_.createdat_.Destroy();
  _impl_.idstr_.Destroy();
  _impl_.text_.Destroy();
  _impl_.source_.Destroy();
  _impl_.inreplytoscreenname_.Destroy();
  _impl_.filterlevel_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.withheldscope_.Destroy();
  if (this != internal_default_instance()) delete _impl_.userp_;
  if (this != internal_default_instance()) delete _impl_.coordinates_;
  if (this != internal_default_instance()) delete _impl_.place_;
  if (this != internal_default_instance()) delete _impl_.quotedstatus_;
  if (this != internal_default_instance()) delete _impl_.retweetedstatus_;
  if (this != internal_default_instance()) delete _impl_.entitiesp_;
  if (this != internal_default_instance()) delete _impl_.extendedtweet_;
}

void TweetStatusP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TweetStatusP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TweetStatusP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matchingrules_.Clear();
  _impl_.scopes_.Clear();
  _impl_.withheldincountries_.Clear();
  _impl_.displaytextrange_.Clear();
  _impl_.createdat_.ClearToEmpty();
  _impl_.idstr_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _impl_.inreplytoscreenname_.ClearToEmpty();
  _impl_.filterlevel_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.withheldscope_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.userp_ != nullptr) {
    delete _impl_.userp_;
  }
  _impl_.userp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.place_ != nullptr) {
    delete _impl_.place_;
  }
  _impl_.place_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quotedstatus_ != nullptr) {
    delete _impl_.quotedstatus_;
  }
  _impl_.quotedstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.retweetedstatus_ != nullptr) {
    delete _impl_.retweetedstatus_;
  }
  _impl_.retweetedstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.entitiesp_ != nullptr) {
    delete _impl_.entitiesp_;
  }
  _impl_.entitiesp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extendedtweet_ != nullptr) {
    delete _impl_.extendedtweet_;
  }
  _impl_.extendedtweet_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currentuserretweetedid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.currentuserretweetedid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TweetStatusP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string createdAt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_createdat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.createdAt"));
        } else
          goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idStr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.idStr"));
        } else
          goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.text"));
        } else
          goto handle_unusual;
        continue;
      // string source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.source"));
        } else
          goto handle_unusual;
        continue;
      // bool isTruncated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.istruncated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 inReplyToStatusId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.inreplytostatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 inReplyToUserId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.inreplytouserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inReplyToScreenName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_inreplytoscreenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.inReplyToScreenName"));
        } else
          goto handle_unusual;
        continue;
      // .proto.UserP userP = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_userp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CoordinatesP coordinates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.PlaceP place = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_place(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 quotedStatusId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.quotedstatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isQuoteStatus = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.isquotestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TweetStatusP quotedStatus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_quotedstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TweetStatusP retweetedStatus = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_retweetedstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quoteCount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.quotecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 replyCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.replycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retweetCount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.retweetcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 favoriteCount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.favoritecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.EntitiesP entitiesP = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_entitiesp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ExtendedTweetEntityP extendedTweet = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedtweet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFavorited = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.isfavorited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isRetweeted = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.isretweeted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isPossiblySensitive = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.ispossiblysensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filterLevel = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_filterlevel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.filterLevel"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.lang"));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.MatchingRulesEntityP matchingRules = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_matchingrules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 currentUserRetweetedId = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.currentuserretweetedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.MapFieldEntry scopes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_scopes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool withheldCopyright = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.withheldcopyright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string withheldInCountries = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_withheldincountries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.withheldInCountries"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string withheldScope = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_withheldscope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.TweetStatusP.withheldScope"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 displayTextRange = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_displaytextrange(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_displaytextrange(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TweetStatusP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TweetStatusP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string createdAt = 1;
  if (!this->_internal_createdat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.createdAt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_createdat(), target);
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string idStr = 3;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.idStr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_idstr(), target);
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // string source = 5;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.source");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_source(), target);
  }

  // bool isTruncated = 6;
  if (this->_internal_istruncated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_istruncated(), target);
  }

  // int64 inReplyToStatusId = 7;
  if (this->_internal_inreplytostatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_inreplytostatusid(), target);
  }

  // int64 inReplyToUserId = 8;
  if (this->_internal_inreplytouserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_inreplytouserid(), target);
  }

  // string inReplyToScreenName = 9;
  if (!this->_internal_inreplytoscreenname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inreplytoscreenname().data(), static_cast<int>(this->_internal_inreplytoscreenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.inReplyToScreenName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_inreplytoscreenname(), target);
  }

  // .proto.UserP userP = 10;
  if (this->_internal_has_userp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::userp(this),
        _Internal::userp(this).GetCachedSize(), target, stream);
  }

  // .proto.CoordinatesP coordinates = 11;
  if (this->_internal_has_coordinates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::coordinates(this),
        _Internal::coordinates(this).GetCachedSize(), target, stream);
  }

  // .proto.PlaceP place = 12;
  if (this->_internal_has_place()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::place(this),
        _Internal::place(this).GetCachedSize(), target, stream);
  }

  // int64 quotedStatusId = 13;
  if (this->_internal_quotedstatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_quotedstatusid(), target);
  }

  // bool isQuoteStatus = 14;
  if (this->_internal_isquotestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_isquotestatus(), target);
  }

  // .proto.TweetStatusP quotedStatus = 15;
  if (this->_internal_has_quotedstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::quotedstatus(this),
        _Internal::quotedstatus(this).GetCachedSize(), target, stream);
  }

  // .proto.TweetStatusP retweetedStatus = 16;
  if (this->_internal_has_retweetedstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::retweetedstatus(this),
        _Internal::retweetedstatus(this).GetCachedSize(), target, stream);
  }

  // int32 quoteCount = 17;
  if (this->_internal_quotecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_quotecount(), target);
  }

  // int32 replyCount = 18;
  if (this->_internal_replycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_replycount(), target);
  }

  // int32 retweetCount = 19;
  if (this->_internal_retweetcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_retweetcount(), target);
  }

  // int32 favoriteCount = 20;
  if (this->_internal_favoritecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_favoritecount(), target);
  }

  // .proto.EntitiesP entitiesP = 21;
  if (this->_internal_has_entitiesp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::entitiesp(this),
        _Internal::entitiesp(this).GetCachedSize(), target, stream);
  }

  // .proto.ExtendedTweetEntityP extendedTweet = 22;
  if (this->_internal_has_extendedtweet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::extendedtweet(this),
        _Internal::extendedtweet(this).GetCachedSize(), target, stream);
  }

  // bool isFavorited = 23;
  if (this->_internal_isfavorited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_isfavorited(), target);
  }

  // bool isRetweeted = 24;
  if (this->_internal_isretweeted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_isretweeted(), target);
  }

  // bool isPossiblySensitive = 25;
  if (this->_internal_ispossiblysensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_ispossiblysensitive(), target);
  }

  // string filterLevel = 26;
  if (!this->_internal_filterlevel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filterlevel().data(), static_cast<int>(this->_internal_filterlevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.filterLevel");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_filterlevel(), target);
  }

  // string lang = 27;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.lang");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_lang(), target);
  }

  // repeated .proto.MatchingRulesEntityP matchingRules = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matchingrules_size()); i < n; i++) {
    const auto& repfield = this->_internal_matchingrules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 currentUserRetweetedId = 29;
  if (this->_internal_currentuserretweetedid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_currentuserretweetedid(), target);
  }

  // repeated .proto.MapFieldEntry scopes = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scopes_size()); i < n; i++) {
    const auto& repfield = this->_internal_scopes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool withheldCopyright = 31;
  if (this->_internal_withheldcopyright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_withheldcopyright(), target);
  }

  // repeated string withheldInCountries = 32;
  for (int i = 0, n = this->_internal_withheldincountries_size(); i < n; i++) {
    const auto& s = this->_internal_withheldincountries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.withheldInCountries");
    target = stream->WriteString(32, s, target);
  }

  // string withheldScope = 33;
  if (!this->_internal_withheldscope().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_withheldscope().data(), static_cast<int>(this->_internal_withheldscope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.TweetStatusP.withheldScope");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_withheldscope(), target);
  }

  // repeated int32 displayTextRange = 34;
  {
    int byte_size = _impl_._displaytextrange_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          34, _internal_displaytextrange(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TweetStatusP)
  return target;
}

size_t TweetStatusP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TweetStatusP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MatchingRulesEntityP matchingRules = 28;
  total_size += 2UL * this->_internal_matchingrules_size();
  for (const auto& msg : this->_impl_.matchingrules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.MapFieldEntry scopes = 30;
  total_size += 2UL * this->_internal_scopes_size();
  for (const auto& msg : this->_impl_.scopes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string withheldInCountries = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.withheldincountries_.size());
  for (int i = 0, n = _impl_.withheldincountries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.withheldincountries_.Get(i));
  }

  // repeated int32 displayTextRange = 34;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.displaytextrange_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._displaytextrange_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string createdAt = 1;
  if (!this->_internal_createdat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string idStr = 3;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string source = 5;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string inReplyToScreenName = 9;
  if (!this->_internal_inreplytoscreenname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inreplytoscreenname());
  }

  // string filterLevel = 26;
  if (!this->_internal_filterlevel().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filterlevel());
  }

  // string lang = 27;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string withheldScope = 33;
  if (!this->_internal_withheldscope().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_withheldscope());
  }

  // .proto.UserP userP = 10;
  if (this->_internal_has_userp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userp_);
  }

  // .proto.CoordinatesP coordinates = 11;
  if (this->_internal_has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinates_);
  }

  // .proto.PlaceP place = 12;
  if (this->_internal_has_place()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.place_);
  }

  // .proto.TweetStatusP quotedStatus = 15;
  if (this->_internal_has_quotedstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quotedstatus_);
  }

  // .proto.TweetStatusP retweetedStatus = 16;
  if (this->_internal_has_retweetedstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.retweetedstatus_);
  }

  // .proto.EntitiesP entitiesP = 21;
  if (this->_internal_has_entitiesp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entitiesp_);
  }

  // .proto.ExtendedTweetEntityP extendedTweet = 22;
  if (this->_internal_has_extendedtweet()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extendedtweet_);
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 inReplyToStatusId = 7;
  if (this->_internal_inreplytostatusid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_inreplytostatusid());
  }

  // int64 inReplyToUserId = 8;
  if (this->_internal_inreplytouserid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_inreplytouserid());
  }

  // int64 quotedStatusId = 13;
  if (this->_internal_quotedstatusid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_quotedstatusid());
  }

  // bool isTruncated = 6;
  if (this->_internal_istruncated() != 0) {
    total_size += 1 + 1;
  }

  // bool isQuoteStatus = 14;
  if (this->_internal_isquotestatus() != 0) {
    total_size += 1 + 1;
  }

  // bool isFavorited = 23;
  if (this->_internal_isfavorited() != 0) {
    total_size += 2 + 1;
  }

  // bool isRetweeted = 24;
  if (this->_internal_isretweeted() != 0) {
    total_size += 2 + 1;
  }

  // int32 quoteCount = 17;
  if (this->_internal_quotecount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_quotecount());
  }

  // int32 replyCount = 18;
  if (this->_internal_replycount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_replycount());
  }

  // int32 retweetCount = 19;
  if (this->_internal_retweetcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_retweetcount());
  }

  // int32 favoriteCount = 20;
  if (this->_internal_favoritecount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_favoritecount());
  }

  // bool isPossiblySensitive = 25;
  if (this->_internal_ispossiblysensitive() != 0) {
    total_size += 2 + 1;
  }

  // bool withheldCopyright = 31;
  if (this->_internal_withheldcopyright() != 0) {
    total_size += 2 + 1;
  }

  // int64 currentUserRetweetedId = 29;
  if (this->_internal_currentuserretweetedid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_currentuserretweetedid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TweetStatusP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TweetStatusP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TweetStatusP::GetClassData() const { return &_class_data_; }


void TweetStatusP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TweetStatusP*>(&to_msg);
  auto& from = static_cast<const TweetStatusP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.TweetStatusP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matchingrules_.MergeFrom(from._impl_.matchingrules_);
  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.withheldincountries_.MergeFrom(from._impl_.withheldincountries_);
  _this->_impl_.displaytextrange_.MergeFrom(from._impl_.displaytextrange_);
  if (!from._internal_createdat().empty()) {
    _this->_internal_set_createdat(from._internal_createdat());
  }
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (!from._internal_inreplytoscreenname().empty()) {
    _this->_internal_set_inreplytoscreenname(from._internal_inreplytoscreenname());
  }
  if (!from._internal_filterlevel().empty()) {
    _this->_internal_set_filterlevel(from._internal_filterlevel());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_withheldscope().empty()) {
    _this->_internal_set_withheldscope(from._internal_withheldscope());
  }
  if (from._internal_has_userp()) {
    _this->_internal_mutable_userp()->::proto::UserP::MergeFrom(
        from._internal_userp());
  }
  if (from._internal_has_coordinates()) {
    _this->_internal_mutable_coordinates()->::proto::CoordinatesP::MergeFrom(
        from._internal_coordinates());
  }
  if (from._internal_has_place()) {
    _this->_internal_mutable_place()->::proto::PlaceP::MergeFrom(
        from._internal_place());
  }
  if (from._internal_has_quotedstatus()) {
    _this->_internal_mutable_quotedstatus()->::proto::TweetStatusP::MergeFrom(
        from._internal_quotedstatus());
  }
  if (from._internal_has_retweetedstatus()) {
    _this->_internal_mutable_retweetedstatus()->::proto::TweetStatusP::MergeFrom(
        from._internal_retweetedstatus());
  }
  if (from._internal_has_entitiesp()) {
    _this->_internal_mutable_entitiesp()->::proto::EntitiesP::MergeFrom(
        from._internal_entitiesp());
  }
  if (from._internal_has_extendedtweet()) {
    _this->_internal_mutable_extendedtweet()->::proto::ExtendedTweetEntityP::MergeFrom(
        from._internal_extendedtweet());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_inreplytostatusid() != 0) {
    _this->_internal_set_inreplytostatusid(from._internal_inreplytostatusid());
  }
  if (from._internal_inreplytouserid() != 0) {
    _this->_internal_set_inreplytouserid(from._internal_inreplytouserid());
  }
  if (from._internal_quotedstatusid() != 0) {
    _this->_internal_set_quotedstatusid(from._internal_quotedstatusid());
  }
  if (from._internal_istruncated() != 0) {
    _this->_internal_set_istruncated(from._internal_istruncated());
  }
  if (from._internal_isquotestatus() != 0) {
    _this->_internal_set_isquotestatus(from._internal_isquotestatus());
  }
  if (from._internal_isfavorited() != 0) {
    _this->_internal_set_isfavorited(from._internal_isfavorited());
  }
  if (from._internal_isretweeted() != 0) {
    _this->_internal_set_isretweeted(from._internal_isretweeted());
  }
  if (from._internal_quotecount() != 0) {
    _this->_internal_set_quotecount(from._internal_quotecount());
  }
  if (from._internal_replycount() != 0) {
    _this->_internal_set_replycount(from._internal_replycount());
  }
  if (from._internal_retweetcount() != 0) {
    _this->_internal_set_retweetcount(from._internal_retweetcount());
  }
  if (from._internal_favoritecount() != 0) {
    _this->_internal_set_favoritecount(from._internal_favoritecount());
  }
  if (from._internal_ispossiblysensitive() != 0) {
    _this->_internal_set_ispossiblysensitive(from._internal_ispossiblysensitive());
  }
  if (from._internal_withheldcopyright() != 0) {
    _this->_internal_set_withheldcopyright(from._internal_withheldcopyright());
  }
  if (from._internal_currentuserretweetedid() != 0) {
    _this->_internal_set_currentuserretweetedid(from._internal_currentuserretweetedid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TweetStatusP::CopyFrom(const TweetStatusP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TweetStatusP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetStatusP::IsInitialized() const {
  return true;
}

void TweetStatusP::InternalSwap(TweetStatusP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.matchingrules_.InternalSwap(&other->_impl_.matchingrules_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.withheldincountries_.InternalSwap(&other->_impl_.withheldincountries_);
  _impl_.displaytextrange_.InternalSwap(&other->_impl_.displaytextrange_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createdat_, lhs_arena,
      &other->_impl_.createdat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inreplytoscreenname_, lhs_arena,
      &other->_impl_.inreplytoscreenname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filterlevel_, lhs_arena,
      &other->_impl_.filterlevel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.withheldscope_, lhs_arena,
      &other->_impl_.withheldscope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TweetStatusP, _impl_.currentuserretweetedid_)
      + sizeof(TweetStatusP::_impl_.currentuserretweetedid_)
      - PROTOBUF_FIELD_OFFSET(TweetStatusP, _impl_.userp_)>(
          reinterpret_cast<char*>(&_impl_.userp_),
          reinterpret_cast<char*>(&other->_impl_.userp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TweetStatusP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[0]);
}

// ===================================================================

class UserP::_Internal {
 public:
  static const ::proto::URLEntityP& descriptionurlentities(const UserP* msg);
};

const ::proto::URLEntityP&
UserP::_Internal::descriptionurlentities(const UserP* msg) {
  return *msg->_impl_.descriptionurlentities_;
}
UserP::UserP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.UserP)
}
UserP::UserP(const UserP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.withheldincountries_){from._impl_.withheldincountries_}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.screenname_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.profilebannerimageurl_){}
    , decltype(_impl_.profileimageurlhttps_){}
    , decltype(_impl_.withheldscope_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.profilebackgroundcolor_){}
    , decltype(_impl_.profilebackgroundimageurl_){}
    , decltype(_impl_.profilebackgroundimageurlhttps_){}
    , decltype(_impl_.profileimageurl_){}
    , decltype(_impl_.profilelinkcolor_){}
    , decltype(_impl_.profilesidebarbordercolor_){}
    , decltype(_impl_.profilesidebarfillcolor_){}
    , decltype(_impl_.profiletextcolor_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.descriptionurlentities_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.followerscount_){}
    , decltype(_impl_.friendscount_){}
    , decltype(_impl_.listedcount_){}
    , decltype(_impl_.favouritescount_){}
    , decltype(_impl_.statusescount_){}
    , decltype(_impl_.isprotected_){}
    , decltype(_impl_.isverified_){}
    , decltype(_impl_.isdefaultprofile_){}
    , decltype(_impl_.isgeoenabled_){}
    , decltype(_impl_.iscontributorsenabled_){}
    , decltype(_impl_.profilebackgroundtiled_){}
    , decltype(_impl_.profileusebackgroundimage_){}
    , decltype(_impl_.isdefaultprofileimage_){}
    , decltype(_impl_.utcoffset_){}
    , decltype(_impl_.translator_){}
    , decltype(_impl_.isfollowrequestsent_){}
    , decltype(_impl_.showallinlinemedia_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_screenname().empty()) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createdat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createdat().empty()) {
    _this->_impl_.createdat_.Set(from._internal_createdat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilebannerimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebannerimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilebannerimageurl().empty()) {
    _this->_impl_.profilebannerimageurl_.Set(from._internal_profilebannerimageurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profileimageurlhttps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profileimageurlhttps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profileimageurlhttps().empty()) {
    _this->_impl_.profileimageurlhttps_.Set(from._internal_profileimageurlhttps(), 
      _this->GetArenaForAllocation());
  }
  _impl_.withheldscope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.withheldscope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_withheldscope().empty()) {
    _this->_impl_.withheldscope_.Set(from._internal_withheldscope(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilebackgroundcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebackgroundcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilebackgroundcolor().empty()) {
    _this->_impl_.profilebackgroundcolor_.Set(from._internal_profilebackgroundcolor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilebackgroundimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebackgroundimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilebackgroundimageurl().empty()) {
    _this->_impl_.profilebackgroundimageurl_.Set(from._internal_profilebackgroundimageurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilebackgroundimageurlhttps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebackgroundimageurlhttps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilebackgroundimageurlhttps().empty()) {
    _this->_impl_.profilebackgroundimageurlhttps_.Set(from._internal_profilebackgroundimageurlhttps(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profileimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profileimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profileimageurl().empty()) {
    _this->_impl_.profileimageurl_.Set(from._internal_profileimageurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilelinkcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilelinkcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilelinkcolor().empty()) {
    _this->_impl_.profilelinkcolor_.Set(from._internal_profilelinkcolor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilesidebarbordercolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilesidebarbordercolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilesidebarbordercolor().empty()) {
    _this->_impl_.profilesidebarbordercolor_.Set(from._internal_profilesidebarbordercolor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profilesidebarfillcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilesidebarfillcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profilesidebarfillcolor().empty()) {
    _this->_impl_.profilesidebarfillcolor_.Set(from._internal_profilesidebarfillcolor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profiletextcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profiletextcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profiletextcolor().empty()) {
    _this->_impl_.profiletextcolor_.Set(from._internal_profiletextcolor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_descriptionurlentities()) {
    _this->_impl_.descriptionurlentities_ = new ::proto::URLEntityP(*from._impl_.descriptionurlentities_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showallinlinemedia_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.showallinlinemedia_));
  // @@protoc_insertion_point(copy_constructor:proto.UserP)
}

inline void UserP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.withheldincountries_){arena}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.screenname_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.createdat_){}
    , decltype(_impl_.profilebannerimageurl_){}
    , decltype(_impl_.profileimageurlhttps_){}
    , decltype(_impl_.withheldscope_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.profilebackgroundcolor_){}
    , decltype(_impl_.profilebackgroundimageurl_){}
    , decltype(_impl_.profilebackgroundimageurlhttps_){}
    , decltype(_impl_.profileimageurl_){}
    , decltype(_impl_.profilelinkcolor_){}
    , decltype(_impl_.profilesidebarbordercolor_){}
    , decltype(_impl_.profilesidebarfillcolor_){}
    , decltype(_impl_.profiletextcolor_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.descriptionurlentities_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.followerscount_){0}
    , decltype(_impl_.friendscount_){0}
    , decltype(_impl_.listedcount_){0}
    , decltype(_impl_.favouritescount_){0}
    , decltype(_impl_.statusescount_){0}
    , decltype(_impl_.isprotected_){false}
    , decltype(_impl_.isverified_){false}
    , decltype(_impl_.isdefaultprofile_){false}
    , decltype(_impl_.isgeoenabled_){false}
    , decltype(_impl_.iscontributorsenabled_){false}
    , decltype(_impl_.profilebackgroundtiled_){false}
    , decltype(_impl_.profileusebackgroundimage_){false}
    , decltype(_impl_.isdefaultprofileimage_){false}
    , decltype(_impl_.utcoffset_){0}
    , decltype(_impl_.translator_){false}
    , decltype(_impl_.isfollowrequestsent_){false}
    , decltype(_impl_.showallinlinemedia_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createdat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createdat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilebannerimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebannerimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profileimageurlhttps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profileimageurlhttps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.withheldscope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.withheldscope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilebackgroundcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebackgroundcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilebackgroundimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebackgroundimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilebackgroundimageurlhttps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilebackgroundimageurlhttps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profileimageurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profileimageurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilelinkcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilelinkcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilesidebarbordercolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilesidebarbordercolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profilesidebarfillcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profilesidebarfillcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profiletextcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profiletextcolor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserP::~UserP() {
  // @@protoc_insertion_point(destructor:proto.UserP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.withheldincountries_.~RepeatedPtrField();
  _impl_.idstr_.Destroy();
  _impl_.name_.Destroy();
  _impl_.screenname_.Destroy();
  _impl_.location_.Destroy();
  _impl_.url_.Destroy();
  _impl_.description_.Destroy();
  _impl_.createdat_.Destroy();
  _impl_.profilebannerimageurl_.Destroy();
  _impl_.profileimageurlhttps_.Destroy();
  _impl_.withheldscope_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.profilebackgroundcolor_.Destroy();
  _impl_.profilebackgroundimageurl_.Destroy();
  _impl_.profilebackgroundimageurlhttps_.Destroy();
  _impl_.profileimageurl_.Destroy();
  _impl_.profilelinkcolor_.Destroy();
  _impl_.profilesidebarbordercolor_.Destroy();
  _impl_.profilesidebarfillcolor_.Destroy();
  _impl_.profiletextcolor_.Destroy();
  _impl_.timezone_.Destroy();
  if (this != internal_default_instance()) delete _impl_.descriptionurlentities_;
}

void UserP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.withheldincountries_.Clear();
  _impl_.idstr_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.screenname_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.createdat_.ClearToEmpty();
  _impl_.profilebannerimageurl_.ClearToEmpty();
  _impl_.profileimageurlhttps_.ClearToEmpty();
  _impl_.withheldscope_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.profilebackgroundcolor_.ClearToEmpty();
  _impl_.profilebackgroundimageurl_.ClearToEmpty();
  _impl_.profilebackgroundimageurlhttps_.ClearToEmpty();
  _impl_.profileimageurl_.ClearToEmpty();
  _impl_.profilelinkcolor_.ClearToEmpty();
  _impl_.profilesidebarbordercolor_.ClearToEmpty();
  _impl_.profilesidebarfillcolor_.ClearToEmpty();
  _impl_.profiletextcolor_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.descriptionurlentities_ != nullptr) {
    delete _impl_.descriptionurlentities_;
  }
  _impl_.descriptionurlentities_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.showallinlinemedia_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.showallinlinemedia_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.idStr"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.name"));
        } else
          goto handle_unusual;
        continue;
      // string screenName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.screenName"));
        } else
          goto handle_unusual;
        continue;
      // string location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.location"));
        } else
          goto handle_unusual;
        continue;
      // string url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.url"));
        } else
          goto handle_unusual;
        continue;
      // string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.description"));
        } else
          goto handle_unusual;
        continue;
      // bool isProtected = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.isprotected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isVerified = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.isverified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followersCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.followerscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 friendsCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.friendscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 listedCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.listedcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 favouritesCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.favouritescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 statusesCount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.statusescount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string createdAt = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_createdat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.createdAt"));
        } else
          goto handle_unusual;
        continue;
      // string profileBannerImageUrl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_profilebannerimageurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileBannerImageUrl"));
        } else
          goto handle_unusual;
        continue;
      // string profileImageUrlHttps = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_profileimageurlhttps();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileImageUrlHttps"));
        } else
          goto handle_unusual;
        continue;
      // bool isDefaultProfile = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.isdefaultprofile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string withheldInCountries = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_withheldincountries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.withheldInCountries"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string withheldScope = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_withheldscope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.withheldScope"));
        } else
          goto handle_unusual;
        continue;
      // .proto.URLEntityP descriptionURLEntities = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_descriptionurlentities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isGeoEnabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.isgeoenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.lang"));
        } else
          goto handle_unusual;
        continue;
      // bool isContributorsEnabled = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.iscontributorsenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string profileBackgroundColor = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_profilebackgroundcolor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileBackgroundColor"));
        } else
          goto handle_unusual;
        continue;
      // string profileBackgroundImageUrl = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_profilebackgroundimageurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileBackgroundImageUrl"));
        } else
          goto handle_unusual;
        continue;
      // string profileBackgroundImageUrlHttps = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_profilebackgroundimageurlhttps();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileBackgroundImageUrlHttps"));
        } else
          goto handle_unusual;
        continue;
      // bool profileBackgroundTiled = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.profilebackgroundtiled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string profileImageUrl = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_profileimageurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileImageUrl"));
        } else
          goto handle_unusual;
        continue;
      // string profileLinkColor = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_profilelinkcolor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileLinkColor"));
        } else
          goto handle_unusual;
        continue;
      // string profileSidebarBorderColor = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_profilesidebarbordercolor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileSidebarBorderColor"));
        } else
          goto handle_unusual;
        continue;
      // string profileSidebarFillColor = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_profilesidebarfillcolor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileSidebarFillColor"));
        } else
          goto handle_unusual;
        continue;
      // string profileTextColor = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_profiletextcolor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.profileTextColor"));
        } else
          goto handle_unusual;
        continue;
      // bool profileUseBackgroundImage = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.profileusebackgroundimage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isDefaultProfileImage = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isdefaultprofileimage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 utcOffset = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.utcoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string timeZone = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserP.timeZone"));
        } else
          goto handle_unusual;
        continue;
      // bool translator = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.translator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFollowRequestSent = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isfollowrequestsent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool showAllInlineMedia = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.showallinlinemedia_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string idStr = 2;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.idStr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_idstr(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string screenName = 4;
  if (!this->_internal_screenname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_screenname().data(), static_cast<int>(this->_internal_screenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.screenName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_screenname(), target);
  }

  // string location = 5;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.location");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location(), target);
  }

  // string url = 6;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_url(), target);
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // bool isProtected = 8;
  if (this->_internal_isprotected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_isprotected(), target);
  }

  // bool isVerified = 9;
  if (this->_internal_isverified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isverified(), target);
  }

  // int32 followersCount = 10;
  if (this->_internal_followerscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_followerscount(), target);
  }

  // int32 friendsCount = 11;
  if (this->_internal_friendscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_friendscount(), target);
  }

  // int32 listedCount = 12;
  if (this->_internal_listedcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_listedcount(), target);
  }

  // int32 favouritesCount = 13;
  if (this->_internal_favouritescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_favouritescount(), target);
  }

  // int32 statusesCount = 14;
  if (this->_internal_statusescount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_statusescount(), target);
  }

  // string createdAt = 15;
  if (!this->_internal_createdat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createdat().data(), static_cast<int>(this->_internal_createdat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.createdAt");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_createdat(), target);
  }

  // string profileBannerImageUrl = 16;
  if (!this->_internal_profilebannerimageurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebannerimageurl().data(), static_cast<int>(this->_internal_profilebannerimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileBannerImageUrl");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_profilebannerimageurl(), target);
  }

  // string profileImageUrlHttps = 17;
  if (!this->_internal_profileimageurlhttps().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profileimageurlhttps().data(), static_cast<int>(this->_internal_profileimageurlhttps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileImageUrlHttps");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_profileimageurlhttps(), target);
  }

  // bool isDefaultProfile = 18;
  if (this->_internal_isdefaultprofile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_isdefaultprofile(), target);
  }

  // repeated string withheldInCountries = 19;
  for (int i = 0, n = this->_internal_withheldincountries_size(); i < n; i++) {
    const auto& s = this->_internal_withheldincountries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.withheldInCountries");
    target = stream->WriteString(19, s, target);
  }

  // string withheldScope = 20;
  if (!this->_internal_withheldscope().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_withheldscope().data(), static_cast<int>(this->_internal_withheldscope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.withheldScope");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_withheldscope(), target);
  }

  // .proto.URLEntityP descriptionURLEntities = 21;
  if (this->_internal_has_descriptionurlentities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::descriptionurlentities(this),
        _Internal::descriptionurlentities(this).GetCachedSize(), target, stream);
  }

  // bool isGeoEnabled = 22;
  if (this->_internal_isgeoenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_isgeoenabled(), target);
  }

  // string lang = 23;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.lang");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_lang(), target);
  }

  // bool isContributorsEnabled = 24;
  if (this->_internal_iscontributorsenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_iscontributorsenabled(), target);
  }

  // string profileBackgroundColor = 25;
  if (!this->_internal_profilebackgroundcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebackgroundcolor().data(), static_cast<int>(this->_internal_profilebackgroundcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileBackgroundColor");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_profilebackgroundcolor(), target);
  }

  // string profileBackgroundImageUrl = 26;
  if (!this->_internal_profilebackgroundimageurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebackgroundimageurl().data(), static_cast<int>(this->_internal_profilebackgroundimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileBackgroundImageUrl");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_profilebackgroundimageurl(), target);
  }

  // string profileBackgroundImageUrlHttps = 27;
  if (!this->_internal_profilebackgroundimageurlhttps().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilebackgroundimageurlhttps().data(), static_cast<int>(this->_internal_profilebackgroundimageurlhttps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileBackgroundImageUrlHttps");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_profilebackgroundimageurlhttps(), target);
  }

  // bool profileBackgroundTiled = 28;
  if (this->_internal_profilebackgroundtiled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_profilebackgroundtiled(), target);
  }

  // string profileImageUrl = 29;
  if (!this->_internal_profileimageurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profileimageurl().data(), static_cast<int>(this->_internal_profileimageurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileImageUrl");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_profileimageurl(), target);
  }

  // string profileLinkColor = 30;
  if (!this->_internal_profilelinkcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilelinkcolor().data(), static_cast<int>(this->_internal_profilelinkcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileLinkColor");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_profilelinkcolor(), target);
  }

  // string profileSidebarBorderColor = 31;
  if (!this->_internal_profilesidebarbordercolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilesidebarbordercolor().data(), static_cast<int>(this->_internal_profilesidebarbordercolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileSidebarBorderColor");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_profilesidebarbordercolor(), target);
  }

  // string profileSidebarFillColor = 32;
  if (!this->_internal_profilesidebarfillcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profilesidebarfillcolor().data(), static_cast<int>(this->_internal_profilesidebarfillcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileSidebarFillColor");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_profilesidebarfillcolor(), target);
  }

  // string profileTextColor = 33;
  if (!this->_internal_profiletextcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profiletextcolor().data(), static_cast<int>(this->_internal_profiletextcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.profileTextColor");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_profiletextcolor(), target);
  }

  // bool profileUseBackgroundImage = 34;
  if (this->_internal_profileusebackgroundimage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_profileusebackgroundimage(), target);
  }

  // bool isDefaultProfileImage = 35;
  if (this->_internal_isdefaultprofileimage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_isdefaultprofileimage(), target);
  }

  // int32 utcOffset = 36;
  if (this->_internal_utcoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_utcoffset(), target);
  }

  // string timeZone = 37;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserP.timeZone");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_timezone(), target);
  }

  // bool translator = 38;
  if (this->_internal_translator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_translator(), target);
  }

  // bool isFollowRequestSent = 39;
  if (this->_internal_isfollowrequestsent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_isfollowrequestsent(), target);
  }

  // bool showAllInlineMedia = 40;
  if (this->_internal_showallinlinemedia() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_showallinlinemedia(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UserP)
  return target;
}

size_t UserP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string withheldInCountries = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.withheldincountries_.size());
  for (int i = 0, n = _impl_.withheldincountries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.withheldincountries_.Get(i));
  }

  // string idStr = 2;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string screenName = 4;
  if (!this->_internal_screenname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_screenname());
  }

  // string location = 5;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string url = 6;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string description = 7;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string createdAt = 15;
  if (!this->_internal_createdat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdat());
  }

  // string profileBannerImageUrl = 16;
  if (!this->_internal_profilebannerimageurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebannerimageurl());
  }

  // string profileImageUrlHttps = 17;
  if (!this->_internal_profileimageurlhttps().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profileimageurlhttps());
  }

  // string withheldScope = 20;
  if (!this->_internal_withheldscope().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_withheldscope());
  }

  // string lang = 23;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string profileBackgroundColor = 25;
  if (!this->_internal_profilebackgroundcolor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebackgroundcolor());
  }

  // string profileBackgroundImageUrl = 26;
  if (!this->_internal_profilebackgroundimageurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebackgroundimageurl());
  }

  // string profileBackgroundImageUrlHttps = 27;
  if (!this->_internal_profilebackgroundimageurlhttps().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilebackgroundimageurlhttps());
  }

  // string profileImageUrl = 29;
  if (!this->_internal_profileimageurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profileimageurl());
  }

  // string profileLinkColor = 30;
  if (!this->_internal_profilelinkcolor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilelinkcolor());
  }

  // string profileSidebarBorderColor = 31;
  if (!this->_internal_profilesidebarbordercolor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilesidebarbordercolor());
  }

  // string profileSidebarFillColor = 32;
  if (!this->_internal_profilesidebarfillcolor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profilesidebarfillcolor());
  }

  // string profileTextColor = 33;
  if (!this->_internal_profiletextcolor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profiletextcolor());
  }

  // string timeZone = 37;
  if (!this->_internal_timezone().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // .proto.URLEntityP descriptionURLEntities = 21;
  if (this->_internal_has_descriptionurlentities()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.descriptionurlentities_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 followersCount = 10;
  if (this->_internal_followerscount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followerscount());
  }

  // int32 friendsCount = 11;
  if (this->_internal_friendscount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_friendscount());
  }

  // int32 listedCount = 12;
  if (this->_internal_listedcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_listedcount());
  }

  // int32 favouritesCount = 13;
  if (this->_internal_favouritescount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_favouritescount());
  }

  // int32 statusesCount = 14;
  if (this->_internal_statusescount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_statusescount());
  }

  // bool isProtected = 8;
  if (this->_internal_isprotected() != 0) {
    total_size += 1 + 1;
  }

  // bool isVerified = 9;
  if (this->_internal_isverified() != 0) {
    total_size += 1 + 1;
  }

  // bool isDefaultProfile = 18;
  if (this->_internal_isdefaultprofile() != 0) {
    total_size += 2 + 1;
  }

  // bool isGeoEnabled = 22;
  if (this->_internal_isgeoenabled() != 0) {
    total_size += 2 + 1;
  }

  // bool isContributorsEnabled = 24;
  if (this->_internal_iscontributorsenabled() != 0) {
    total_size += 2 + 1;
  }

  // bool profileBackgroundTiled = 28;
  if (this->_internal_profilebackgroundtiled() != 0) {
    total_size += 2 + 1;
  }

  // bool profileUseBackgroundImage = 34;
  if (this->_internal_profileusebackgroundimage() != 0) {
    total_size += 2 + 1;
  }

  // bool isDefaultProfileImage = 35;
  if (this->_internal_isdefaultprofileimage() != 0) {
    total_size += 2 + 1;
  }

  // int32 utcOffset = 36;
  if (this->_internal_utcoffset() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_utcoffset());
  }

  // bool translator = 38;
  if (this->_internal_translator() != 0) {
    total_size += 2 + 1;
  }

  // bool isFollowRequestSent = 39;
  if (this->_internal_isfollowrequestsent() != 0) {
    total_size += 2 + 1;
  }

  // bool showAllInlineMedia = 40;
  if (this->_internal_showallinlinemedia() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserP::GetClassData() const { return &_class_data_; }


void UserP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserP*>(&to_msg);
  auto& from = static_cast<const UserP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.UserP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.withheldincountries_.MergeFrom(from._impl_.withheldincountries_);
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_screenname().empty()) {
    _this->_internal_set_screenname(from._internal_screenname());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_createdat().empty()) {
    _this->_internal_set_createdat(from._internal_createdat());
  }
  if (!from._internal_profilebannerimageurl().empty()) {
    _this->_internal_set_profilebannerimageurl(from._internal_profilebannerimageurl());
  }
  if (!from._internal_profileimageurlhttps().empty()) {
    _this->_internal_set_profileimageurlhttps(from._internal_profileimageurlhttps());
  }
  if (!from._internal_withheldscope().empty()) {
    _this->_internal_set_withheldscope(from._internal_withheldscope());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_profilebackgroundcolor().empty()) {
    _this->_internal_set_profilebackgroundcolor(from._internal_profilebackgroundcolor());
  }
  if (!from._internal_profilebackgroundimageurl().empty()) {
    _this->_internal_set_profilebackgroundimageurl(from._internal_profilebackgroundimageurl());
  }
  if (!from._internal_profilebackgroundimageurlhttps().empty()) {
    _this->_internal_set_profilebackgroundimageurlhttps(from._internal_profilebackgroundimageurlhttps());
  }
  if (!from._internal_profileimageurl().empty()) {
    _this->_internal_set_profileimageurl(from._internal_profileimageurl());
  }
  if (!from._internal_profilelinkcolor().empty()) {
    _this->_internal_set_profilelinkcolor(from._internal_profilelinkcolor());
  }
  if (!from._internal_profilesidebarbordercolor().empty()) {
    _this->_internal_set_profilesidebarbordercolor(from._internal_profilesidebarbordercolor());
  }
  if (!from._internal_profilesidebarfillcolor().empty()) {
    _this->_internal_set_profilesidebarfillcolor(from._internal_profilesidebarfillcolor());
  }
  if (!from._internal_profiletextcolor().empty()) {
    _this->_internal_set_profiletextcolor(from._internal_profiletextcolor());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (from._internal_has_descriptionurlentities()) {
    _this->_internal_mutable_descriptionurlentities()->::proto::URLEntityP::MergeFrom(
        from._internal_descriptionurlentities());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_followerscount() != 0) {
    _this->_internal_set_followerscount(from._internal_followerscount());
  }
  if (from._internal_friendscount() != 0) {
    _this->_internal_set_friendscount(from._internal_friendscount());
  }
  if (from._internal_listedcount() != 0) {
    _this->_internal_set_listedcount(from._internal_listedcount());
  }
  if (from._internal_favouritescount() != 0) {
    _this->_internal_set_favouritescount(from._internal_favouritescount());
  }
  if (from._internal_statusescount() != 0) {
    _this->_internal_set_statusescount(from._internal_statusescount());
  }
  if (from._internal_isprotected() != 0) {
    _this->_internal_set_isprotected(from._internal_isprotected());
  }
  if (from._internal_isverified() != 0) {
    _this->_internal_set_isverified(from._internal_isverified());
  }
  if (from._internal_isdefaultprofile() != 0) {
    _this->_internal_set_isdefaultprofile(from._internal_isdefaultprofile());
  }
  if (from._internal_isgeoenabled() != 0) {
    _this->_internal_set_isgeoenabled(from._internal_isgeoenabled());
  }
  if (from._internal_iscontributorsenabled() != 0) {
    _this->_internal_set_iscontributorsenabled(from._internal_iscontributorsenabled());
  }
  if (from._internal_profilebackgroundtiled() != 0) {
    _this->_internal_set_profilebackgroundtiled(from._internal_profilebackgroundtiled());
  }
  if (from._internal_profileusebackgroundimage() != 0) {
    _this->_internal_set_profileusebackgroundimage(from._internal_profileusebackgroundimage());
  }
  if (from._internal_isdefaultprofileimage() != 0) {
    _this->_internal_set_isdefaultprofileimage(from._internal_isdefaultprofileimage());
  }
  if (from._internal_utcoffset() != 0) {
    _this->_internal_set_utcoffset(from._internal_utcoffset());
  }
  if (from._internal_translator() != 0) {
    _this->_internal_set_translator(from._internal_translator());
  }
  if (from._internal_isfollowrequestsent() != 0) {
    _this->_internal_set_isfollowrequestsent(from._internal_isfollowrequestsent());
  }
  if (from._internal_showallinlinemedia() != 0) {
    _this->_internal_set_showallinlinemedia(from._internal_showallinlinemedia());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserP::CopyFrom(const UserP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserP::IsInitialized() const {
  return true;
}

void UserP::InternalSwap(UserP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.withheldincountries_.InternalSwap(&other->_impl_.withheldincountries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.screenname_, lhs_arena,
      &other->_impl_.screenname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createdat_, lhs_arena,
      &other->_impl_.createdat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilebannerimageurl_, lhs_arena,
      &other->_impl_.profilebannerimageurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profileimageurlhttps_, lhs_arena,
      &other->_impl_.profileimageurlhttps_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.withheldscope_, lhs_arena,
      &other->_impl_.withheldscope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilebackgroundcolor_, lhs_arena,
      &other->_impl_.profilebackgroundcolor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilebackgroundimageurl_, lhs_arena,
      &other->_impl_.profilebackgroundimageurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilebackgroundimageurlhttps_, lhs_arena,
      &other->_impl_.profilebackgroundimageurlhttps_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profileimageurl_, lhs_arena,
      &other->_impl_.profileimageurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilelinkcolor_, lhs_arena,
      &other->_impl_.profilelinkcolor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilesidebarbordercolor_, lhs_arena,
      &other->_impl_.profilesidebarbordercolor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profilesidebarfillcolor_, lhs_arena,
      &other->_impl_.profilesidebarfillcolor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profiletextcolor_, lhs_arena,
      &other->_impl_.profiletextcolor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserP, _impl_.showallinlinemedia_)
      + sizeof(UserP::_impl_.showallinlinemedia_)
      - PROTOBUF_FIELD_OFFSET(UserP, _impl_.descriptionurlentities_)>(
          reinterpret_cast<char*>(&_impl_.descriptionurlentities_),
          reinterpret_cast<char*>(&other->_impl_.descriptionurlentities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[1]);
}

// ===================================================================

class CoordinatesP::_Internal {
 public:
};

CoordinatesP::CoordinatesP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.CoordinatesP)
}
CoordinatesP::CoordinatesP(const CoordinatesP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinatesP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinates_){from._impl_.coordinates_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.CoordinatesP)
}

inline void CoordinatesP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinates_){arena}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoordinatesP::~CoordinatesP() {
  // @@protoc_insertion_point(destructor:proto.CoordinatesP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinatesP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coordinates_.~RepeatedField();
  _impl_.type_.Destroy();
}

void CoordinatesP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinatesP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoordinatesP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coordinates_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinatesP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.CoordinatesP.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated double coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_coordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinatesP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoordinatesP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.CoordinatesP.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated double coordinates = 2;
  if (this->_internal_coordinates_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_coordinates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoordinatesP)
  return target;
}

size_t CoordinatesP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoordinatesP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coordinates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinates_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinatesP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinatesP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinatesP::GetClassData() const { return &_class_data_; }


void CoordinatesP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinatesP*>(&to_msg);
  auto& from = static_cast<const CoordinatesP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.CoordinatesP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coordinates_.MergeFrom(from._impl_.coordinates_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinatesP::CopyFrom(const CoordinatesP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoordinatesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatesP::IsInitialized() const {
  return true;
}

void CoordinatesP::InternalSwap(CoordinatesP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coordinates_.InternalSwap(&other->_impl_.coordinates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatesP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[2]);
}

// ===================================================================

class PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_Internal {
 public:
};

PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
}
PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP(const PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinate_){from._impl_.coordinate_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
}

inline void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinate_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::~PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP() {
  // @@protoc_insertion_point(destructor:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coordinate_.~RepeatedField();
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coordinate_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coordinate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_coordinate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double coordinate = 1;
  if (this->_internal_coordinate_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_coordinate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  return target;
}

size_t PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coordinate = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinate_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::GetClassData() const { return &_class_data_; }


void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP*>(&to_msg);
  auto& from = static_cast<const PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coordinate_.MergeFrom(from._impl_.coordinate_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::CopyFrom(const PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::IsInitialized() const {
  return true;
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::InternalSwap(PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coordinate_.InternalSwap(&other->_impl_.coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[3]);
}

// ===================================================================

class PlaceP_BoundingBoxCoordinateP_RowsOneP::_Internal {
 public:
};

PlaceP_BoundingBoxCoordinateP_RowsOneP::PlaceP_BoundingBoxCoordinateP_RowsOneP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
}
PlaceP_BoundingBoxCoordinateP_RowsOneP::PlaceP_BoundingBoxCoordinateP_RowsOneP(const PlaceP_BoundingBoxCoordinateP_RowsOneP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceP_BoundingBoxCoordinateP_RowsOneP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rowstwop_){from._impl_.rowstwop_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
}

inline void PlaceP_BoundingBoxCoordinateP_RowsOneP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rowstwop_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlaceP_BoundingBoxCoordinateP_RowsOneP::~PlaceP_BoundingBoxCoordinateP_RowsOneP() {
  // @@protoc_insertion_point(destructor:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceP_BoundingBoxCoordinateP_RowsOneP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rowstwop_.~RepeatedPtrField();
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rowstwop_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceP_BoundingBoxCoordinateP_RowsOneP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rowstwop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceP_BoundingBoxCoordinateP_RowsOneP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rowstwop_size()); i < n; i++) {
    const auto& repfield = this->_internal_rowstwop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  return target;
}

size_t PlaceP_BoundingBoxCoordinateP_RowsOneP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PlaceP.BoundingBoxCoordinateP.RowsOneP.RowsTwoP rowsTwoP = 1;
  total_size += 1UL * this->_internal_rowstwop_size();
  for (const auto& msg : this->_impl_.rowstwop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceP_BoundingBoxCoordinateP_RowsOneP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceP_BoundingBoxCoordinateP_RowsOneP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceP_BoundingBoxCoordinateP_RowsOneP::GetClassData() const { return &_class_data_; }


void PlaceP_BoundingBoxCoordinateP_RowsOneP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceP_BoundingBoxCoordinateP_RowsOneP*>(&to_msg);
  auto& from = static_cast<const PlaceP_BoundingBoxCoordinateP_RowsOneP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rowstwop_.MergeFrom(from._impl_.rowstwop_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP::CopyFrom(const PlaceP_BoundingBoxCoordinateP_RowsOneP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlaceP.BoundingBoxCoordinateP.RowsOneP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceP_BoundingBoxCoordinateP_RowsOneP::IsInitialized() const {
  return true;
}

void PlaceP_BoundingBoxCoordinateP_RowsOneP::InternalSwap(PlaceP_BoundingBoxCoordinateP_RowsOneP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rowstwop_.InternalSwap(&other->_impl_.rowstwop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceP_BoundingBoxCoordinateP_RowsOneP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[4]);
}

// ===================================================================

class PlaceP_BoundingBoxCoordinateP::_Internal {
 public:
};

PlaceP_BoundingBoxCoordinateP::PlaceP_BoundingBoxCoordinateP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PlaceP.BoundingBoxCoordinateP)
}
PlaceP_BoundingBoxCoordinateP::PlaceP_BoundingBoxCoordinateP(const PlaceP_BoundingBoxCoordinateP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceP_BoundingBoxCoordinateP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.threedimarray_){from._impl_.threedimarray_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.PlaceP.BoundingBoxCoordinateP)
}

inline void PlaceP_BoundingBoxCoordinateP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.threedimarray_){arena}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaceP_BoundingBoxCoordinateP::~PlaceP_BoundingBoxCoordinateP() {
  // @@protoc_insertion_point(destructor:proto.PlaceP.BoundingBoxCoordinateP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceP_BoundingBoxCoordinateP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threedimarray_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void PlaceP_BoundingBoxCoordinateP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceP_BoundingBoxCoordinateP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlaceP.BoundingBoxCoordinateP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threedimarray_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceP_BoundingBoxCoordinateP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.BoundingBoxCoordinateP.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threedimarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceP_BoundingBoxCoordinateP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlaceP.BoundingBoxCoordinateP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.BoundingBoxCoordinateP.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .proto.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threedimarray_size()); i < n; i++) {
    const auto& repfield = this->_internal_threedimarray(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlaceP.BoundingBoxCoordinateP)
  return target;
}

size_t PlaceP_BoundingBoxCoordinateP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlaceP.BoundingBoxCoordinateP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PlaceP.BoundingBoxCoordinateP.RowsOneP threeDimArray = 2;
  total_size += 1UL * this->_internal_threedimarray_size();
  for (const auto& msg : this->_impl_.threedimarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceP_BoundingBoxCoordinateP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceP_BoundingBoxCoordinateP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceP_BoundingBoxCoordinateP::GetClassData() const { return &_class_data_; }


void PlaceP_BoundingBoxCoordinateP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceP_BoundingBoxCoordinateP*>(&to_msg);
  auto& from = static_cast<const PlaceP_BoundingBoxCoordinateP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PlaceP.BoundingBoxCoordinateP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.threedimarray_.MergeFrom(from._impl_.threedimarray_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceP_BoundingBoxCoordinateP::CopyFrom(const PlaceP_BoundingBoxCoordinateP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlaceP.BoundingBoxCoordinateP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceP_BoundingBoxCoordinateP::IsInitialized() const {
  return true;
}

void PlaceP_BoundingBoxCoordinateP::InternalSwap(PlaceP_BoundingBoxCoordinateP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.threedimarray_.InternalSwap(&other->_impl_.threedimarray_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceP_BoundingBoxCoordinateP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[5]);
}

// ===================================================================

class PlaceP::_Internal {
 public:
  static const ::proto::PlaceP_BoundingBoxCoordinateP& boundingboxcoordinatep(const PlaceP* msg);
};

const ::proto::PlaceP_BoundingBoxCoordinateP&
PlaceP::_Internal::boundingboxcoordinatep(const PlaceP* msg) {
  return *msg->_impl_.boundingboxcoordinatep_;
}
PlaceP::PlaceP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PlaceP)
}
PlaceP::PlaceP(const PlaceP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.countrycode_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.placetype_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.fullname_){}
    , decltype(_impl_.boundingboxcoordinatep_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_countrycode().empty()) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.placetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placetype().empty()) {
    _this->_impl_.placetype_.Set(from._internal_placetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fullname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fullname().empty()) {
    _this->_impl_.fullname_.Set(from._internal_fullname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_boundingboxcoordinatep()) {
    _this->_impl_.boundingboxcoordinatep_ = new ::proto::PlaceP_BoundingBoxCoordinateP(*from._impl_.boundingboxcoordinatep_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.PlaceP)
}

inline void PlaceP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.countrycode_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.placetype_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.fullname_){}
    , decltype(_impl_.boundingboxcoordinatep_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.placetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.placetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fullname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fullname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlaceP::~PlaceP() {
  // @@protoc_insertion_point(destructor:proto.PlaceP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.countrycode_.Destroy();
  _impl_.id_.Destroy();
  _impl_.country_.Destroy();
  _impl_.placetype_.Destroy();
  _impl_.url_.Destroy();
  _impl_.fullname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.boundingboxcoordinatep_;
}

void PlaceP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlaceP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.countrycode_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.placetype_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.fullname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.boundingboxcoordinatep_ != nullptr) {
    delete _impl_.boundingboxcoordinatep_;
  }
  _impl_.boundingboxcoordinatep_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.name"));
        } else
          goto handle_unusual;
        continue;
      // string countryCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.countryCode"));
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.id"));
        } else
          goto handle_unusual;
        continue;
      // string country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.country"));
        } else
          goto handle_unusual;
        continue;
      // string placeType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_placetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.placeType"));
        } else
          goto handle_unusual;
        continue;
      // string url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.url"));
        } else
          goto handle_unusual;
        continue;
      // string fullName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fullname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlaceP.fullName"));
        } else
          goto handle_unusual;
        continue;
      // .proto.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingboxcoordinatep(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlaceP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string countryCode = 2;
  if (!this->_internal_countrycode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrycode().data(), static_cast<int>(this->_internal_countrycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.countryCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_countrycode(), target);
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string country = 4;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  // string placeType = 5;
  if (!this->_internal_placetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placetype().data(), static_cast<int>(this->_internal_placetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.placeType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placetype(), target);
  }

  // string url = 6;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_url(), target);
  }

  // string fullName = 7;
  if (!this->_internal_fullname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlaceP.fullName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fullname(), target);
  }

  // .proto.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
  if (this->_internal_has_boundingboxcoordinatep()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::boundingboxcoordinatep(this),
        _Internal::boundingboxcoordinatep(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlaceP)
  return target;
}

size_t PlaceP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlaceP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string countryCode = 2;
  if (!this->_internal_countrycode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrycode());
  }

  // string id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string country = 4;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string placeType = 5;
  if (!this->_internal_placetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placetype());
  }

  // string url = 6;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string fullName = 7;
  if (!this->_internal_fullname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // .proto.PlaceP.BoundingBoxCoordinateP boundingBoxCoordinateP = 8;
  if (this->_internal_has_boundingboxcoordinatep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.boundingboxcoordinatep_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceP::GetClassData() const { return &_class_data_; }


void PlaceP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceP*>(&to_msg);
  auto& from = static_cast<const PlaceP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PlaceP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_countrycode().empty()) {
    _this->_internal_set_countrycode(from._internal_countrycode());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_placetype().empty()) {
    _this->_internal_set_placetype(from._internal_placetype());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_fullname().empty()) {
    _this->_internal_set_fullname(from._internal_fullname());
  }
  if (from._internal_has_boundingboxcoordinatep()) {
    _this->_internal_mutable_boundingboxcoordinatep()->::proto::PlaceP_BoundingBoxCoordinateP::MergeFrom(
        from._internal_boundingboxcoordinatep());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceP::CopyFrom(const PlaceP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlaceP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceP::IsInitialized() const {
  return true;
}

void PlaceP::InternalSwap(PlaceP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.countrycode_, lhs_arena,
      &other->_impl_.countrycode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.placetype_, lhs_arena,
      &other->_impl_.placetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fullname_, lhs_arena,
      &other->_impl_.fullname_, rhs_arena
  );
  swap(_impl_.boundingboxcoordinatep_, other->_impl_.boundingboxcoordinatep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[6]);
}

// ===================================================================

class EntitiesP::_Internal {
 public:
};

EntitiesP::EntitiesP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.EntitiesP)
}
EntitiesP::EntitiesP(const EntitiesP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntitiesP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashtagentityp_){from._impl_.hashtagentityp_}
    , decltype(_impl_.mediaentityp_){from._impl_.mediaentityp_}
    , decltype(_impl_.urlentityp_){from._impl_.urlentityp_}
    , decltype(_impl_.usermentionentityp_){from._impl_.usermentionentityp_}
    , decltype(_impl_.symbolentityp_){from._impl_.symbolentityp_}
    , decltype(_impl_.pollentityp_){from._impl_.pollentityp_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.EntitiesP)
}

inline void EntitiesP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashtagentityp_){arena}
    , decltype(_impl_.mediaentityp_){arena}
    , decltype(_impl_.urlentityp_){arena}
    , decltype(_impl_.usermentionentityp_){arena}
    , decltype(_impl_.symbolentityp_){arena}
    , decltype(_impl_.pollentityp_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntitiesP::~EntitiesP() {
  // @@protoc_insertion_point(destructor:proto.EntitiesP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntitiesP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashtagentityp_.~RepeatedPtrField();
  _impl_.mediaentityp_.~RepeatedPtrField();
  _impl_.urlentityp_.~RepeatedPtrField();
  _impl_.usermentionentityp_.~RepeatedPtrField();
  _impl_.symbolentityp_.~RepeatedPtrField();
  _impl_.pollentityp_.~RepeatedPtrField();
}

void EntitiesP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntitiesP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EntitiesP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashtagentityp_.Clear();
  _impl_.mediaentityp_.Clear();
  _impl_.urlentityp_.Clear();
  _impl_.usermentionentityp_.Clear();
  _impl_.symbolentityp_.Clear();
  _impl_.pollentityp_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntitiesP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.HashtagEntityP hashtagEntityP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashtagentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.MediaEntityP mediaEntityP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mediaentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.URLEntityP urlEntityP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_urlentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usermentionentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SymbolEntityP symbolEntityP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_symbolentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.PollEntityP pollEntityP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pollentityp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntitiesP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EntitiesP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.HashtagEntityP hashtagEntityP = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hashtagentityp_size()); i < n; i++) {
    const auto& repfield = this->_internal_hashtagentityp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.MediaEntityP mediaEntityP = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mediaentityp_size()); i < n; i++) {
    const auto& repfield = this->_internal_mediaentityp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.URLEntityP urlEntityP = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_urlentityp_size()); i < n; i++) {
    const auto& repfield = this->_internal_urlentityp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_usermentionentityp_size()); i < n; i++) {
    const auto& repfield = this->_internal_usermentionentityp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.SymbolEntityP symbolEntityP = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_symbolentityp_size()); i < n; i++) {
    const auto& repfield = this->_internal_symbolentityp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PollEntityP pollEntityP = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pollentityp_size()); i < n; i++) {
    const auto& repfield = this->_internal_pollentityp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EntitiesP)
  return target;
}

size_t EntitiesP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EntitiesP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.HashtagEntityP hashtagEntityP = 1;
  total_size += 1UL * this->_internal_hashtagentityp_size();
  for (const auto& msg : this->_impl_.hashtagentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.MediaEntityP mediaEntityP = 2;
  total_size += 1UL * this->_internal_mediaentityp_size();
  for (const auto& msg : this->_impl_.mediaentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.URLEntityP urlEntityP = 3;
  total_size += 1UL * this->_internal_urlentityp_size();
  for (const auto& msg : this->_impl_.urlentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.UserMentionEntityP userMentionEntityP = 4;
  total_size += 1UL * this->_internal_usermentionentityp_size();
  for (const auto& msg : this->_impl_.usermentionentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.SymbolEntityP symbolEntityP = 5;
  total_size += 1UL * this->_internal_symbolentityp_size();
  for (const auto& msg : this->_impl_.symbolentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PollEntityP pollEntityP = 6;
  total_size += 1UL * this->_internal_pollentityp_size();
  for (const auto& msg : this->_impl_.pollentityp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntitiesP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntitiesP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntitiesP::GetClassData() const { return &_class_data_; }


void EntitiesP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntitiesP*>(&to_msg);
  auto& from = static_cast<const EntitiesP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.EntitiesP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashtagentityp_.MergeFrom(from._impl_.hashtagentityp_);
  _this->_impl_.mediaentityp_.MergeFrom(from._impl_.mediaentityp_);
  _this->_impl_.urlentityp_.MergeFrom(from._impl_.urlentityp_);
  _this->_impl_.usermentionentityp_.MergeFrom(from._impl_.usermentionentityp_);
  _this->_impl_.symbolentityp_.MergeFrom(from._impl_.symbolentityp_);
  _this->_impl_.pollentityp_.MergeFrom(from._impl_.pollentityp_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntitiesP::CopyFrom(const EntitiesP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EntitiesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitiesP::IsInitialized() const {
  return true;
}

void EntitiesP::InternalSwap(EntitiesP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashtagentityp_.InternalSwap(&other->_impl_.hashtagentityp_);
  _impl_.mediaentityp_.InternalSwap(&other->_impl_.mediaentityp_);
  _impl_.urlentityp_.InternalSwap(&other->_impl_.urlentityp_);
  _impl_.usermentionentityp_.InternalSwap(&other->_impl_.usermentionentityp_);
  _impl_.symbolentityp_.InternalSwap(&other->_impl_.symbolentityp_);
  _impl_.pollentityp_.InternalSwap(&other->_impl_.pollentityp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntitiesP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[7]);
}

// ===================================================================

class ExtendedEntitiesP::_Internal {
 public:
};

ExtendedEntitiesP::ExtendedEntitiesP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExtendedEntitiesP)
}
ExtendedEntitiesP::ExtendedEntitiesP(const ExtendedEntitiesP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedEntitiesP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.media_){from._impl_.media_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ExtendedEntitiesP)
}

inline void ExtendedEntitiesP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.media_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtendedEntitiesP::~ExtendedEntitiesP() {
  // @@protoc_insertion_point(destructor:proto.ExtendedEntitiesP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedEntitiesP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_.~RepeatedPtrField();
}

void ExtendedEntitiesP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedEntitiesP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExtendedEntitiesP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedEntitiesP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.MediaEntityP media = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedEntitiesP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExtendedEntitiesP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.MediaEntityP media = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_size()); i < n; i++) {
    const auto& repfield = this->_internal_media(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExtendedEntitiesP)
  return target;
}

size_t ExtendedEntitiesP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExtendedEntitiesP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MediaEntityP media = 1;
  total_size += 1UL * this->_internal_media_size();
  for (const auto& msg : this->_impl_.media_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedEntitiesP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedEntitiesP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedEntitiesP::GetClassData() const { return &_class_data_; }


void ExtendedEntitiesP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedEntitiesP*>(&to_msg);
  auto& from = static_cast<const ExtendedEntitiesP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExtendedEntitiesP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_.MergeFrom(from._impl_.media_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedEntitiesP::CopyFrom(const ExtendedEntitiesP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExtendedEntitiesP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedEntitiesP::IsInitialized() const {
  return true;
}

void ExtendedEntitiesP::InternalSwap(ExtendedEntitiesP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.media_.InternalSwap(&other->_impl_.media_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedEntitiesP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[8]);
}

// ===================================================================

class URLEntityP::_Internal {
 public:
};

URLEntityP::URLEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.URLEntityP)
}
URLEntityP::URLEntityP(const URLEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  URLEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.displayurl_){}
    , decltype(_impl_.expandedurl_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_displayurl().empty()) {
    _this->_impl_.displayurl_.Set(from._internal_displayurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.expandedurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expandedurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expandedurl().empty()) {
    _this->_impl_.expandedurl_.Set(from._internal_expandedurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.URLEntityP)
}

inline void URLEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.displayurl_){}
    , decltype(_impl_.expandedurl_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.displayurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expandedurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expandedurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

URLEntityP::~URLEntityP() {
  // @@protoc_insertion_point(destructor:proto.URLEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void URLEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indices_.~RepeatedField();
  _impl_.displayurl_.Destroy();
  _impl_.expandedurl_.Destroy();
  _impl_.url_.Destroy();
}

void URLEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void URLEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.URLEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indices_.Clear();
  _impl_.displayurl_.ClearToEmpty();
  _impl_.expandedurl_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* URLEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string displayURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_displayurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.URLEntityP.displayURL"));
        } else
          goto handle_unusual;
        continue;
      // string expandedURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_expandedurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.URLEntityP.expandedURL"));
        } else
          goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.URLEntityP.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* URLEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.URLEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  // string displayURL = 2;
  if (!this->_internal_displayurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayurl().data(), static_cast<int>(this->_internal_displayurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.URLEntityP.displayURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_displayurl(), target);
  }

  // string expandedURL = 3;
  if (!this->_internal_expandedurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expandedurl().data(), static_cast<int>(this->_internal_expandedurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.URLEntityP.expandedURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_expandedurl(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.URLEntityP.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.URLEntityP)
  return target;
}

size_t URLEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.URLEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string displayURL = 2;
  if (!this->_internal_displayurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayurl());
  }

  // string expandedURL = 3;
  if (!this->_internal_expandedurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expandedurl());
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData URLEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    URLEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*URLEntityP::GetClassData() const { return &_class_data_; }


void URLEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<URLEntityP*>(&to_msg);
  auto& from = static_cast<const URLEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.URLEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (!from._internal_displayurl().empty()) {
    _this->_internal_set_displayurl(from._internal_displayurl());
  }
  if (!from._internal_expandedurl().empty()) {
    _this->_internal_set_expandedurl(from._internal_expandedurl());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void URLEntityP::CopyFrom(const URLEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.URLEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URLEntityP::IsInitialized() const {
  return true;
}

void URLEntityP::InternalSwap(URLEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayurl_, lhs_arena,
      &other->_impl_.displayurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expandedurl_, lhs_arena,
      &other->_impl_.expandedurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata URLEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[9]);
}

// ===================================================================

class HashtagEntityP::_Internal {
 public:
};

HashtagEntityP::HashtagEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HashtagEntityP)
}
HashtagEntityP::HashtagEntityP(const HashtagEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HashtagEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HashtagEntityP)
}

inline void HashtagEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HashtagEntityP::~HashtagEntityP() {
  // @@protoc_insertion_point(destructor:proto.HashtagEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HashtagEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indices_.~RepeatedField();
  _impl_.text_.Destroy();
}

void HashtagEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HashtagEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HashtagEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indices_.Clear();
  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashtagEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.HashtagEntityP.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashtagEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HashtagEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.HashtagEntityP.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HashtagEntityP)
  return target;
}

size_t HashtagEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HashtagEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashtagEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HashtagEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashtagEntityP::GetClassData() const { return &_class_data_; }


void HashtagEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HashtagEntityP*>(&to_msg);
  auto& from = static_cast<const HashtagEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HashtagEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashtagEntityP::CopyFrom(const HashtagEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HashtagEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashtagEntityP::IsInitialized() const {
  return true;
}

void HashtagEntityP::InternalSwap(HashtagEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HashtagEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[10]);
}

// ===================================================================

class MediaEntityP::_Internal {
 public:
  static const ::proto::MediaSizesEntityP& sizes(const MediaEntityP* msg);
  static const ::proto::VideoEntityP& videoinfo(const MediaEntityP* msg);
  static const ::proto::AdditionalMediaInfoEntityP& additionalmediainfo(const MediaEntityP* msg);
};

const ::proto::MediaSizesEntityP&
MediaEntityP::_Internal::sizes(const MediaEntityP* msg) {
  return *msg->_impl_.sizes_;
}
const ::proto::VideoEntityP&
MediaEntityP::_Internal::videoinfo(const MediaEntityP* msg) {
  return *msg->_impl_.videoinfo_;
}
const ::proto::AdditionalMediaInfoEntityP&
MediaEntityP::_Internal::additionalmediainfo(const MediaEntityP* msg) {
  return *msg->_impl_.additionalmediainfo_;
}
MediaEntityP::MediaEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MediaEntityP)
}
MediaEntityP::MediaEntityP(const MediaEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.displayurl_){}
    , decltype(_impl_.expandedurl_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.mediaurl_){}
    , decltype(_impl_.mediaurlhttps_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.sourcestatusidstr_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.sizes_){nullptr}
    , decltype(_impl_.videoinfo_){nullptr}
    , decltype(_impl_.additionalmediainfo_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sourcestatusid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.displayurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_displayurl().empty()) {
    _this->_impl_.displayurl_.Set(from._internal_displayurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.expandedurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expandedurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expandedurl().empty()) {
    _this->_impl_.expandedurl_.Set(from._internal_expandedurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediaurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mediaurl().empty()) {
    _this->_impl_.mediaurl_.Set(from._internal_mediaurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mediaurlhttps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurlhttps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mediaurlhttps().empty()) {
    _this->_impl_.mediaurlhttps_.Set(from._internal_mediaurlhttps(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sourcestatusidstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcestatusidstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcestatusidstr().empty()) {
    _this->_impl_.sourcestatusidstr_.Set(from._internal_sourcestatusidstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sizes()) {
    _this->_impl_.sizes_ = new ::proto::MediaSizesEntityP(*from._impl_.sizes_);
  }
  if (from._internal_has_videoinfo()) {
    _this->_impl_.videoinfo_ = new ::proto::VideoEntityP(*from._impl_.videoinfo_);
  }
  if (from._internal_has_additionalmediainfo()) {
    _this->_impl_.additionalmediainfo_ = new ::proto::AdditionalMediaInfoEntityP(*from._impl_.additionalmediainfo_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourcestatusid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sourcestatusid_));
  // @@protoc_insertion_point(copy_constructor:proto.MediaEntityP)
}

inline void MediaEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.displayurl_){}
    , decltype(_impl_.expandedurl_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.mediaurl_){}
    , decltype(_impl_.mediaurlhttps_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.sourcestatusidstr_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.sizes_){nullptr}
    , decltype(_impl_.videoinfo_){nullptr}
    , decltype(_impl_.additionalmediainfo_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.sourcestatusid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.displayurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.expandedurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expandedurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediaurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mediaurlhttps_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mediaurlhttps_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sourcestatusidstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcestatusidstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaEntityP::~MediaEntityP() {
  // @@protoc_insertion_point(destructor:proto.MediaEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indices_.~RepeatedField();
  _impl_.displayurl_.Destroy();
  _impl_.expandedurl_.Destroy();
  _impl_.idstr_.Destroy();
  _impl_.mediaurl_.Destroy();
  _impl_.mediaurlhttps_.Destroy();
  _impl_.type_.Destroy();
  _impl_.sourcestatusidstr_.Destroy();
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sizes_;
  if (this != internal_default_instance()) delete _impl_.videoinfo_;
  if (this != internal_default_instance()) delete _impl_.additionalmediainfo_;
}

void MediaEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MediaEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indices_.Clear();
  _impl_.displayurl_.ClearToEmpty();
  _impl_.expandedurl_.ClearToEmpty();
  _impl_.idstr_.ClearToEmpty();
  _impl_.mediaurl_.ClearToEmpty();
  _impl_.mediaurlhttps_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.sourcestatusidstr_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sizes_ != nullptr) {
    delete _impl_.sizes_;
  }
  _impl_.sizes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.videoinfo_ != nullptr) {
    delete _impl_.videoinfo_;
  }
  _impl_.videoinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.additionalmediainfo_ != nullptr) {
    delete _impl_.additionalmediainfo_;
  }
  _impl_.additionalmediainfo_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sourcestatusid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sourcestatusid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string displayURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_displayurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.displayURL"));
        } else
          goto handle_unusual;
        continue;
      // string expandedURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_expandedurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.expandedURL"));
        } else
          goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idStr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.idStr"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mediaURL = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mediaurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.mediaURL"));
        } else
          goto handle_unusual;
        continue;
      // string mediaURLHttps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mediaurlhttps();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.mediaURLHttps"));
        } else
          goto handle_unusual;
        continue;
      // .proto.MediaSizesEntityP sizes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sizes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.type"));
        } else
          goto handle_unusual;
        continue;
      // int64 sourceStatusId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sourcestatusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sourceStatusIdStr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sourcestatusidstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.sourceStatusIdStr"));
        } else
          goto handle_unusual;
        continue;
      // string url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MediaEntityP.url"));
        } else
          goto handle_unusual;
        continue;
      // .proto.VideoEntityP videoInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_videoinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_additionalmediainfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MediaEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string displayURL = 1;
  if (!this->_internal_displayurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayurl().data(), static_cast<int>(this->_internal_displayurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.displayURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_displayurl(), target);
  }

  // string expandedURL = 2;
  if (!this->_internal_expandedurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expandedurl().data(), static_cast<int>(this->_internal_expandedurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.expandedURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expandedurl(), target);
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  // string idStr = 4;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.idStr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_idstr(), target);
  }

  // repeated int32 indices = 5;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_indices(), byte_size, target);
    }
  }

  // string mediaURL = 6;
  if (!this->_internal_mediaurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mediaurl().data(), static_cast<int>(this->_internal_mediaurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.mediaURL");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mediaurl(), target);
  }

  // string mediaURLHttps = 7;
  if (!this->_internal_mediaurlhttps().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mediaurlhttps().data(), static_cast<int>(this->_internal_mediaurlhttps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.mediaURLHttps");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mediaurlhttps(), target);
  }

  // .proto.MediaSizesEntityP sizes = 8;
  if (this->_internal_has_sizes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sizes(this),
        _Internal::sizes(this).GetCachedSize(), target, stream);
  }

  // string type = 9;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_type(), target);
  }

  // int64 sourceStatusId = 10;
  if (this->_internal_sourcestatusid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_sourcestatusid(), target);
  }

  // string sourceStatusIdStr = 11;
  if (!this->_internal_sourcestatusidstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcestatusidstr().data(), static_cast<int>(this->_internal_sourcestatusidstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.sourceStatusIdStr");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sourcestatusidstr(), target);
  }

  // string url = 12;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MediaEntityP.url");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_url(), target);
  }

  // .proto.VideoEntityP videoInfo = 13;
  if (this->_internal_has_videoinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::videoinfo(this),
        _Internal::videoinfo(this).GetCachedSize(), target, stream);
  }

  // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 14;
  if (this->_internal_has_additionalmediainfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::additionalmediainfo(this),
        _Internal::additionalmediainfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MediaEntityP)
  return target;
}

size_t MediaEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MediaEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string displayURL = 1;
  if (!this->_internal_displayurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayurl());
  }

  // string expandedURL = 2;
  if (!this->_internal_expandedurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expandedurl());
  }

  // string idStr = 4;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // string mediaURL = 6;
  if (!this->_internal_mediaurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mediaurl());
  }

  // string mediaURLHttps = 7;
  if (!this->_internal_mediaurlhttps().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mediaurlhttps());
  }

  // string type = 9;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string sourceStatusIdStr = 11;
  if (!this->_internal_sourcestatusidstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcestatusidstr());
  }

  // string url = 12;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .proto.MediaSizesEntityP sizes = 8;
  if (this->_internal_has_sizes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sizes_);
  }

  // .proto.VideoEntityP videoInfo = 13;
  if (this->_internal_has_videoinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.videoinfo_);
  }

  // .proto.AdditionalMediaInfoEntityP additionalMediaInfo = 14;
  if (this->_internal_has_additionalmediainfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.additionalmediainfo_);
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 sourceStatusId = 10;
  if (this->_internal_sourcestatusid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sourcestatusid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaEntityP::GetClassData() const { return &_class_data_; }


void MediaEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaEntityP*>(&to_msg);
  auto& from = static_cast<const MediaEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MediaEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (!from._internal_displayurl().empty()) {
    _this->_internal_set_displayurl(from._internal_displayurl());
  }
  if (!from._internal_expandedurl().empty()) {
    _this->_internal_set_expandedurl(from._internal_expandedurl());
  }
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (!from._internal_mediaurl().empty()) {
    _this->_internal_set_mediaurl(from._internal_mediaurl());
  }
  if (!from._internal_mediaurlhttps().empty()) {
    _this->_internal_set_mediaurlhttps(from._internal_mediaurlhttps());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_sourcestatusidstr().empty()) {
    _this->_internal_set_sourcestatusidstr(from._internal_sourcestatusidstr());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_sizes()) {
    _this->_internal_mutable_sizes()->::proto::MediaSizesEntityP::MergeFrom(
        from._internal_sizes());
  }
  if (from._internal_has_videoinfo()) {
    _this->_internal_mutable_videoinfo()->::proto::VideoEntityP::MergeFrom(
        from._internal_videoinfo());
  }
  if (from._internal_has_additionalmediainfo()) {
    _this->_internal_mutable_additionalmediainfo()->::proto::AdditionalMediaInfoEntityP::MergeFrom(
        from._internal_additionalmediainfo());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_sourcestatusid() != 0) {
    _this->_internal_set_sourcestatusid(from._internal_sourcestatusid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaEntityP::CopyFrom(const MediaEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MediaEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaEntityP::IsInitialized() const {
  return true;
}

void MediaEntityP::InternalSwap(MediaEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayurl_, lhs_arena,
      &other->_impl_.displayurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expandedurl_, lhs_arena,
      &other->_impl_.expandedurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediaurl_, lhs_arena,
      &other->_impl_.mediaurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mediaurlhttps_, lhs_arena,
      &other->_impl_.mediaurlhttps_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcestatusidstr_, lhs_arena,
      &other->_impl_.sourcestatusidstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaEntityP, _impl_.sourcestatusid_)
      + sizeof(MediaEntityP::_impl_.sourcestatusid_)
      - PROTOBUF_FIELD_OFFSET(MediaEntityP, _impl_.sizes_)>(
          reinterpret_cast<char*>(&_impl_.sizes_),
          reinterpret_cast<char*>(&other->_impl_.sizes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[11]);
}

// ===================================================================

class UserMentionEntityP::_Internal {
 public:
};

UserMentionEntityP::UserMentionEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.UserMentionEntityP)
}
UserMentionEntityP::UserMentionEntityP(const UserMentionEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserMentionEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.screenname_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_screenname().empty()) {
    _this->_impl_.screenname_.Set(from._internal_screenname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.UserMentionEntityP)
}

inline void UserMentionEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.screenname_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.screenname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.screenname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserMentionEntityP::~UserMentionEntityP() {
  // @@protoc_insertion_point(destructor:proto.UserMentionEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserMentionEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indices_.~RepeatedField();
  _impl_.idstr_.Destroy();
  _impl_.name_.Destroy();
  _impl_.screenname_.Destroy();
}

void UserMentionEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserMentionEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserMentionEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indices_.Clear();
  _impl_.idstr_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.screenname_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserMentionEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idStr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserMentionEntityP.idStr"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserMentionEntityP.name"));
        } else
          goto handle_unusual;
        continue;
      // string screenName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_screenname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.UserMentionEntityP.screenName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserMentionEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserMentionEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string idStr = 2;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserMentionEntityP.idStr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_idstr(), target);
  }

  // repeated int32 indices = 3;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_indices(), byte_size, target);
    }
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserMentionEntityP.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string screenName = 5;
  if (!this->_internal_screenname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_screenname().data(), static_cast<int>(this->_internal_screenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UserMentionEntityP.screenName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_screenname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UserMentionEntityP)
  return target;
}

size_t UserMentionEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserMentionEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string idStr = 2;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string screenName = 5;
  if (!this->_internal_screenname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_screenname());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserMentionEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserMentionEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserMentionEntityP::GetClassData() const { return &_class_data_; }


void UserMentionEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserMentionEntityP*>(&to_msg);
  auto& from = static_cast<const UserMentionEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.UserMentionEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_screenname().empty()) {
    _this->_internal_set_screenname(from._internal_screenname());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserMentionEntityP::CopyFrom(const UserMentionEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserMentionEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMentionEntityP::IsInitialized() const {
  return true;
}

void UserMentionEntityP::InternalSwap(UserMentionEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.screenname_, lhs_arena,
      &other->_impl_.screenname_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserMentionEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[12]);
}

// ===================================================================

class SymbolEntityP::_Internal {
 public:
};

SymbolEntityP::SymbolEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SymbolEntityP)
}
SymbolEntityP::SymbolEntityP(const SymbolEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymbolEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SymbolEntityP)
}

inline void SymbolEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SymbolEntityP::~SymbolEntityP() {
  // @@protoc_insertion_point(destructor:proto.SymbolEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indices_.~RepeatedField();
  _impl_.text_.Destroy();
}

void SymbolEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SymbolEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indices_.Clear();
  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SymbolEntityP.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymbolEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SymbolEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SymbolEntityP.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SymbolEntityP)
  return target;
}

size_t SymbolEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SymbolEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymbolEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymbolEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymbolEntityP::GetClassData() const { return &_class_data_; }


void SymbolEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymbolEntityP*>(&to_msg);
  auto& from = static_cast<const SymbolEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SymbolEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymbolEntityP::CopyFrom(const SymbolEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SymbolEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolEntityP::IsInitialized() const {
  return true;
}

void SymbolEntityP::InternalSwap(SymbolEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[13]);
}

// ===================================================================

class PollEntityP::_Internal {
 public:
};

PollEntityP::PollEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PollEntityP)
}
PollEntityP::PollEntityP(const PollEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.enddatetime_){}
    , decltype(_impl_.durationminutes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enddatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enddatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enddatetime().empty()) {
    _this->_impl_.enddatetime_.Set(from._internal_enddatetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.durationminutes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.durationminutes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_durationminutes().empty()) {
    _this->_impl_.durationminutes_.Set(from._internal_durationminutes(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.PollEntityP)
}

inline void PollEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){arena}
    , decltype(_impl_.enddatetime_){}
    , decltype(_impl_.durationminutes_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.enddatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enddatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.durationminutes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.durationminutes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PollEntityP::~PollEntityP() {
  // @@protoc_insertion_point(destructor:proto.PollEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_.~RepeatedPtrField();
  _impl_.enddatetime_.Destroy();
  _impl_.durationminutes_.Destroy();
}

void PollEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PollEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  _impl_.enddatetime_.ClearToEmpty();
  _impl_.durationminutes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.OptionEntityP options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string endDatetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_enddatetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PollEntityP.endDatetime"));
        } else
          goto handle_unusual;
        continue;
      // string durationMinutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_durationminutes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PollEntityP.durationMinutes"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PollEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.OptionEntityP options = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string endDatetime = 2;
  if (!this->_internal_enddatetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enddatetime().data(), static_cast<int>(this->_internal_enddatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PollEntityP.endDatetime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enddatetime(), target);
  }

  // string durationMinutes = 3;
  if (!this->_internal_durationminutes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_durationminutes().data(), static_cast<int>(this->_internal_durationminutes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PollEntityP.durationMinutes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_durationminutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PollEntityP)
  return target;
}

size_t PollEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PollEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.OptionEntityP options = 1;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string endDatetime = 2;
  if (!this->_internal_enddatetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enddatetime());
  }

  // string durationMinutes = 3;
  if (!this->_internal_durationminutes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_durationminutes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollEntityP::GetClassData() const { return &_class_data_; }


void PollEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollEntityP*>(&to_msg);
  auto& from = static_cast<const PollEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PollEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if (!from._internal_enddatetime().empty()) {
    _this->_internal_set_enddatetime(from._internal_enddatetime());
  }
  if (!from._internal_durationminutes().empty()) {
    _this->_internal_set_durationminutes(from._internal_durationminutes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollEntityP::CopyFrom(const PollEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PollEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollEntityP::IsInitialized() const {
  return true;
}

void PollEntityP::InternalSwap(PollEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enddatetime_, lhs_arena,
      &other->_impl_.enddatetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.durationminutes_, lhs_arena,
      &other->_impl_.durationminutes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PollEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[14]);
}

// ===================================================================

class MediaSizesEntityP::_Internal {
 public:
  static const ::proto::SizeEntityP& thumb(const MediaSizesEntityP* msg);
  static const ::proto::SizeEntityP& large(const MediaSizesEntityP* msg);
  static const ::proto::SizeEntityP& medium(const MediaSizesEntityP* msg);
  static const ::proto::SizeEntityP& small(const MediaSizesEntityP* msg);
};

const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::thumb(const MediaSizesEntityP* msg) {
  return *msg->_impl_.thumb_;
}
const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::large(const MediaSizesEntityP* msg) {
  return *msg->_impl_.large_;
}
const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::medium(const MediaSizesEntityP* msg) {
  return *msg->_impl_.medium_;
}
const ::proto::SizeEntityP&
MediaSizesEntityP::_Internal::small(const MediaSizesEntityP* msg) {
  return *msg->_impl_.small_;
}
MediaSizesEntityP::MediaSizesEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MediaSizesEntityP)
}
MediaSizesEntityP::MediaSizesEntityP(const MediaSizesEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaSizesEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.thumb_){nullptr}
    , decltype(_impl_.large_){nullptr}
    , decltype(_impl_.medium_){nullptr}
    , decltype(_impl_.small_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_thumb()) {
    _this->_impl_.thumb_ = new ::proto::SizeEntityP(*from._impl_.thumb_);
  }
  if (from._internal_has_large()) {
    _this->_impl_.large_ = new ::proto::SizeEntityP(*from._impl_.large_);
  }
  if (from._internal_has_medium()) {
    _this->_impl_.medium_ = new ::proto::SizeEntityP(*from._impl_.medium_);
  }
  if (from._internal_has_small()) {
    _this->_impl_.small_ = new ::proto::SizeEntityP(*from._impl_.small_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.MediaSizesEntityP)
}

inline void MediaSizesEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.thumb_){nullptr}
    , decltype(_impl_.large_){nullptr}
    , decltype(_impl_.medium_){nullptr}
    , decltype(_impl_.small_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MediaSizesEntityP::~MediaSizesEntityP() {
  // @@protoc_insertion_point(destructor:proto.MediaSizesEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaSizesEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.thumb_;
  if (this != internal_default_instance()) delete _impl_.large_;
  if (this != internal_default_instance()) delete _impl_.medium_;
  if (this != internal_default_instance()) delete _impl_.small_;
}

void MediaSizesEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaSizesEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MediaSizesEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.thumb_ != nullptr) {
    delete _impl_.thumb_;
  }
  _impl_.thumb_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.large_ != nullptr) {
    delete _impl_.large_;
  }
  _impl_.large_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.medium_ != nullptr) {
    delete _impl_.medium_;
  }
  _impl_.medium_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.small_ != nullptr) {
    delete _impl_.small_;
  }
  _impl_.small_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaSizesEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.SizeEntityP thumb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SizeEntityP large = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_large(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SizeEntityP medium = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_medium(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SizeEntityP small = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_small(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaSizesEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MediaSizesEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SizeEntityP thumb = 1;
  if (this->_internal_has_thumb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::thumb(this),
        _Internal::thumb(this).GetCachedSize(), target, stream);
  }

  // .proto.SizeEntityP large = 2;
  if (this->_internal_has_large()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::large(this),
        _Internal::large(this).GetCachedSize(), target, stream);
  }

  // .proto.SizeEntityP medium = 3;
  if (this->_internal_has_medium()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::medium(this),
        _Internal::medium(this).GetCachedSize(), target, stream);
  }

  // .proto.SizeEntityP small = 4;
  if (this->_internal_has_small()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::small(this),
        _Internal::small(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MediaSizesEntityP)
  return target;
}

size_t MediaSizesEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MediaSizesEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.SizeEntityP thumb = 1;
  if (this->_internal_has_thumb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.thumb_);
  }

  // .proto.SizeEntityP large = 2;
  if (this->_internal_has_large()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_);
  }

  // .proto.SizeEntityP medium = 3;
  if (this->_internal_has_medium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medium_);
  }

  // .proto.SizeEntityP small = 4;
  if (this->_internal_has_small()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.small_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaSizesEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaSizesEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaSizesEntityP::GetClassData() const { return &_class_data_; }


void MediaSizesEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaSizesEntityP*>(&to_msg);
  auto& from = static_cast<const MediaSizesEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MediaSizesEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thumb()) {
    _this->_internal_mutable_thumb()->::proto::SizeEntityP::MergeFrom(
        from._internal_thumb());
  }
  if (from._internal_has_large()) {
    _this->_internal_mutable_large()->::proto::SizeEntityP::MergeFrom(
        from._internal_large());
  }
  if (from._internal_has_medium()) {
    _this->_internal_mutable_medium()->::proto::SizeEntityP::MergeFrom(
        from._internal_medium());
  }
  if (from._internal_has_small()) {
    _this->_internal_mutable_small()->::proto::SizeEntityP::MergeFrom(
        from._internal_small());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaSizesEntityP::CopyFrom(const MediaSizesEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MediaSizesEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaSizesEntityP::IsInitialized() const {
  return true;
}

void MediaSizesEntityP::InternalSwap(MediaSizesEntityP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaSizesEntityP, _impl_.small_)
      + sizeof(MediaSizesEntityP::_impl_.small_)
      - PROTOBUF_FIELD_OFFSET(MediaSizesEntityP, _impl_.thumb_)>(
          reinterpret_cast<char*>(&_impl_.thumb_),
          reinterpret_cast<char*>(&other->_impl_.thumb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaSizesEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[15]);
}

// ===================================================================

class SizeEntityP::_Internal {
 public:
};

SizeEntityP::SizeEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SizeEntityP)
}
SizeEntityP::SizeEntityP(const SizeEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SizeEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resize_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resize().empty()) {
    _this->_impl_.resize_.Set(from._internal_resize(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:proto.SizeEntityP)
}

inline void SizeEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resize_){}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SizeEntityP::~SizeEntityP() {
  // @@protoc_insertion_point(destructor:proto.SizeEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SizeEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resize_.Destroy();
}

void SizeEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SizeEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SizeEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resize_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SizeEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_resize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.SizeEntityP.resize"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SizeEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SizeEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // string resize = 3;
  if (!this->_internal_resize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resize().data(), static_cast<int>(this->_internal_resize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SizeEntityP.resize");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SizeEntityP)
  return target;
}

size_t SizeEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SizeEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resize = 3;
  if (!this->_internal_resize().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resize());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SizeEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SizeEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SizeEntityP::GetClassData() const { return &_class_data_; }


void SizeEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SizeEntityP*>(&to_msg);
  auto& from = static_cast<const SizeEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SizeEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resize().empty()) {
    _this->_internal_set_resize(from._internal_resize());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SizeEntityP::CopyFrom(const SizeEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SizeEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeEntityP::IsInitialized() const {
  return true;
}

void SizeEntityP::InternalSwap(SizeEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resize_, lhs_arena,
      &other->_impl_.resize_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SizeEntityP, _impl_.height_)
      + sizeof(SizeEntityP::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SizeEntityP, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SizeEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[16]);
}

// ===================================================================

class VariantEntityP::_Internal {
 public:
};

VariantEntityP::VariantEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VariantEntityP)
}
VariantEntityP::VariantEntityP(const VariantEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariantEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contenttype_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.bitrate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contenttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contenttype().empty()) {
    _this->_impl_.contenttype_.Set(from._internal_contenttype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bitrate_ = from._impl_.bitrate_;
  // @@protoc_insertion_point(copy_constructor:proto.VariantEntityP)
}

inline void VariantEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contenttype_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.bitrate_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contenttype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenttype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariantEntityP::~VariantEntityP() {
  // @@protoc_insertion_point(destructor:proto.VariantEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariantEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contenttype_.Destroy();
  _impl_.url_.Destroy();
}

void VariantEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariantEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VariantEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contenttype_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _impl_.bitrate_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariantEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bitrate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contenttype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.VariantEntityP.contentType"));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.VariantEntityP.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariantEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VariantEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bitrate = 1;
  if (this->_internal_bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_bitrate(), target);
  }

  // string contentType = 2;
  if (!this->_internal_contenttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contenttype().data(), static_cast<int>(this->_internal_contenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.VariantEntityP.contentType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contenttype(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.VariantEntityP.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VariantEntityP)
  return target;
}

size_t VariantEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VariantEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contentType = 2;
  if (!this->_internal_contenttype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contenttype());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int64 bitrate = 1;
  if (this->_internal_bitrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bitrate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariantEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariantEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariantEntityP::GetClassData() const { return &_class_data_; }


void VariantEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariantEntityP*>(&to_msg);
  auto& from = static_cast<const VariantEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VariantEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contenttype().empty()) {
    _this->_internal_set_contenttype(from._internal_contenttype());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_bitrate() != 0) {
    _this->_internal_set_bitrate(from._internal_bitrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariantEntityP::CopyFrom(const VariantEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VariantEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantEntityP::IsInitialized() const {
  return true;
}

void VariantEntityP::InternalSwap(VariantEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contenttype_, lhs_arena,
      &other->_impl_.contenttype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.bitrate_, other->_impl_.bitrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[17]);
}

// ===================================================================

class VideoEntityP::_Internal {
 public:
};

VideoEntityP::VideoEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VideoEntityP)
}
VideoEntityP::VideoEntityP(const VideoEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aspectratio_){from._impl_.aspectratio_}
    , /*decltype(_impl_._aspectratio_cached_byte_size_)*/{0}
    , decltype(_impl_.variants_){from._impl_.variants_}
    , decltype(_impl_.durationmillis_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.durationmillis_ = from._impl_.durationmillis_;
  // @@protoc_insertion_point(copy_constructor:proto.VideoEntityP)
}

inline void VideoEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aspectratio_){arena}
    , /*decltype(_impl_._aspectratio_cached_byte_size_)*/{0}
    , decltype(_impl_.variants_){arena}
    , decltype(_impl_.durationmillis_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoEntityP::~VideoEntityP() {
  // @@protoc_insertion_point(destructor:proto.VideoEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aspectratio_.~RepeatedField();
  _impl_.variants_.~RepeatedPtrField();
}

void VideoEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aspectratio_.Clear();
  _impl_.variants_.Clear();
  _impl_.durationmillis_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 aspectRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_aspectratio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_aspectratio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 durationMillis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.durationmillis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.VariantEntityP variants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VideoEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 aspectRatio = 1;
  {
    int byte_size = _impl_._aspectratio_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_aspectratio(), byte_size, target);
    }
  }

  // int32 durationMillis = 2;
  if (this->_internal_durationmillis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_durationmillis(), target);
  }

  // repeated .proto.VariantEntityP variants = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variants_size()); i < n; i++) {
    const auto& repfield = this->_internal_variants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VideoEntityP)
  return target;
}

size_t VideoEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 aspectRatio = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.aspectratio_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._aspectratio_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto.VariantEntityP variants = 3;
  total_size += 1UL * this->_internal_variants_size();
  for (const auto& msg : this->_impl_.variants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 durationMillis = 2;
  if (this->_internal_durationmillis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_durationmillis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoEntityP::GetClassData() const { return &_class_data_; }


void VideoEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoEntityP*>(&to_msg);
  auto& from = static_cast<const VideoEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aspectratio_.MergeFrom(from._impl_.aspectratio_);
  _this->_impl_.variants_.MergeFrom(from._impl_.variants_);
  if (from._internal_durationmillis() != 0) {
    _this->_internal_set_durationmillis(from._internal_durationmillis());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoEntityP::CopyFrom(const VideoEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoEntityP::IsInitialized() const {
  return true;
}

void VideoEntityP::InternalSwap(VideoEntityP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aspectratio_.InternalSwap(&other->_impl_.aspectratio_);
  _impl_.variants_.InternalSwap(&other->_impl_.variants_);
  swap(_impl_.durationmillis_, other->_impl_.durationmillis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[18]);
}

// ===================================================================

class AdditionalMediaInfoEntityP::_Internal {
 public:
};

AdditionalMediaInfoEntityP::AdditionalMediaInfoEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.AdditionalMediaInfoEntityP)
}
AdditionalMediaInfoEntityP::AdditionalMediaInfoEntityP(const AdditionalMediaInfoEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdditionalMediaInfoEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.embeddable_){}
    , decltype(_impl_.monetizable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.embeddable_, &from._impl_.embeddable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monetizable_) -
    reinterpret_cast<char*>(&_impl_.embeddable_)) + sizeof(_impl_.monetizable_));
  // @@protoc_insertion_point(copy_constructor:proto.AdditionalMediaInfoEntityP)
}

inline void AdditionalMediaInfoEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.embeddable_){false}
    , decltype(_impl_.monetizable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdditionalMediaInfoEntityP::~AdditionalMediaInfoEntityP() {
  // @@protoc_insertion_point(destructor:proto.AdditionalMediaInfoEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdditionalMediaInfoEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void AdditionalMediaInfoEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdditionalMediaInfoEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AdditionalMediaInfoEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.embeddable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monetizable_) -
      reinterpret_cast<char*>(&_impl_.embeddable_)) + sizeof(_impl_.monetizable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalMediaInfoEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.AdditionalMediaInfoEntityP.title"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.AdditionalMediaInfoEntityP.description"));
        } else
          goto handle_unusual;
        continue;
      // bool embeddable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.embeddable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool monetizable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.monetizable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdditionalMediaInfoEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AdditionalMediaInfoEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AdditionalMediaInfoEntityP.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AdditionalMediaInfoEntityP.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool embeddable = 3;
  if (this->_internal_embeddable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_embeddable(), target);
  }

  // bool monetizable = 4;
  if (this->_internal_monetizable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_monetizable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AdditionalMediaInfoEntityP)
  return target;
}

size_t AdditionalMediaInfoEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AdditionalMediaInfoEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool embeddable = 3;
  if (this->_internal_embeddable() != 0) {
    total_size += 1 + 1;
  }

  // bool monetizable = 4;
  if (this->_internal_monetizable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdditionalMediaInfoEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdditionalMediaInfoEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdditionalMediaInfoEntityP::GetClassData() const { return &_class_data_; }


void AdditionalMediaInfoEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdditionalMediaInfoEntityP*>(&to_msg);
  auto& from = static_cast<const AdditionalMediaInfoEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.AdditionalMediaInfoEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_embeddable() != 0) {
    _this->_internal_set_embeddable(from._internal_embeddable());
  }
  if (from._internal_monetizable() != 0) {
    _this->_internal_set_monetizable(from._internal_monetizable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdditionalMediaInfoEntityP::CopyFrom(const AdditionalMediaInfoEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AdditionalMediaInfoEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalMediaInfoEntityP::IsInitialized() const {
  return true;
}

void AdditionalMediaInfoEntityP::InternalSwap(AdditionalMediaInfoEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdditionalMediaInfoEntityP, _impl_.monetizable_)
      + sizeof(AdditionalMediaInfoEntityP::_impl_.monetizable_)
      - PROTOBUF_FIELD_OFFSET(AdditionalMediaInfoEntityP, _impl_.embeddable_)>(
          reinterpret_cast<char*>(&_impl_.embeddable_),
          reinterpret_cast<char*>(&other->_impl_.embeddable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalMediaInfoEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[19]);
}

// ===================================================================

class OptionEntityP::_Internal {
 public:
};

OptionEntityP::OptionEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.OptionEntityP)
}
OptionEntityP::OptionEntityP(const OptionEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.position_ = from._impl_.position_;
  // @@protoc_insertion_point(copy_constructor:proto.OptionEntityP)
}

inline void OptionEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.position_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OptionEntityP::~OptionEntityP() {
  // @@protoc_insertion_point(destructor:proto.OptionEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void OptionEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.OptionEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.position_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.OptionEntityP.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.OptionEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_position(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.OptionEntityP.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OptionEntityP)
  return target;
}

size_t OptionEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.OptionEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 position = 1;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionEntityP::GetClassData() const { return &_class_data_; }


void OptionEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionEntityP*>(&to_msg);
  auto& from = static_cast<const OptionEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.OptionEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionEntityP::CopyFrom(const OptionEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.OptionEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionEntityP::IsInitialized() const {
  return true;
}

void OptionEntityP::InternalSwap(OptionEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[20]);
}

// ===================================================================

class MatchingRulesEntityP::_Internal {
 public:
};

MatchingRulesEntityP::MatchingRulesEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MatchingRulesEntityP)
}
MatchingRulesEntityP::MatchingRulesEntityP(const MatchingRulesEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchingRulesEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.MatchingRulesEntityP)
}

inline void MatchingRulesEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MatchingRulesEntityP::~MatchingRulesEntityP() {
  // @@protoc_insertion_point(destructor:proto.MatchingRulesEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchingRulesEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.idstr_.Destroy();
}

void MatchingRulesEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchingRulesEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MatchingRulesEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.idstr_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchingRulesEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MatchingRulesEntityP.tag"));
        } else
          goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idStr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MatchingRulesEntityP.idStr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchingRulesEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MatchingRulesEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MatchingRulesEntityP.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // string idStr = 3;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MatchingRulesEntityP.idStr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_idstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MatchingRulesEntityP)
  return target;
}

size_t MatchingRulesEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MatchingRulesEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string idStr = 3;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchingRulesEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchingRulesEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchingRulesEntityP::GetClassData() const { return &_class_data_; }


void MatchingRulesEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchingRulesEntityP*>(&to_msg);
  auto& from = static_cast<const MatchingRulesEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MatchingRulesEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchingRulesEntityP::CopyFrom(const MatchingRulesEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MatchingRulesEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingRulesEntityP::IsInitialized() const {
  return true;
}

void MatchingRulesEntityP::InternalSwap(MatchingRulesEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchingRulesEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[21]);
}

// ===================================================================

class MapFieldEntry::_Internal {
 public:
};

MapFieldEntry::MapFieldEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MapFieldEntry)
}
MapFieldEntry::MapFieldEntry(const MapFieldEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapFieldEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:proto.MapFieldEntry)
}

inline void MapFieldEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapFieldEntry::~MapFieldEntry() {
  // @@protoc_insertion_point(destructor:proto.MapFieldEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapFieldEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void MapFieldEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapFieldEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapFieldEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapFieldEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MapFieldEntry.key"));
        } else
          goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapFieldEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapFieldEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MapFieldEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapFieldEntry)
  return target;
}

size_t MapFieldEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapFieldEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapFieldEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapFieldEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapFieldEntry::GetClassData() const { return &_class_data_; }


void MapFieldEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapFieldEntry*>(&to_msg);
  auto& from = static_cast<const MapFieldEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MapFieldEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapFieldEntry::CopyFrom(const MapFieldEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapFieldEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFieldEntry::IsInitialized() const {
  return true;
}

void MapFieldEntry::InternalSwap(MapFieldEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapFieldEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[22]);
}

// ===================================================================

class ExtendedTweetEntityP::_Internal {
 public:
  static const ::proto::EntitiesP& entities(const ExtendedTweetEntityP* msg);
  static const ::proto::ExtendedEntitiesP& extendedentities(const ExtendedTweetEntityP* msg);
};

const ::proto::EntitiesP&
ExtendedTweetEntityP::_Internal::entities(const ExtendedTweetEntityP* msg) {
  return *msg->_impl_.entities_;
}
const ::proto::ExtendedEntitiesP&
ExtendedTweetEntityP::_Internal::extendedentities(const ExtendedTweetEntityP* msg) {
  return *msg->_impl_.extendedentities_;
}
ExtendedTweetEntityP::ExtendedTweetEntityP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ExtendedTweetEntityP)
}
ExtendedTweetEntityP::ExtendedTweetEntityP(const ExtendedTweetEntityP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedTweetEntityP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.displaytextrange_){from._impl_.displaytextrange_}
    , /*decltype(_impl_._displaytextrange_cached_byte_size_)*/{0}
    , decltype(_impl_.fulltext_){}
    , decltype(_impl_.entities_){nullptr}
    , decltype(_impl_.extendedentities_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fulltext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fulltext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fulltext().empty()) {
    _this->_impl_.fulltext_.Set(from._internal_fulltext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_entities()) {
    _this->_impl_.entities_ = new ::proto::EntitiesP(*from._impl_.entities_);
  }
  if (from._internal_has_extendedentities()) {
    _this->_impl_.extendedentities_ = new ::proto::ExtendedEntitiesP(*from._impl_.extendedentities_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ExtendedTweetEntityP)
}

inline void ExtendedTweetEntityP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.displaytextrange_){arena}
    , /*decltype(_impl_._displaytextrange_cached_byte_size_)*/{0}
    , decltype(_impl_.fulltext_){}
    , decltype(_impl_.entities_){nullptr}
    , decltype(_impl_.extendedentities_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fulltext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fulltext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExtendedTweetEntityP::~ExtendedTweetEntityP() {
  // @@protoc_insertion_point(destructor:proto.ExtendedTweetEntityP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedTweetEntityP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.displaytextrange_.~RepeatedField();
  _impl_.fulltext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.entities_;
  if (this != internal_default_instance()) delete _impl_.extendedentities_;
}

void ExtendedTweetEntityP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedTweetEntityP::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ExtendedTweetEntityP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.displaytextrange_.Clear();
  _impl_.fulltext_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.entities_ != nullptr) {
    delete _impl_.entities_;
  }
  _impl_.entities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extendedentities_ != nullptr) {
    delete _impl_.extendedentities_;
  }
  _impl_.extendedentities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedTweetEntityP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fullText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fulltext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.ExtendedTweetEntityP.fullText"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 displayTextRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_displaytextrange(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_displaytextrange(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.EntitiesP entities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_entities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ExtendedEntitiesP extendedEntities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedentities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedTweetEntityP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExtendedTweetEntityP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fullText = 1;
  if (!this->_internal_fulltext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fulltext().data(), static_cast<int>(this->_internal_fulltext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ExtendedTweetEntityP.fullText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fulltext(), target);
  }

  // repeated int32 displayTextRange = 2;
  {
    int byte_size = _impl_._displaytextrange_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_displaytextrange(), byte_size, target);
    }
  }

  // .proto.EntitiesP entities = 3;
  if (this->_internal_has_entities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::entities(this),
        _Internal::entities(this).GetCachedSize(), target, stream);
  }

  // .proto.ExtendedEntitiesP extendedEntities = 4;
  if (this->_internal_has_extendedentities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::extendedentities(this),
        _Internal::extendedentities(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExtendedTweetEntityP)
  return target;
}

size_t ExtendedTweetEntityP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ExtendedTweetEntityP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 displayTextRange = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.displaytextrange_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._displaytextrange_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string fullText = 1;
  if (!this->_internal_fulltext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fulltext());
  }

  // .proto.EntitiesP entities = 3;
  if (this->_internal_has_entities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entities_);
  }

  // .proto.ExtendedEntitiesP extendedEntities = 4;
  if (this->_internal_has_extendedentities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extendedentities_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedTweetEntityP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedTweetEntityP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedTweetEntityP::GetClassData() const { return &_class_data_; }


void ExtendedTweetEntityP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedTweetEntityP*>(&to_msg);
  auto& from = static_cast<const ExtendedTweetEntityP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ExtendedTweetEntityP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.displaytextrange_.MergeFrom(from._impl_.displaytextrange_);
  if (!from._internal_fulltext().empty()) {
    _this->_internal_set_fulltext(from._internal_fulltext());
  }
  if (from._internal_has_entities()) {
    _this->_internal_mutable_entities()->::proto::EntitiesP::MergeFrom(
        from._internal_entities());
  }
  if (from._internal_has_extendedentities()) {
    _this->_internal_mutable_extendedentities()->::proto::ExtendedEntitiesP::MergeFrom(
        from._internal_extendedentities());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedTweetEntityP::CopyFrom(const ExtendedTweetEntityP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ExtendedTweetEntityP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedTweetEntityP::IsInitialized() const {
  return true;
}

void ExtendedTweetEntityP::InternalSwap(ExtendedTweetEntityP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.displaytextrange_.InternalSwap(&other->_impl_.displaytextrange_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fulltext_, lhs_arena,
      &other->_impl_.fulltext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedTweetEntityP, _impl_.extendedentities_)
      + sizeof(ExtendedTweetEntityP::_impl_.extendedentities_)
      - PROTOBUF_FIELD_OFFSET(ExtendedTweetEntityP, _impl_.entities_)>(
          reinterpret_cast<char*>(&_impl_.entities_),
          reinterpret_cast<char*>(&other->_impl_.entities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedTweetEntityP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TweetStatusP_2eproto_getter, &descriptor_table_TweetStatusP_2eproto_once,
      file_level_metadata_TweetStatusP_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::TweetStatusP*
Arena::CreateMaybeMessage< ::proto::TweetStatusP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TweetStatusP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::UserP*
Arena::CreateMaybeMessage< ::proto::UserP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::UserP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CoordinatesP*
Arena::CreateMaybeMessage< ::proto::CoordinatesP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CoordinatesP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP*
Arena::CreateMaybeMessage< ::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP_RowsTwoP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP*
Arena::CreateMaybeMessage< ::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlaceP_BoundingBoxCoordinateP_RowsOneP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlaceP_BoundingBoxCoordinateP*
Arena::CreateMaybeMessage< ::proto::PlaceP_BoundingBoxCoordinateP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlaceP_BoundingBoxCoordinateP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlaceP*
Arena::CreateMaybeMessage< ::proto::PlaceP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlaceP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EntitiesP*
Arena::CreateMaybeMessage< ::proto::EntitiesP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::EntitiesP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExtendedEntitiesP*
Arena::CreateMaybeMessage< ::proto::ExtendedEntitiesP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExtendedEntitiesP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::URLEntityP*
Arena::CreateMaybeMessage< ::proto::URLEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::URLEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HashtagEntityP*
Arena::CreateMaybeMessage< ::proto::HashtagEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HashtagEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MediaEntityP*
Arena::CreateMaybeMessage< ::proto::MediaEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MediaEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::UserMentionEntityP*
Arena::CreateMaybeMessage< ::proto::UserMentionEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::UserMentionEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SymbolEntityP*
Arena::CreateMaybeMessage< ::proto::SymbolEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SymbolEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PollEntityP*
Arena::CreateMaybeMessage< ::proto::PollEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PollEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MediaSizesEntityP*
Arena::CreateMaybeMessage< ::proto::MediaSizesEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MediaSizesEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SizeEntityP*
Arena::CreateMaybeMessage< ::proto::SizeEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SizeEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VariantEntityP*
Arena::CreateMaybeMessage< ::proto::VariantEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VariantEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VideoEntityP*
Arena::CreateMaybeMessage< ::proto::VideoEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VideoEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AdditionalMediaInfoEntityP*
Arena::CreateMaybeMessage< ::proto::AdditionalMediaInfoEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AdditionalMediaInfoEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::OptionEntityP*
Arena::CreateMaybeMessage< ::proto::OptionEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::OptionEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MatchingRulesEntityP*
Arena::CreateMaybeMessage< ::proto::MatchingRulesEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MatchingRulesEntityP >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MapFieldEntry*
Arena::CreateMaybeMessage< ::proto::MapFieldEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MapFieldEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ExtendedTweetEntityP*
Arena::CreateMaybeMessage< ::proto::ExtendedTweetEntityP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ExtendedTweetEntityP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
