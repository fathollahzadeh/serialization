library(plyr)
require(stats)
data <- read.delim("./data/java/externalSort/final6/loging.log_externalSort_lineItem_final6", header=TRUE, sep="#")
datac <- read.delim("./data/C_Results/externalSort3/ResultsExternalSortCpp.txt", header=TRUE, sep="#")
# data <- read.delim("data/java/externalSort/final3/loging.log_Lineitem_final", header=TRUE, sep="#")
data <- subset(data,  method=="ExternalSort")
data <- data[c(-6)]
datac <- subset(datac, datatype=="LineItem")
# print(data)
# print (datac)
data <- rbind(data, datac)
print(data)
# Colors JSON, JAVA Default,  BSON , Protocol Buffer, ByteBuffer, KRYO
# colors=c("darkred", "green", "blue", "red", "blue1", "green4")
# colors=c("darkred", "green4")
# colors=c("darkblue", "green4")
colors=c("green4", "darkblue")
totaltime <- data$totaltime/3600
iotime <- data$iotime/3600
cputime <- totaltime - iotime
values <- matrix( c(iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol", "Java ByteBuffer", "Java Kryo", "C++ HandCoded", "C++ InPlace", "C++ Protocol", "C++ Boost")
# xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol","Java ByteBuffer",  "Java Kryo")
#################################################
#######     Plots       #########################
#################################################
pdf(file='ExternalSort_LineItem.pdf', family="Helvetica")
par(mar = c(7, 6, 1, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+7), legend.text=TRUE, axes=FALSE)
# p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+2), legend.text=TRUE, beside=TRUE, axes=FALSE)
z <- c(0.1, 0.5,2, 5,  15)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(totaltime), xnames)
# writes the
text(x=p1, y=totaltime,  font = 2, font.lab = 8, labels=round(totaltime, 1), pos=3, xpd=NA, cex=2)
text(8, 9, cex=1.4, font=2, "External Sort of")
text(8, 5, cex=1.4, font=2, "120M Lineitem Objects")
box()
text(x=p1-0.9,  y=0.04, labs, xpd=NA, srt=45, pos=3,  cex=1.4)
legend("topright", regions, cex = 1, fill = colors)
title(ylab = "Time (hours)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
library(plyr)
require(stats)
data <- read.delim("./data/java/externalSort/final6/loging.log_externalSort_lineItem_final6", header=TRUE, sep="#")
datac <- read.delim("./data/C_Results/externalSort3/ResultsExternalSortCpp.txt", header=TRUE, sep="#")
# data <- read.delim("data/java/externalSort/final3/loging.log_Lineitem_final", header=TRUE, sep="#")
data <- subset(data,  method=="ExternalSort")
data <- data[c(-6)]
datac <- subset(datac, datatype=="LineItem")
# print(data)
# print (datac)
data <- rbind(data, datac)
print(data)
# Colors JSON, JAVA Default,  BSON , Protocol Buffer, ByteBuffer, KRYO
# colors=c("darkred", "green", "blue", "red", "blue1", "green4")
# colors=c("darkred", "green4")
# colors=c("darkblue", "green4")
colors=c("green4", "darkblue")
totaltime <- data$totaltime/3600
iotime <- data$iotime/3600
cputime <- totaltime - iotime
values <- matrix( c(iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol", "Java ByteBuffer", "Java Kryo", "C++ HandCoded", "C++ InPlace", "C++ Protocol", "C++ Boost")
# xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol","Java ByteBuffer",  "Java Kryo")
#################################################
#######     Plots       #########################
#################################################
pdf(file='/home/saeed/Documents/Projects/1-Research/SaeedKiaSVN/copub/2019/serializationT/new_R/ExternalSort_LineItem.pdf', family="Helvetica")
par(mar = c(7, 6, 1, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+7), legend.text=TRUE, axes=FALSE)
# p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+2), legend.text=TRUE, beside=TRUE, axes=FALSE)
z <- c(0.1, 0.5,2, 5,  15)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(totaltime), xnames)
# writes the
text(x=p1, y=totaltime,  font = 2, font.lab = 8, labels=round(totaltime, 1), pos=3, xpd=NA, cex=2)
text(8, 9, cex=1.4, font=2, "External Sort of")
text(8, 5, cex=1.4, font=2, "120M Lineitem Objects")
box()
text(x=p1-0.9,  y=0.04, labs, xpd=NA, srt=45, pos=3,  cex=1.4)
legend("topright", regions, cex = 1, fill = colors)
title(ylab = "Time (hours)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
install.packages("plyr")
install.packages("plyr")
library(plyr)
require(stats)
data <- read.delim("./data/java/externalSort/final6/loging.log_externalSort_lineItem_final6", header=TRUE, sep="#")
datac <- read.delim("./data/C_Results/externalSort3/ResultsExternalSortCpp.txt", header=TRUE, sep="#")
# data <- read.delim("data/java/externalSort/final3/loging.log_Lineitem_final", header=TRUE, sep="#")
data <- subset(data,  method=="ExternalSort")
data <- data[c(-6)]
datac <- subset(datac, datatype=="LineItem")
# print(data)
# print (datac)
data <- rbind(data, datac)
print(data)
# Colors JSON, JAVA Default,  BSON , Protocol Buffer, ByteBuffer, KRYO
# colors=c("darkred", "green", "blue", "red", "blue1", "green4")
# colors=c("darkred", "green4")
# colors=c("darkblue", "green4")
colors=c("green4", "darkblue")
totaltime <- data$totaltime/3600
iotime <- data$iotime/3600
cputime <- totaltime - iotime
values <- matrix( c(iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol", "Java ByteBuffer", "Java Kryo", "C++ HandCoded", "C++ InPlace", "C++ Protocol", "C++ Boost")
# xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol","Java ByteBuffer",  "Java Kryo")
#################################################
#######     Plots       #########################
#################################################
pdf(file='/home/saeed/Documents/Projects/1-Research/SaeedKiaSVN/copub/2019/serializationT/new_R/ExternalSort_LineItem.pdf', family="Helvetica")
par(mar = c(7, 6, 1, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+7), legend.text=TRUE, axes=FALSE)
# p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+2), legend.text=TRUE, beside=TRUE, axes=FALSE)
z <- c(0.1, 0.5,2, 5,  15)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(totaltime), xnames)
# writes the
text(x=p1, y=totaltime,  font = 2, font.lab = 8, labels=round(totaltime, 1), pos=3, xpd=NA, cex=2)
text(8, 9, cex=1.4, font=2, "External Sort of")
text(8, 5, cex=1.4, font=2, "120M Lineitem Objects")
box()
text(x=p1-0.9,  y=0.04, labs, xpd=NA, srt=45, pos=3,  cex=1.4)
legend("topright", regions, cex = 1, fill = colors)
title(ylab = "Time (hours)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
# get the file names
fnames_java <- list.files("./data/java/final5", pattern="resultJavaReadObjects_10000_.*\\.txt", full.names=TRUE)
fnames_c <- list.files("./data/C_Results", pattern="results_10000_.*\\.txt", full.names=TRUE)
# join the file names
fnames <-c(fnames_java, fnames_c)
print(fnames)
# read the first file.
mydata <-read.delim(fnames[1], header=TRUE, sep="#")
# loop over the list and read them one by one and join to the previous one.
from <- 2
to <- length(fnames)
for (i in from:to){
mydata<-rbind(mydata, read.delim(fnames[i], header=TRUE, sep="#"))
}
# Filter to get only Part data
dataPart<-mydata[mydata$datatype=="Customer", ]
dataPartTrue<-dataPart[dataPart$seq=="false", ]
# dataPartTrueJSON<-dataPartTrue[dataPartTrue$method=="JSON", ]
# print(dataPartTrueJSON)
#################################################
#######     Calculating the mean Data  ##########
#################################################
library(reshape2)
library(dplyr)
melted <- melt(dataPartTrue, id.vars=c("language", "method", "seq", "datatype"))
melted_totaltime<-melted[melted$variable=="totaltime", ]
melted_iotime<-melted[melted$variable=="iotime", ]
print(melted_totaltime)
grouped_totaltime <- group_by(melted_totaltime, language, method, seq, datatype)
myNewDF_totaltime<- summarise(grouped_totaltime, totaltime=mean(value))
grouped_iotime <- group_by(melted_iotime, language, method, seq, datatype)
myNewDF_iotime<- summarise(grouped_iotime, iotime=mean(value))
print(myNewDF_iotime)
print(myNewDF_totaltime)
#################################################
#######     Prepare data               ##########
#################################################
cputime <- myNewDF_totaltime$totaltime - myNewDF_iotime$iotime
values <- matrix(c(myNewDF_iotime$iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
# print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java BSON", "Java ByteBuffer", "Java Default" , "Java JSON GZIP", "Java Kryo", "Java Protocol", "C++ Boost", "C++ HandCoded", "C++ InPlace", "C++ Protocol")
# colors=c("darkred", "green4")
colors=c("green4", "darkblue")
#################################################
#######     Plots       #########################
#################################################
pdf(file='Experiment_1_Customer_10K_false.pdf', family="Helvetica")
# par(mar = c(7, 5, 1, 0) + 0.1)
par(mar = c(8, 5, 0, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(17,  max(myNewDF_totaltime$totaltime,na.rm = TRUE)+2), legend.text=TRUE, axes=FALSE)
z <- c(17, 20, 21, 23, 24, 28, 34, 36)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(myNewDF_totaltime$totaltime), xnames)
# writes the
text(x=p1, y=myNewDF_totaltime$totaltime,  font = 2, font.lab = 8, labels=round(myNewDF_totaltime$totaltime, 0), pos=3, xpd=NA, cex=1.7)
text(9, 31, cex=1.8, font=2, "Random Read")
text(8.5, 29, cex=1.8, font=2, "10K Customer Objects")
box()
text(x=p1-0.9,  y=14.6, labs, xpd=NA, srt=45, pos=3,  cex=1.6)
legend("topright", regions, cex = 1.4, fill = colors)
title(ylab = "Time (sec)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
install.packages("dplyr")
install.packages("dplyr")
# get the file names
fnames_java <- list.files("./data/java/final5", pattern="resultJavaReadObjects_10000_.*\\.txt", full.names=TRUE)
fnames_c <- list.files("./data/C_Results", pattern="results_10000_.*\\.txt", full.names=TRUE)
# join the file names
fnames <-c(fnames_java, fnames_c)
print(fnames)
# read the first file.
mydata <-read.delim(fnames[1], header=TRUE, sep="#")
# loop over the list and read them one by one and join to the previous one.
from <- 2
to <- length(fnames)
for (i in from:to){
mydata<-rbind(mydata, read.delim(fnames[i], header=TRUE, sep="#"))
}
# Filter to get only Part data
dataPart<-mydata[mydata$datatype=="Customer", ]
dataPartTrue<-dataPart[dataPart$seq=="false", ]
# dataPartTrueJSON<-dataPartTrue[dataPartTrue$method=="JSON", ]
# print(dataPartTrueJSON)
#################################################
#######     Calculating the mean Data  ##########
#################################################
library(reshape2)
library(dplyr)
melted <- melt(dataPartTrue, id.vars=c("language", "method", "seq", "datatype"))
melted_totaltime<-melted[melted$variable=="totaltime", ]
melted_iotime<-melted[melted$variable=="iotime", ]
print(melted_totaltime)
grouped_totaltime <- group_by(melted_totaltime, language, method, seq, datatype)
myNewDF_totaltime<- summarise(grouped_totaltime, totaltime=mean(value))
grouped_iotime <- group_by(melted_iotime, language, method, seq, datatype)
myNewDF_iotime<- summarise(grouped_iotime, iotime=mean(value))
print(myNewDF_iotime)
print(myNewDF_totaltime)
#################################################
#######     Prepare data               ##########
#################################################
cputime <- myNewDF_totaltime$totaltime - myNewDF_iotime$iotime
values <- matrix(c(myNewDF_iotime$iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
# print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java BSON", "Java ByteBuffer", "Java Default" , "Java JSON GZIP", "Java Kryo", "Java Protocol", "C++ Boost", "C++ HandCoded", "C++ InPlace", "C++ Protocol")
# colors=c("darkred", "green4")
colors=c("green4", "darkblue")
#################################################
#######     Plots       #########################
#################################################
pdf(file='Experiment_1_Customer_10K_false.pdf', family="Helvetica")
# par(mar = c(7, 5, 1, 0) + 0.1)
par(mar = c(8, 5, 0, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(17,  max(myNewDF_totaltime$totaltime,na.rm = TRUE)+2), legend.text=TRUE, axes=FALSE)
z <- c(17, 20, 21, 23, 24, 28, 34, 36)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(myNewDF_totaltime$totaltime), xnames)
# writes the
text(x=p1, y=myNewDF_totaltime$totaltime,  font = 2, font.lab = 8, labels=round(myNewDF_totaltime$totaltime, 0), pos=3, xpd=NA, cex=1.7)
text(9, 31, cex=1.8, font=2, "Random Read")
text(8.5, 29, cex=1.8, font=2, "10K Customer Objects")
box()
text(x=p1-0.9,  y=14.6, labs, xpd=NA, srt=45, pos=3,  cex=1.6)
legend("topright", regions, cex = 1.4, fill = colors)
title(ylab = "Time (sec)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
# get the file names
fnames_java <- list.files("./data/java/final5", pattern="resultJavaReadObjects_10000_.*\\.txt", full.names=TRUE)
fnames_c <- list.files("./data/C_Results", pattern="results_10000_.*\\.txt", full.names=TRUE)
# join the file names
fnames <-c(fnames_java, fnames_c)
print(fnames)
# read the first file.
mydata <-read.delim(fnames[1], header=TRUE, sep="#")
# loop over the list and read them one by one and join to the previous one.
from <- 2
to <- length(fnames)
for (i in from:to){
mydata<-rbind(mydata, read.delim(fnames[i], header=TRUE, sep="#"))
}
# Filter to get only Part data
dataPart<-mydata[mydata$datatype=="Customer", ]
dataPartTrue<-dataPart[dataPart$seq=="false", ]
# dataPartTrueJSON<-dataPartTrue[dataPartTrue$method=="JSON", ]
# print(dataPartTrueJSON)
#################################################
#######     Calculating the mean Data  ##########
#################################################
library(reshape2)
library(dplyr)
melted <- melt(dataPartTrue, id.vars=c("language", "method", "seq", "datatype"))
melted_totaltime<-melted[melted$variable=="totaltime", ]
melted_iotime<-melted[melted$variable=="iotime", ]
print(melted_totaltime)
grouped_totaltime <- group_by(melted_totaltime, language, method, seq, datatype)
myNewDF_totaltime<- summarise(grouped_totaltime, totaltime=mean(value))
grouped_iotime <- group_by(melted_iotime, language, method, seq, datatype)
myNewDF_iotime<- summarise(grouped_iotime, iotime=mean(value))
print(myNewDF_iotime)
print(myNewDF_totaltime)
#################################################
#######     Prepare data               ##########
#################################################
cputime <- myNewDF_totaltime$totaltime - myNewDF_iotime$iotime
values <- matrix(c(myNewDF_iotime$iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
# print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java BSON", "Java ByteBuffer", "Java Default" , "Java JSON GZIP", "Java Kryo", "Java Protocol", "C++ Boost", "C++ HandCoded", "C++ InPlace", "C++ Protocol")
# colors=c("darkred", "green4")
colors=c("green4", "darkblue")
#################################################
#######     Plots       #########################
#################################################
pdf(file='/home/saeed/Documents/Projects/1-Research/SaeedKiaSVN/copub/2019/serializationT/new_R/Experiment_1_Customer_10K_false.pdf', family="Helvetica")
# par(mar = c(7, 5, 1, 0) + 0.1)
par(mar = c(8, 5, 0, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(17,  max(myNewDF_totaltime$totaltime,na.rm = TRUE)+2), legend.text=TRUE, axes=FALSE)
z <- c(17, 20, 21, 23, 24, 28, 34, 36)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(myNewDF_totaltime$totaltime), xnames)
# writes the
text(x=p1, y=myNewDF_totaltime$totaltime,  font = 2, font.lab = 8, labels=round(myNewDF_totaltime$totaltime, 0), pos=3, xpd=NA, cex=1.7)
text(9, 31, cex=1.8, font=2, "Random Read")
text(8.5, 29, cex=1.8, font=2, "10K Customer Objects")
box()
text(x=p1-0.9,  y=14.6, labs, xpd=NA, srt=45, pos=3,  cex=1.6)
legend("topright", regions, cex = 1.4, fill = colors)
title(ylab = "Time (sec)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
library(plyr)
require(stats)
data <- read.delim("./data/java/externalSort/final6/loging.log_Customer_externalSort_final6", header=TRUE, sep="#")
datac <- read.delim("./data/C_Results/externalSort3/ResultsExternalSortCpp.txt", header=TRUE, sep="#")
# data <- read.delim("data/java/externalSort/final3/loging.log_Lineitem_final", header=TRUE, sep="#")
data <- subset(data,  method=="ExternalSort")
data <- data[c(-6)]
datac <- subset(datac, datatype=="Customer")
# print(data)
# print (datac)
data <- rbind(data, datac)
print(data)
# Colors JSON, JAVA Default,  BSON , Protocol Buffer, ByteBuffer, KRYO
# colors=c("darkred", "green", "blue", "red", "blue1", "green4")
# colors=c("darkred", "green4")
colors=c("green4", "darkblue")
totaltime <- data$totaltime/3600
iotime <- data$iotime/3600
cputime <- totaltime - iotime
values <- matrix( c(iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol", "Java ByteBuffer", "Java Kryo", "C++ HandCoded", "C++ InPlace", "C++ Protocol", "C++ Boost")
# xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol","Java ByteBuffer",  "Java Kryo")
#################################################
#######     Plots       #########################
#################################################
pdf(file='ExternalSort_Customer.pdf', family="Helvetica")
par(mar = c(7, 6, 1, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+3), legend.text=TRUE, axes=FALSE)
# p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+2), legend.text=TRUE, beside=TRUE, axes=FALSE)
z <- c(0.1, 0.5, 2, 5)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(totaltime), xnames)
# writes the
text(x=p1, y=totaltime,  font = 2, font.lab = 8, labels=round(totaltime, 1), pos=3, xpd=NA, cex=2)
text(7, 5, cex=1.4, font=2, "External Sort of 3M Customer Objects")
box()
text(x=p1-0.7,  y=0.05, labs, xpd=NA, srt=45, pos=3,  cex=1.35)
legend("topright", regions, cex = 1, fill = colors)
title(ylab = "Time (hours)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
library(plyr)
require(stats)
data <- read.delim("./data/java/externalSort/final6/loging.log_Customer_externalSort_final6", header=TRUE, sep="#")
datac <- read.delim("./data/C_Results/externalSort3/ResultsExternalSortCpp.txt", header=TRUE, sep="#")
# data <- read.delim("data/java/externalSort/final3/loging.log_Lineitem_final", header=TRUE, sep="#")
data <- subset(data,  method=="ExternalSort")
data <- data[c(-6)]
datac <- subset(datac, datatype=="Customer")
# print(data)
# print (datac)
data <- rbind(data, datac)
print(data)
# Colors JSON, JAVA Default,  BSON , Protocol Buffer, ByteBuffer, KRYO
# colors=c("darkred", "green", "blue", "red", "blue1", "green4")
# colors=c("darkred", "green4")
colors=c("green4", "darkblue")
totaltime <- data$totaltime/3600
iotime <- data$iotime/3600
cputime <- totaltime - iotime
values <- matrix( c(iotime, cputime), nrow = 2, ncol = 10, byrow = TRUE)
print(values)
regions <- c("IO Time", "CPU Time")
xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol", "Java ByteBuffer", "Java Kryo", "C++ HandCoded", "C++ InPlace", "C++ Protocol", "C++ Boost")
# xnames = c("Java JSON GZIP",  "Java Default" , "Java BSON" , "Java Protocol","Java ByteBuffer",  "Java Kryo")
#################################################
#######     Plots       #########################
#################################################
pdf(file='/home/saeed/Documents/Projects/1-Research/SaeedKiaSVN/copub/2019/serializationT/new_R/ExternalSort_Customer.pdf', family="Helvetica")
par(mar = c(7, 6, 1, 0) + 0.1)
p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+3), legend.text=TRUE, axes=FALSE)
# p1 <- barplot(values, log="y", col=colors, ylim = c(0.1,  max(totaltime,na.rm = TRUE)+2), legend.text=TRUE, beside=TRUE, axes=FALSE)
z <- c(0.1, 0.5, 2, 5)
# Writes the label of x-axis
axis(2, las=1, at = z, labels=round(z, digits=1),  cex.axis = 1.6, font = 2)
labs <- paste(names(totaltime), xnames)
# writes the
text(x=p1, y=totaltime,  font = 2, font.lab = 8, labels=round(totaltime, 1), pos=3, xpd=NA, cex=2)
text(7, 5, cex=1.4, font=2, "External Sort of 3M Customer Objects")
box()
text(x=p1-0.7,  y=0.05, labs, xpd=NA, srt=45, pos=3,  cex=1.35)
legend("topright", regions, cex = 1, fill = colors)
title(ylab = "Time (hours)- log",  cex.lab = 2, line = 3.3, cex=2, font=2)
install.packages("plyr")
