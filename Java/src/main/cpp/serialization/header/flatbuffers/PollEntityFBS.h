// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POLLENTITY_TWEETSTATUSFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_POLLENTITY_TWEETSTATUSFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "OptionEntityFBS.h"

namespace tweetstatusflatbuffers {

struct PollEntityFBS;
struct PollEntityFBSBuilder;
struct PollEntityFBST;

struct PollEntityFBST : public flatbuffers::NativeTable {
  typedef PollEntityFBS TableType;
  std::vector<std::unique_ptr<tweetstatusflatbuffers::OptionEntityFBST>> options{};
  std::string end_datetime{};
  std::string duration_minutes{};
};

struct PollEntityFBS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PollEntityFBST NativeTableType;
  typedef PollEntityFBSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPTIONS = 4,
    VT_END_DATETIME = 6,
    VT_DURATION_MINUTES = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>> *options() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>> *>(VT_OPTIONS);
  }
  flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>> *mutable_options() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>> *>(VT_OPTIONS);
  }
  const flatbuffers::String *end_datetime() const {
    return GetPointer<const flatbuffers::String *>(VT_END_DATETIME);
  }
  flatbuffers::String *mutable_end_datetime() {
    return GetPointer<flatbuffers::String *>(VT_END_DATETIME);
  }
  const flatbuffers::String *duration_minutes() const {
    return GetPointer<const flatbuffers::String *>(VT_DURATION_MINUTES);
  }
  flatbuffers::String *mutable_duration_minutes() {
    return GetPointer<flatbuffers::String *>(VT_DURATION_MINUTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OPTIONS) &&
           verifier.VerifyVector(options()) &&
           verifier.VerifyVectorOfTables(options()) &&
           VerifyOffset(verifier, VT_END_DATETIME) &&
           verifier.VerifyString(end_datetime()) &&
           VerifyOffset(verifier, VT_DURATION_MINUTES) &&
           verifier.VerifyString(duration_minutes()) &&
           verifier.EndTable();
  }
  PollEntityFBST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PollEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PollEntityFBS> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PollEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PollEntityFBSBuilder {
  typedef PollEntityFBS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_options(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>>> options) {
    fbb_.AddOffset(PollEntityFBS::VT_OPTIONS, options);
  }
  void add_end_datetime(flatbuffers::Offset<flatbuffers::String> end_datetime) {
    fbb_.AddOffset(PollEntityFBS::VT_END_DATETIME, end_datetime);
  }
  void add_duration_minutes(flatbuffers::Offset<flatbuffers::String> duration_minutes) {
    fbb_.AddOffset(PollEntityFBS::VT_DURATION_MINUTES, duration_minutes);
  }
  explicit PollEntityFBSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PollEntityFBS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PollEntityFBS>(end);
    return o;
  }
};

inline flatbuffers::Offset<PollEntityFBS> CreatePollEntityFBS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>>> options = 0,
    flatbuffers::Offset<flatbuffers::String> end_datetime = 0,
    flatbuffers::Offset<flatbuffers::String> duration_minutes = 0) {
  PollEntityFBSBuilder builder_(_fbb);
  builder_.add_duration_minutes(duration_minutes);
  builder_.add_end_datetime(end_datetime);
  builder_.add_options(options);
  return builder_.Finish();
}

inline flatbuffers::Offset<PollEntityFBS> CreatePollEntityFBSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>> *options = nullptr,
    const char *end_datetime = nullptr,
    const char *duration_minutes = nullptr) {
  auto options__ = options ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>>(*options) : 0;
  auto end_datetime__ = end_datetime ? _fbb.CreateString(end_datetime) : 0;
  auto duration_minutes__ = duration_minutes ? _fbb.CreateString(duration_minutes) : 0;
  return tweetstatusflatbuffers::CreatePollEntityFBS(
      _fbb,
      options__,
      end_datetime__,
      duration_minutes__);
}

flatbuffers::Offset<PollEntityFBS> CreatePollEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const PollEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PollEntityFBST *PollEntityFBS::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PollEntityFBST>(new PollEntityFBST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PollEntityFBS::UnPackTo(PollEntityFBST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = options(); if (_e) { _o->options.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->options[_i] = std::unique_ptr<tweetstatusflatbuffers::OptionEntityFBST>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = end_datetime(); if (_e) _o->end_datetime = _e->str(); }
  { auto _e = duration_minutes(); if (_e) _o->duration_minutes = _e->str(); }
}

inline flatbuffers::Offset<PollEntityFBS> PollEntityFBS::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PollEntityFBST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePollEntityFBS(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PollEntityFBS> CreatePollEntityFBS(flatbuffers::FlatBufferBuilder &_fbb, const PollEntityFBST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PollEntityFBST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _options = _o->options.size() ? _fbb.CreateVector<flatbuffers::Offset<tweetstatusflatbuffers::OptionEntityFBS>> (_o->options.size(), [](size_t i, _VectorArgs *__va) { return CreateOptionEntityFBS(*__va->__fbb, __va->__o->options[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _end_datetime = _o->end_datetime.empty() ? 0 : _fbb.CreateString(_o->end_datetime);
  auto _duration_minutes = _o->duration_minutes.empty() ? 0 : _fbb.CreateString(_o->duration_minutes);
  return tweetstatusflatbuffers::CreatePollEntityFBS(
      _fbb,
      _options,
      _end_datetime,
      _duration_minutes);
}

inline const tweetstatusflatbuffers::PollEntityFBS *GetPollEntityFBS(const void *buf) {
  return flatbuffers::GetRoot<tweetstatusflatbuffers::PollEntityFBS>(buf);
}

inline const tweetstatusflatbuffers::PollEntityFBS *GetSizePrefixedPollEntityFBS(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<tweetstatusflatbuffers::PollEntityFBS>(buf);
}

inline PollEntityFBS *GetMutablePollEntityFBS(void *buf) {
  return flatbuffers::GetMutableRoot<PollEntityFBS>(buf);
}

inline bool VerifyPollEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tweetstatusflatbuffers::PollEntityFBS>(nullptr);
}

inline bool VerifySizePrefixedPollEntityFBSBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<tweetstatusflatbuffers::PollEntityFBS>(nullptr);
}

inline void FinishPollEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPollEntityFBSBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tweetstatusflatbuffers::PollEntityFBS> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<tweetstatusflatbuffers::PollEntityFBST> UnPackPollEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::PollEntityFBST>(GetPollEntityFBS(buf)->UnPack(res));
}

inline std::unique_ptr<tweetstatusflatbuffers::PollEntityFBST> UnPackSizePrefixedPollEntityFBS(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<tweetstatusflatbuffers::PollEntityFBST>(GetSizePrefixedPollEntityFBS(buf)->UnPack(res));
}

}  // namespace tweetstatusflatbuffers

#endif  // FLATBUFFERS_GENERATED_POLLENTITY_TWEETSTATUSFLATBUFFERS_H_
