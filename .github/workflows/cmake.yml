name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    
    - name: Update OS
      run: sudo apt-get update
    
    - name: Install clang
      run: sudo apt-get install -yq clang
      
    - name: Install Rapidjson   
      run: sudo apt-get install -yq rapidjson-dev
      
    - name: Install Boost
      run: sudo apt-get install -yq libboost-dev libgsl-dev && ls -hl
      
      
    - name: Install Google Protobuf
      
#       run: sudo apt-get install autoconf automake libtool curl make g++ unzip && rm -rf Apps && mkdir Apps && cd Apps && 
#             wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.0/protobuf-cpp-3.11.0.tar.gz && ls -l && 
#             tar -xvzf protobuf-cpp-3.11.0.tar.gz && cd protobuf-3.11.0 && sudo ./configure && sudo make && sudo make check && make install &&
#             sudo ldconfig
            
#     - name: Install BSON
#       run: cd Apps && sudo wget https://github.com/mongodb/mongo-c-driver/releases/download/1.16.2/mongo-c-driver-1.16.2.tar.gz &&
#            tar -xvzf mongo-c-driver-1.16.2.tar.gz && cd mongo-c-driver-1.16.2 && sudo mkdir cmake-build && sudo cd cmake-build &&
#            sudo cmake -DENABLE_AUTOMATIC_INIT_AND_CLEANUP=OFF .. && sudo make install && cd ..
    
#     - name: Create Build Environment
#       run: cmake -E make_directory ${{github.workspace}}/build/C++
#       working-directory: ${{github.workspace}}/C++/src
      
#     - name: Configure CMake
#       shell: bash
#       working-directory: ${{github.workspace}}/build/C++
#       run: cmake $GITHUB_WORKSPACE/C++/src -DCMAKE_BUILD_TYPE=$BUILD_TYPE
     
#     - name: Build
#       working-directory: ${{github.workspace}}/C++/build
#       shell: bash    
#       run: cmake --build . --config $BUILD_TYPE

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       run: ctest -C $BUILD_TYPE   
